from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.ppp_interface_pppoe_pr_preset_val import PPPInterfacePppoePrPresetVal
from ..models.ppp_interface_pppoe_reset_type import PPPInterfacePppoeResetType
from ..models.ppp_interface_type import PPPInterfaceType

if TYPE_CHECKING:
    from ..models.ppp_link_interface import PPPLinkInterface


T = TypeVar("T", bound="PPPInterface")


@_attrs_define
class PPPInterface:
    """
    Attributes:
        ptpid (str): generated by system when a PPP is created
        if_device (str): generated by system when a PPP is created
        type (PPPInterfaceType): link type
            valid value = ppp, pppoe, pptp, l2tp
        link_interfaces (List['PPPLinkInterface']):
        descr (str): description
        username (str):
        password (str): GET request will return ******** to protect previously entered password
            POST and PUT request need to send password encoded in base64
        phone (str): (type ppp only) phone number to ISP
        apn (str): (type ppp only) access point name
        apnum (str): (type ppp only) apn number, default to 1 if apn is set
        simpin (str): (type ppp only) security code on the SIM
        pin_wait (str): (type ppp only) seconds to wait for the SIM to discover network after the PIN is sent
        initstr (str): (type ppp only and base64 encoded) modem initialization string, if necessary
        connect_timeout (str): (type ppp only) time to wait for a connection attempt to succeed
        uptime (bool): (type ppp only) tracks the uptime for the connection
        country (str): (type ppp only) country in which the modem resides
        providerplan (str): (type ppp only) type of cellular service this modem uses from provider
        provider (str): (for type ppp) cellular service provider for the modem
            (for type pppoe) service name of the ISP, leave blank for most ISPs
        null_service (bool): (type pppoe only) some ISPs require to send a NULL value instead of a blank service name
        pppoe_reset_type (PPPInterfacePppoeResetType): (type pppoe only) configures a preset time to reset the
            connection
            valid value = custom, preset
        pppoe_pr_preset_val (PPPInterfacePppoePrPresetVal): (type pppoe only and pppoe_pr_preset_val = "preset")
            connection reset frequency
            valid value = monthly, weekly, daily, hourly
        pppoe_resethour (str): (type pppoe only and pppoe_pr_preset_val = "custom") hour of the reset date/time
        pppoe_resetminute (str): (type pppoe only and pppoe_pr_preset_val = "custom") minute of the reset date/time
        pppoe_resetdate (str): (type pppoe only and pppoe_pr_preset_val = "custom") date of the reset date/time
        pppoe_multilink_over_singlelink (bool): (type pppoe only) use LCP multi-link extensions over a single link
        pppoe_mtu_override (bool): (type pppoe only) overrides the MTU negotiated with the ISP
        l2tp_secret (str): (type l2tp only and base64 encoded) l2tp tunnel shared secret, optional
        ondemand (bool): dial On demand mode
        idletimeout (int): number of idle seconds to disconnect the connection
        vjcomp (bool): disable Van Jacobson TCP header compression, auto-negotiated by default
        tcpmssfix (bool): disable TCP maximum segment size fix, enabled by default
        shortseq (bool): for multi-link PPP, disable shorter multi-link fragment headers, auto-negotiated by default
        acfcomp (bool): disable address and control field compression, auto-negotiated by default
        protocomp (bool): disable protocol field compression, auto-negotiated by default
    """

    ptpid: str
    if_device: str
    type: PPPInterfaceType
    link_interfaces: List["PPPLinkInterface"]
    descr: str
    username: str
    password: str
    phone: str
    apn: str
    apnum: str
    simpin: str
    pin_wait: str
    initstr: str
    connect_timeout: str
    uptime: bool
    country: str
    providerplan: str
    provider: str
    null_service: bool
    pppoe_reset_type: PPPInterfacePppoeResetType
    pppoe_pr_preset_val: PPPInterfacePppoePrPresetVal
    pppoe_resethour: str
    pppoe_resetminute: str
    pppoe_resetdate: str
    pppoe_multilink_over_singlelink: bool
    pppoe_mtu_override: bool
    l2tp_secret: str
    ondemand: bool
    idletimeout: int
    vjcomp: bool
    tcpmssfix: bool
    shortseq: bool
    acfcomp: bool
    protocomp: bool
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        ptpid = self.ptpid

        if_device = self.if_device

        type = self.type.value

        link_interfaces = []
        for link_interfaces_item_data in self.link_interfaces:
            link_interfaces_item = link_interfaces_item_data.to_dict()
            link_interfaces.append(link_interfaces_item)

        descr = self.descr

        username = self.username

        password = self.password

        phone = self.phone

        apn = self.apn

        apnum = self.apnum

        simpin = self.simpin

        pin_wait = self.pin_wait

        initstr = self.initstr

        connect_timeout = self.connect_timeout

        uptime = self.uptime

        country = self.country

        providerplan = self.providerplan

        provider = self.provider

        null_service = self.null_service

        pppoe_reset_type = self.pppoe_reset_type.value

        pppoe_pr_preset_val = self.pppoe_pr_preset_val.value

        pppoe_resethour = self.pppoe_resethour

        pppoe_resetminute = self.pppoe_resetminute

        pppoe_resetdate = self.pppoe_resetdate

        pppoe_multilink_over_singlelink = self.pppoe_multilink_over_singlelink

        pppoe_mtu_override = self.pppoe_mtu_override

        l2tp_secret = self.l2tp_secret

        ondemand = self.ondemand

        idletimeout = self.idletimeout

        vjcomp = self.vjcomp

        tcpmssfix = self.tcpmssfix

        shortseq = self.shortseq

        acfcomp = self.acfcomp

        protocomp = self.protocomp

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "ptpid": ptpid,
                "if_device": if_device,
                "type": type,
                "link_interfaces": link_interfaces,
                "descr": descr,
                "username": username,
                "password": password,
                "phone": phone,
                "apn": apn,
                "apnum": apnum,
                "simpin": simpin,
                "pin_wait": pin_wait,
                "initstr": initstr,
                "connect_timeout": connect_timeout,
                "uptime": uptime,
                "country": country,
                "providerplan": providerplan,
                "provider": provider,
                "null_service": null_service,
                "pppoe_reset_type": pppoe_reset_type,
                "pppoe_pr_preset_val": pppoe_pr_preset_val,
                "pppoe_resethour": pppoe_resethour,
                "pppoe_resetminute": pppoe_resetminute,
                "pppoe_resetdate": pppoe_resetdate,
                "pppoe_multilink_over_singlelink": pppoe_multilink_over_singlelink,
                "pppoe_mtu_override": pppoe_mtu_override,
                "l2tp_secret": l2tp_secret,
                "ondemand": ondemand,
                "idletimeout": idletimeout,
                "vjcomp": vjcomp,
                "tcpmssfix": tcpmssfix,
                "shortseq": shortseq,
                "acfcomp": acfcomp,
                "protocomp": protocomp,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.ppp_link_interface import PPPLinkInterface

        d = src_dict.copy()
        ptpid = d.pop("ptpid")

        if_device = d.pop("if_device")

        type = PPPInterfaceType(d.pop("type"))

        link_interfaces = []
        _link_interfaces = d.pop("link_interfaces")
        for link_interfaces_item_data in _link_interfaces:
            link_interfaces_item = PPPLinkInterface.from_dict(link_interfaces_item_data)

            link_interfaces.append(link_interfaces_item)

        descr = d.pop("descr")

        username = d.pop("username")

        password = d.pop("password")

        phone = d.pop("phone")

        apn = d.pop("apn")

        apnum = d.pop("apnum")

        simpin = d.pop("simpin")

        pin_wait = d.pop("pin_wait")

        initstr = d.pop("initstr")

        connect_timeout = d.pop("connect_timeout")

        uptime = d.pop("uptime")

        country = d.pop("country")

        providerplan = d.pop("providerplan")

        provider = d.pop("provider")

        null_service = d.pop("null_service")

        pppoe_reset_type = PPPInterfacePppoeResetType(d.pop("pppoe_reset_type"))

        pppoe_pr_preset_val = PPPInterfacePppoePrPresetVal(d.pop("pppoe_pr_preset_val"))

        pppoe_resethour = d.pop("pppoe_resethour")

        pppoe_resetminute = d.pop("pppoe_resetminute")

        pppoe_resetdate = d.pop("pppoe_resetdate")

        pppoe_multilink_over_singlelink = d.pop("pppoe_multilink_over_singlelink")

        pppoe_mtu_override = d.pop("pppoe_mtu_override")

        l2tp_secret = d.pop("l2tp_secret")

        ondemand = d.pop("ondemand")

        idletimeout = d.pop("idletimeout")

        vjcomp = d.pop("vjcomp")

        tcpmssfix = d.pop("tcpmssfix")

        shortseq = d.pop("shortseq")

        acfcomp = d.pop("acfcomp")

        protocomp = d.pop("protocomp")

        ppp_interface = cls(
            ptpid=ptpid,
            if_device=if_device,
            type=type,
            link_interfaces=link_interfaces,
            descr=descr,
            username=username,
            password=password,
            phone=phone,
            apn=apn,
            apnum=apnum,
            simpin=simpin,
            pin_wait=pin_wait,
            initstr=initstr,
            connect_timeout=connect_timeout,
            uptime=uptime,
            country=country,
            providerplan=providerplan,
            provider=provider,
            null_service=null_service,
            pppoe_reset_type=pppoe_reset_type,
            pppoe_pr_preset_val=pppoe_pr_preset_val,
            pppoe_resethour=pppoe_resethour,
            pppoe_resetminute=pppoe_resetminute,
            pppoe_resetdate=pppoe_resetdate,
            pppoe_multilink_over_singlelink=pppoe_multilink_over_singlelink,
            pppoe_mtu_override=pppoe_mtu_override,
            l2tp_secret=l2tp_secret,
            ondemand=ondemand,
            idletimeout=idletimeout,
            vjcomp=vjcomp,
            tcpmssfix=tcpmssfix,
            shortseq=shortseq,
            acfcomp=acfcomp,
            protocomp=protocomp,
        )

        ppp_interface.additional_properties = d
        return ppp_interface

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
