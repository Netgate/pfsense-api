from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.ppp_interface_pppoe_pr_preset_val import PPPInterfacePppoePrPresetVal
from ..models.ppp_interface_pppoe_reset_type import PPPInterfacePppoeResetType
from ..models.ppp_interface_type import PPPInterfaceType
from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.ppp_link_interface import PPPLinkInterface


T = TypeVar("T", bound="PPPInterface")


@_attrs_define
class PPPInterface:
    """
    Attributes:
        ptpid (Union[Unset, str]): generated by system when a PPP is created
        if_device (Union[Unset, str]): generated by system when a PPP is created
        type (Union[Unset, PPPInterfaceType]): link type
            valid value = ppp, pppoe, pptp, l2tp
        link_interfaces (Union[Unset, List['PPPLinkInterface']]):
        descr (Union[Unset, str]): description
        username (Union[Unset, str]):
        password (Union[Unset, str]): GET request will return ******** to protect previously entered password
            POST and PUT request need to send password encoded in base64
        phone (Union[Unset, str]): (type ppp only) phone number to ISP
        apn (Union[Unset, str]): (type ppp only) access point name
        apnum (Union[Unset, str]): (type ppp only) apn number, default to 1 if apn is set
        simpin (Union[Unset, str]): (type ppp only) security code on the SIM
        pin_wait (Union[Unset, str]): (type ppp only) seconds to wait for the SIM to discover network after the PIN is
            sent
        initstr (Union[Unset, str]): (type ppp only and base64 encoded) modem initialization string, if necessary
        connect_timeout (Union[Unset, str]): (type ppp only) time to wait for a connection attempt to succeed
        uptime (Union[Unset, bool]): (type ppp only) tracks the uptime for the connection
        country (Union[Unset, str]): (type ppp only) country in which the modem resides
        providerplan (Union[Unset, str]): (type ppp only) type of cellular service this modem uses from provider
        provider (Union[Unset, str]): (for type ppp) cellular service provider for the modem
            (for type pppoe) service name of the ISP, leave blank for most ISPs
        null_service (Union[Unset, bool]): (type pppoe only) some ISPs require to send a NULL value instead of a blank
            service name
        pppoe_reset_type (Union[Unset, PPPInterfacePppoeResetType]): (type pppoe only) configures a preset time to reset
            the connection
            valid value = custom, preset
        pppoe_pr_preset_val (Union[Unset, PPPInterfacePppoePrPresetVal]): (type pppoe only and pppoe_pr_preset_val =
            "preset") connection reset frequency
            valid value = monthly, weekly, daily, hourly
        pppoe_resethour (Union[Unset, str]): (type pppoe only and pppoe_pr_preset_val = "custom") hour of the reset
            date/time
        pppoe_resetminute (Union[Unset, str]): (type pppoe only and pppoe_pr_preset_val = "custom") minute of the reset
            date/time
        pppoe_resetdate (Union[Unset, str]): (type pppoe only and pppoe_pr_preset_val = "custom") date of the reset
            date/time
        pppoe_multilink_over_singlelink (Union[Unset, bool]): (type pppoe only) use LCP multi-link extensions over a
            single link
        pppoe_mtu_override (Union[Unset, bool]): (type pppoe only) overrides the MTU negotiated with the ISP
        l2tp_secret (Union[Unset, str]): (type l2tp only and base64 encoded) l2tp tunnel shared secret, optional
        ondemand (Union[Unset, bool]): dial On demand mode
        idletimeout (Union[Unset, int]): number of idle seconds to disconnect the connection
        vjcomp (Union[Unset, bool]): disable Van Jacobson TCP header compression, auto-negotiated by default
        tcpmssfix (Union[Unset, bool]): disable TCP maximum segment size fix, enabled by default
        shortseq (Union[Unset, bool]): for multi-link PPP, disable shorter multi-link fragment headers, auto-negotiated
            by default
        acfcomp (Union[Unset, bool]): disable address and control field compression, auto-negotiated by default
        protocomp (Union[Unset, bool]): disable protocol field compression, auto-negotiated by default
    """

    ptpid: Union[Unset, str] = UNSET
    if_device: Union[Unset, str] = UNSET
    type: Union[Unset, PPPInterfaceType] = UNSET
    link_interfaces: Union[Unset, List["PPPLinkInterface"]] = UNSET
    descr: Union[Unset, str] = UNSET
    username: Union[Unset, str] = UNSET
    password: Union[Unset, str] = UNSET
    phone: Union[Unset, str] = UNSET
    apn: Union[Unset, str] = UNSET
    apnum: Union[Unset, str] = UNSET
    simpin: Union[Unset, str] = UNSET
    pin_wait: Union[Unset, str] = UNSET
    initstr: Union[Unset, str] = UNSET
    connect_timeout: Union[Unset, str] = UNSET
    uptime: Union[Unset, bool] = UNSET
    country: Union[Unset, str] = UNSET
    providerplan: Union[Unset, str] = UNSET
    provider: Union[Unset, str] = UNSET
    null_service: Union[Unset, bool] = UNSET
    pppoe_reset_type: Union[Unset, PPPInterfacePppoeResetType] = UNSET
    pppoe_pr_preset_val: Union[Unset, PPPInterfacePppoePrPresetVal] = UNSET
    pppoe_resethour: Union[Unset, str] = UNSET
    pppoe_resetminute: Union[Unset, str] = UNSET
    pppoe_resetdate: Union[Unset, str] = UNSET
    pppoe_multilink_over_singlelink: Union[Unset, bool] = UNSET
    pppoe_mtu_override: Union[Unset, bool] = UNSET
    l2tp_secret: Union[Unset, str] = UNSET
    ondemand: Union[Unset, bool] = UNSET
    idletimeout: Union[Unset, int] = UNSET
    vjcomp: Union[Unset, bool] = UNSET
    tcpmssfix: Union[Unset, bool] = UNSET
    shortseq: Union[Unset, bool] = UNSET
    acfcomp: Union[Unset, bool] = UNSET
    protocomp: Union[Unset, bool] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        ptpid = self.ptpid

        if_device = self.if_device

        type: Union[Unset, str] = UNSET
        if not isinstance(self.type, Unset):
            type = self.type.value

        link_interfaces: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.link_interfaces, Unset):
            link_interfaces = []
            for link_interfaces_item_data in self.link_interfaces:
                link_interfaces_item = link_interfaces_item_data.to_dict()
                link_interfaces.append(link_interfaces_item)

        descr = self.descr

        username = self.username

        password = self.password

        phone = self.phone

        apn = self.apn

        apnum = self.apnum

        simpin = self.simpin

        pin_wait = self.pin_wait

        initstr = self.initstr

        connect_timeout = self.connect_timeout

        uptime = self.uptime

        country = self.country

        providerplan = self.providerplan

        provider = self.provider

        null_service = self.null_service

        pppoe_reset_type: Union[Unset, str] = UNSET
        if not isinstance(self.pppoe_reset_type, Unset):
            pppoe_reset_type = self.pppoe_reset_type.value

        pppoe_pr_preset_val: Union[Unset, str] = UNSET
        if not isinstance(self.pppoe_pr_preset_val, Unset):
            pppoe_pr_preset_val = self.pppoe_pr_preset_val.value

        pppoe_resethour = self.pppoe_resethour

        pppoe_resetminute = self.pppoe_resetminute

        pppoe_resetdate = self.pppoe_resetdate

        pppoe_multilink_over_singlelink = self.pppoe_multilink_over_singlelink

        pppoe_mtu_override = self.pppoe_mtu_override

        l2tp_secret = self.l2tp_secret

        ondemand = self.ondemand

        idletimeout = self.idletimeout

        vjcomp = self.vjcomp

        tcpmssfix = self.tcpmssfix

        shortseq = self.shortseq

        acfcomp = self.acfcomp

        protocomp = self.protocomp

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if ptpid is not UNSET:
            field_dict["ptpid"] = ptpid
        if if_device is not UNSET:
            field_dict["if_device"] = if_device
        if type is not UNSET:
            field_dict["type"] = type
        if link_interfaces is not UNSET:
            field_dict["link_interfaces"] = link_interfaces
        if descr is not UNSET:
            field_dict["descr"] = descr
        if username is not UNSET:
            field_dict["username"] = username
        if password is not UNSET:
            field_dict["password"] = password
        if phone is not UNSET:
            field_dict["phone"] = phone
        if apn is not UNSET:
            field_dict["apn"] = apn
        if apnum is not UNSET:
            field_dict["apnum"] = apnum
        if simpin is not UNSET:
            field_dict["simpin"] = simpin
        if pin_wait is not UNSET:
            field_dict["pin_wait"] = pin_wait
        if initstr is not UNSET:
            field_dict["initstr"] = initstr
        if connect_timeout is not UNSET:
            field_dict["connect_timeout"] = connect_timeout
        if uptime is not UNSET:
            field_dict["uptime"] = uptime
        if country is not UNSET:
            field_dict["country"] = country
        if providerplan is not UNSET:
            field_dict["providerplan"] = providerplan
        if provider is not UNSET:
            field_dict["provider"] = provider
        if null_service is not UNSET:
            field_dict["null_service"] = null_service
        if pppoe_reset_type is not UNSET:
            field_dict["pppoe_reset_type"] = pppoe_reset_type
        if pppoe_pr_preset_val is not UNSET:
            field_dict["pppoe_pr_preset_val"] = pppoe_pr_preset_val
        if pppoe_resethour is not UNSET:
            field_dict["pppoe_resethour"] = pppoe_resethour
        if pppoe_resetminute is not UNSET:
            field_dict["pppoe_resetminute"] = pppoe_resetminute
        if pppoe_resetdate is not UNSET:
            field_dict["pppoe_resetdate"] = pppoe_resetdate
        if pppoe_multilink_over_singlelink is not UNSET:
            field_dict["pppoe_multilink_over_singlelink"] = pppoe_multilink_over_singlelink
        if pppoe_mtu_override is not UNSET:
            field_dict["pppoe_mtu_override"] = pppoe_mtu_override
        if l2tp_secret is not UNSET:
            field_dict["l2tp_secret"] = l2tp_secret
        if ondemand is not UNSET:
            field_dict["ondemand"] = ondemand
        if idletimeout is not UNSET:
            field_dict["idletimeout"] = idletimeout
        if vjcomp is not UNSET:
            field_dict["vjcomp"] = vjcomp
        if tcpmssfix is not UNSET:
            field_dict["tcpmssfix"] = tcpmssfix
        if shortseq is not UNSET:
            field_dict["shortseq"] = shortseq
        if acfcomp is not UNSET:
            field_dict["acfcomp"] = acfcomp
        if protocomp is not UNSET:
            field_dict["protocomp"] = protocomp

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.ppp_link_interface import PPPLinkInterface

        d = src_dict.copy()
        ptpid = d.pop("ptpid", UNSET)

        if_device = d.pop("if_device", UNSET)

        _type = d.pop("type", UNSET)
        type: Union[Unset, PPPInterfaceType]
        if isinstance(_type, Unset):
            type = UNSET
        else:
            type = PPPInterfaceType(_type)

        link_interfaces = []
        _link_interfaces = d.pop("link_interfaces", UNSET)
        for link_interfaces_item_data in _link_interfaces or []:
            link_interfaces_item = PPPLinkInterface.from_dict(link_interfaces_item_data)

            link_interfaces.append(link_interfaces_item)

        descr = d.pop("descr", UNSET)

        username = d.pop("username", UNSET)

        password = d.pop("password", UNSET)

        phone = d.pop("phone", UNSET)

        apn = d.pop("apn", UNSET)

        apnum = d.pop("apnum", UNSET)

        simpin = d.pop("simpin", UNSET)

        pin_wait = d.pop("pin_wait", UNSET)

        initstr = d.pop("initstr", UNSET)

        connect_timeout = d.pop("connect_timeout", UNSET)

        uptime = d.pop("uptime", UNSET)

        country = d.pop("country", UNSET)

        providerplan = d.pop("providerplan", UNSET)

        provider = d.pop("provider", UNSET)

        null_service = d.pop("null_service", UNSET)

        _pppoe_reset_type = d.pop("pppoe_reset_type", UNSET)
        pppoe_reset_type: Union[Unset, PPPInterfacePppoeResetType]
        if isinstance(_pppoe_reset_type, Unset):
            pppoe_reset_type = UNSET
        else:
            pppoe_reset_type = PPPInterfacePppoeResetType(_pppoe_reset_type)

        _pppoe_pr_preset_val = d.pop("pppoe_pr_preset_val", UNSET)
        pppoe_pr_preset_val: Union[Unset, PPPInterfacePppoePrPresetVal]
        if isinstance(_pppoe_pr_preset_val, Unset):
            pppoe_pr_preset_val = UNSET
        else:
            pppoe_pr_preset_val = PPPInterfacePppoePrPresetVal(_pppoe_pr_preset_val)

        pppoe_resethour = d.pop("pppoe_resethour", UNSET)

        pppoe_resetminute = d.pop("pppoe_resetminute", UNSET)

        pppoe_resetdate = d.pop("pppoe_resetdate", UNSET)

        pppoe_multilink_over_singlelink = d.pop("pppoe_multilink_over_singlelink", UNSET)

        pppoe_mtu_override = d.pop("pppoe_mtu_override", UNSET)

        l2tp_secret = d.pop("l2tp_secret", UNSET)

        ondemand = d.pop("ondemand", UNSET)

        idletimeout = d.pop("idletimeout", UNSET)

        vjcomp = d.pop("vjcomp", UNSET)

        tcpmssfix = d.pop("tcpmssfix", UNSET)

        shortseq = d.pop("shortseq", UNSET)

        acfcomp = d.pop("acfcomp", UNSET)

        protocomp = d.pop("protocomp", UNSET)

        ppp_interface = cls(
            ptpid=ptpid,
            if_device=if_device,
            type=type,
            link_interfaces=link_interfaces,
            descr=descr,
            username=username,
            password=password,
            phone=phone,
            apn=apn,
            apnum=apnum,
            simpin=simpin,
            pin_wait=pin_wait,
            initstr=initstr,
            connect_timeout=connect_timeout,
            uptime=uptime,
            country=country,
            providerplan=providerplan,
            provider=provider,
            null_service=null_service,
            pppoe_reset_type=pppoe_reset_type,
            pppoe_pr_preset_val=pppoe_pr_preset_val,
            pppoe_resethour=pppoe_resethour,
            pppoe_resetminute=pppoe_resetminute,
            pppoe_resetdate=pppoe_resetdate,
            pppoe_multilink_over_singlelink=pppoe_multilink_over_singlelink,
            pppoe_mtu_override=pppoe_mtu_override,
            l2tp_secret=l2tp_secret,
            ondemand=ondemand,
            idletimeout=idletimeout,
            vjcomp=vjcomp,
            tcpmssfix=tcpmssfix,
            shortseq=shortseq,
            acfcomp=acfcomp,
            protocomp=protocomp,
        )

        ppp_interface.additional_properties = d
        return ppp_interface

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
