from typing import Any, Dict, List, Type, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field

T = TypeVar("T", bound="GIFInterface")


@_attrs_define
class GIFInterface:
    """
    Attributes:
        if_identity (str): identity name of the parent interface
        tunnel_local_addr (str): local tunnel address
        tunnel_remote_addr (str): remote tunnel address
        tunnel_remote_net (int): remote tunnel address subnet
        remote_addr (str): address of the remote peer
        descr (str): description
        link1 (bool): explicit congestion notification (ecn) friendly behavior
        link2 (bool): disable automatic filtering of the outer gif source
        gifif (str): generated by system when create gif
    """

    if_identity: str
    tunnel_local_addr: str
    tunnel_remote_addr: str
    tunnel_remote_net: int
    remote_addr: str
    descr: str
    link1: bool
    link2: bool
    gifif: str
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        if_identity = self.if_identity

        tunnel_local_addr = self.tunnel_local_addr

        tunnel_remote_addr = self.tunnel_remote_addr

        tunnel_remote_net = self.tunnel_remote_net

        remote_addr = self.remote_addr

        descr = self.descr

        link1 = self.link1

        link2 = self.link2

        gifif = self.gifif

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "if_identity": if_identity,
                "tunnel_local_addr": tunnel_local_addr,
                "tunnel_remote_addr": tunnel_remote_addr,
                "tunnel_remote_net": tunnel_remote_net,
                "remote_addr": remote_addr,
                "descr": descr,
                "link1": link1,
                "link2": link2,
                "gifif": gifif,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        if_identity = d.pop("if_identity")

        tunnel_local_addr = d.pop("tunnel_local_addr")

        tunnel_remote_addr = d.pop("tunnel_remote_addr")

        tunnel_remote_net = d.pop("tunnel_remote_net")

        remote_addr = d.pop("remote_addr")

        descr = d.pop("descr")

        link1 = d.pop("link1")

        link2 = d.pop("link2")

        gifif = d.pop("gifif")

        gif_interface = cls(
            if_identity=if_identity,
            tunnel_local_addr=tunnel_local_addr,
            tunnel_remote_addr=tunnel_remote_addr,
            tunnel_remote_net=tunnel_remote_net,
            remote_addr=remote_addr,
            descr=descr,
            link1=link1,
            link2=link2,
            gifif=gifif,
        )

        gif_interface.additional_properties = d
        return gif_interface

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
