from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.limiter_aqm import LimiterAqm
from ..models.limiter_mask import LimiterMask
from ..models.limiter_sched import LimiterSched
from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.limiter_bandwidth import LimiterBandwidth
    from ..models.limiter_queue import LimiterQueue


T = TypeVar("T", bound="Limiter")


@_attrs_define
class Limiter:
    """
    Attributes:
        name (str): name of the limiter, it will appear for selection on firewall rules
        enabled (Union[Unset, bool]):
        number (Union[Unset, int]): generated by system when create limiter
        bandwidth (Union[Unset, List['LimiterBandwidth']]):
        mask (Union[Unset, LimiterMask]): controls how the limiter will mask addresses in the limiter
            valid values = none, srcaddress, dstaddress
        maskbits (Union[Unset, int]): address masking for ipv4
        maskbitsv6 (Union[Unset, int]): address masking for ipv6
        description (Union[Unset, str]):
        aqm (Union[Unset, LimiterAqm]): active queue management (AQM) algorithm
            valid values = droptail, codel, pie, red, gred
        param_codel_target (Union[Unset, str]): (for aqm=codel only) codel target delay in ms (set to "" to use default
            value)
        param_codel_interval (Union[Unset, str]): (for aqm=codel only) codel interval in ms (set to "" to use default
            value)
        param_pie_target (Union[Unset, str]): (for aqm=pie only) target delay in ms (set to "" to use default value)
        param_pie_tupdate (Union[Unset, str]): (for aqm=pie only) interval in ms (set to "" to use default value)
        param_pie_alpha (Union[Unset, str]): (for aqm=pie only) alpha (set to "" to use default value)
        param_pie_beta (Union[Unset, str]): (for aqm=pie only) beta (set to "" to use default value)
        param_pie_max_burst (Union[Unset, str]): (for aqm=pie only) max burst (set to "" to use default value)
        param_pie_max_ecnth (Union[Unset, str]): (for aqm=pie only) max ecnth (set to "" to use default value)
        param_red_w_q (Union[Unset, str]): (for aqm=red only) w_q (set to "" to use default value)
        param_red_min_th (Union[Unset, str]): (for aqm=red only) min_th (set to "" to use default value)
        param_red_max_th (Union[Unset, str]): (for aqm=red only) max_th (set to "" to use default value)
        param_red_max_p (Union[Unset, str]): (for aqm=red only) max_p (set to "" to use default value)
        param_gred_w_q (Union[Unset, str]): (for aqm=gred only) w_q (set to "" to use default value)
        param_gred_min_th (Union[Unset, str]): (for aqm=gred only) min_th (set to "" to use default value)
        param_gred_max_th (Union[Unset, str]): (for aqm=gred only) max_th (set to "" to use default value)
        param_gred_max_p (Union[Unset, str]): (for aqm=gred only) max_p (set to "" to use default value)
        sched (Union[Unset, LimiterSched]): scheduler manages the sequence of network packets in the limiter's queue
            valid values = wf2q+, fifo, qfq, rr, prio, fq_codel, fq_pie
        param_fq_codel_target (Union[Unset, str]): (for sched=fq_codel only) target delay in ms (set to "" to use
            default value)
        param_fq_codel_interval (Union[Unset, str]): (for sched=fq_codel only) interval in ms (set to "" to use default
            value)
        param_fq_codel_quantum (Union[Unset, str]): (for sched=fq_codel only) quantum (set to "" to use default value)
        param_fq_codel_limit (Union[Unset, str]): (for sched=fq_codel only) limit (set to "" to use default value)
        param_fq_codel_flows (Union[Unset, str]): (for sched=fq_codel only) flows (set to "" to use default value)
        param_fq_pie_target (Union[Unset, str]): (for sched=fq_pie only) target delay in ms (set to "" to use default
            value)
        param_fq_pie_tupdate (Union[Unset, str]): (for sched=fq_pie only) interval in ms (set to "" to use default
            value)
        param_fq_pie_alpha (Union[Unset, str]): (for sched=fq_pie only) alpha (set to "" to use default value)
        param_fq_pie_beta (Union[Unset, str]): (for sched=fq_pie only) beta (set to "" to use default value)
        param_fq_pie_max_burst (Union[Unset, str]): (for sched=fq_pie only) max burst (set to "" to use default value)
        param_fq_pie_max_ecnth (Union[Unset, str]): (for sched=fq_pie only) max ecnth (set to "" to use default value)
        param_fq_pie_quantum (Union[Unset, str]): (for sched=fq_pie only) quantum (set to "" to use default value)
        param_fq_pie_limit (Union[Unset, str]): (for sched=fq_pie only) limit (set to "" to use default value)
        param_fq_pie_flows (Union[Unset, str]): (for sched=fq_pie only) flows (set to "" to use default value)
        ecn (Union[Unset, bool]): (for sched=fq_codel or fq_pie only) explicit congestion notification
        pie_onoff (Union[Unset, bool]): (for sched=fq_pie only) turning pie on and off depending on queue load
        pie_capdrop (Union[Unset, bool]): (for sched=fq_pie only) cap drop adjustment
        pie_qdelay (Union[Unset, bool]): (for sched=fq_pie only) set queue delay type to timestamps (true) or departure
            rate estimation (false)
        pie_pderand (Union[Unset, bool]): (for sched=fq_pie only) drop probability de-randomisation
        qlimit (Union[Unset, int]): specifies the length of the limiter's queue, which the scheduler and AQM are
            responsible for
        delay (Union[Unset, int]): introduces an artificial delay (latency), specified in milliseconds
        plr (Union[Unset, float]): packet loss rate can be configured to drop a certain fraction of packets that enter
            the limiter
            valid value between 0 and 1
            a value of 0.001 means one packet in 1000 gets dropped
        buckets (Union[Unset, int]): bucket Size, specified in slots, sets the size of the hash table used for queue
            storage
        queue (Union[Unset, List['LimiterQueue']]):
    """

    name: str
    enabled: Union[Unset, bool] = UNSET
    number: Union[Unset, int] = UNSET
    bandwidth: Union[Unset, List["LimiterBandwidth"]] = UNSET
    mask: Union[Unset, LimiterMask] = UNSET
    maskbits: Union[Unset, int] = UNSET
    maskbitsv6: Union[Unset, int] = UNSET
    description: Union[Unset, str] = UNSET
    aqm: Union[Unset, LimiterAqm] = UNSET
    param_codel_target: Union[Unset, str] = UNSET
    param_codel_interval: Union[Unset, str] = UNSET
    param_pie_target: Union[Unset, str] = UNSET
    param_pie_tupdate: Union[Unset, str] = UNSET
    param_pie_alpha: Union[Unset, str] = UNSET
    param_pie_beta: Union[Unset, str] = UNSET
    param_pie_max_burst: Union[Unset, str] = UNSET
    param_pie_max_ecnth: Union[Unset, str] = UNSET
    param_red_w_q: Union[Unset, str] = UNSET
    param_red_min_th: Union[Unset, str] = UNSET
    param_red_max_th: Union[Unset, str] = UNSET
    param_red_max_p: Union[Unset, str] = UNSET
    param_gred_w_q: Union[Unset, str] = UNSET
    param_gred_min_th: Union[Unset, str] = UNSET
    param_gred_max_th: Union[Unset, str] = UNSET
    param_gred_max_p: Union[Unset, str] = UNSET
    sched: Union[Unset, LimiterSched] = UNSET
    param_fq_codel_target: Union[Unset, str] = UNSET
    param_fq_codel_interval: Union[Unset, str] = UNSET
    param_fq_codel_quantum: Union[Unset, str] = UNSET
    param_fq_codel_limit: Union[Unset, str] = UNSET
    param_fq_codel_flows: Union[Unset, str] = UNSET
    param_fq_pie_target: Union[Unset, str] = UNSET
    param_fq_pie_tupdate: Union[Unset, str] = UNSET
    param_fq_pie_alpha: Union[Unset, str] = UNSET
    param_fq_pie_beta: Union[Unset, str] = UNSET
    param_fq_pie_max_burst: Union[Unset, str] = UNSET
    param_fq_pie_max_ecnth: Union[Unset, str] = UNSET
    param_fq_pie_quantum: Union[Unset, str] = UNSET
    param_fq_pie_limit: Union[Unset, str] = UNSET
    param_fq_pie_flows: Union[Unset, str] = UNSET
    ecn: Union[Unset, bool] = UNSET
    pie_onoff: Union[Unset, bool] = UNSET
    pie_capdrop: Union[Unset, bool] = UNSET
    pie_qdelay: Union[Unset, bool] = UNSET
    pie_pderand: Union[Unset, bool] = UNSET
    qlimit: Union[Unset, int] = UNSET
    delay: Union[Unset, int] = UNSET
    plr: Union[Unset, float] = UNSET
    buckets: Union[Unset, int] = UNSET
    queue: Union[Unset, List["LimiterQueue"]] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        name = self.name

        enabled = self.enabled

        number = self.number

        bandwidth: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.bandwidth, Unset):
            bandwidth = []
            for bandwidth_item_data in self.bandwidth:
                bandwidth_item = bandwidth_item_data.to_dict()
                bandwidth.append(bandwidth_item)

        mask: Union[Unset, str] = UNSET
        if not isinstance(self.mask, Unset):
            mask = self.mask.value

        maskbits = self.maskbits

        maskbitsv6 = self.maskbitsv6

        description = self.description

        aqm: Union[Unset, str] = UNSET
        if not isinstance(self.aqm, Unset):
            aqm = self.aqm.value

        param_codel_target = self.param_codel_target

        param_codel_interval = self.param_codel_interval

        param_pie_target = self.param_pie_target

        param_pie_tupdate = self.param_pie_tupdate

        param_pie_alpha = self.param_pie_alpha

        param_pie_beta = self.param_pie_beta

        param_pie_max_burst = self.param_pie_max_burst

        param_pie_max_ecnth = self.param_pie_max_ecnth

        param_red_w_q = self.param_red_w_q

        param_red_min_th = self.param_red_min_th

        param_red_max_th = self.param_red_max_th

        param_red_max_p = self.param_red_max_p

        param_gred_w_q = self.param_gred_w_q

        param_gred_min_th = self.param_gred_min_th

        param_gred_max_th = self.param_gred_max_th

        param_gred_max_p = self.param_gred_max_p

        sched: Union[Unset, str] = UNSET
        if not isinstance(self.sched, Unset):
            sched = self.sched.value

        param_fq_codel_target = self.param_fq_codel_target

        param_fq_codel_interval = self.param_fq_codel_interval

        param_fq_codel_quantum = self.param_fq_codel_quantum

        param_fq_codel_limit = self.param_fq_codel_limit

        param_fq_codel_flows = self.param_fq_codel_flows

        param_fq_pie_target = self.param_fq_pie_target

        param_fq_pie_tupdate = self.param_fq_pie_tupdate

        param_fq_pie_alpha = self.param_fq_pie_alpha

        param_fq_pie_beta = self.param_fq_pie_beta

        param_fq_pie_max_burst = self.param_fq_pie_max_burst

        param_fq_pie_max_ecnth = self.param_fq_pie_max_ecnth

        param_fq_pie_quantum = self.param_fq_pie_quantum

        param_fq_pie_limit = self.param_fq_pie_limit

        param_fq_pie_flows = self.param_fq_pie_flows

        ecn = self.ecn

        pie_onoff = self.pie_onoff

        pie_capdrop = self.pie_capdrop

        pie_qdelay = self.pie_qdelay

        pie_pderand = self.pie_pderand

        qlimit = self.qlimit

        delay = self.delay

        plr = self.plr

        buckets = self.buckets

        queue: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.queue, Unset):
            queue = []
            for queue_item_data in self.queue:
                queue_item = queue_item_data.to_dict()
                queue.append(queue_item)

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "name": name,
            }
        )
        if enabled is not UNSET:
            field_dict["enabled"] = enabled
        if number is not UNSET:
            field_dict["number"] = number
        if bandwidth is not UNSET:
            field_dict["bandwidth"] = bandwidth
        if mask is not UNSET:
            field_dict["mask"] = mask
        if maskbits is not UNSET:
            field_dict["maskbits"] = maskbits
        if maskbitsv6 is not UNSET:
            field_dict["maskbitsv6"] = maskbitsv6
        if description is not UNSET:
            field_dict["description"] = description
        if aqm is not UNSET:
            field_dict["aqm"] = aqm
        if param_codel_target is not UNSET:
            field_dict["param_codel_target"] = param_codel_target
        if param_codel_interval is not UNSET:
            field_dict["param_codel_interval"] = param_codel_interval
        if param_pie_target is not UNSET:
            field_dict["param_pie_target"] = param_pie_target
        if param_pie_tupdate is not UNSET:
            field_dict["param_pie_tupdate"] = param_pie_tupdate
        if param_pie_alpha is not UNSET:
            field_dict["param_pie_alpha"] = param_pie_alpha
        if param_pie_beta is not UNSET:
            field_dict["param_pie_beta"] = param_pie_beta
        if param_pie_max_burst is not UNSET:
            field_dict["param_pie_max_burst"] = param_pie_max_burst
        if param_pie_max_ecnth is not UNSET:
            field_dict["param_pie_max_ecnth"] = param_pie_max_ecnth
        if param_red_w_q is not UNSET:
            field_dict["param_red_w_q"] = param_red_w_q
        if param_red_min_th is not UNSET:
            field_dict["param_red_min_th"] = param_red_min_th
        if param_red_max_th is not UNSET:
            field_dict["param_red_max_th"] = param_red_max_th
        if param_red_max_p is not UNSET:
            field_dict["param_red_max_p"] = param_red_max_p
        if param_gred_w_q is not UNSET:
            field_dict["param_gred_w_q"] = param_gred_w_q
        if param_gred_min_th is not UNSET:
            field_dict["param_gred_min_th"] = param_gred_min_th
        if param_gred_max_th is not UNSET:
            field_dict["param_gred_max_th"] = param_gred_max_th
        if param_gred_max_p is not UNSET:
            field_dict["param_gred_max_p"] = param_gred_max_p
        if sched is not UNSET:
            field_dict["sched"] = sched
        if param_fq_codel_target is not UNSET:
            field_dict["param_fq_codel_target"] = param_fq_codel_target
        if param_fq_codel_interval is not UNSET:
            field_dict["param_fq_codel_interval"] = param_fq_codel_interval
        if param_fq_codel_quantum is not UNSET:
            field_dict["param_fq_codel_quantum"] = param_fq_codel_quantum
        if param_fq_codel_limit is not UNSET:
            field_dict["param_fq_codel_limit"] = param_fq_codel_limit
        if param_fq_codel_flows is not UNSET:
            field_dict["param_fq_codel_flows"] = param_fq_codel_flows
        if param_fq_pie_target is not UNSET:
            field_dict["param_fq_pie_target"] = param_fq_pie_target
        if param_fq_pie_tupdate is not UNSET:
            field_dict["param_fq_pie_tupdate"] = param_fq_pie_tupdate
        if param_fq_pie_alpha is not UNSET:
            field_dict["param_fq_pie_alpha"] = param_fq_pie_alpha
        if param_fq_pie_beta is not UNSET:
            field_dict["param_fq_pie_beta"] = param_fq_pie_beta
        if param_fq_pie_max_burst is not UNSET:
            field_dict["param_fq_pie_max_burst"] = param_fq_pie_max_burst
        if param_fq_pie_max_ecnth is not UNSET:
            field_dict["param_fq_pie_max_ecnth"] = param_fq_pie_max_ecnth
        if param_fq_pie_quantum is not UNSET:
            field_dict["param_fq_pie_quantum"] = param_fq_pie_quantum
        if param_fq_pie_limit is not UNSET:
            field_dict["param_fq_pie_limit"] = param_fq_pie_limit
        if param_fq_pie_flows is not UNSET:
            field_dict["param_fq_pie_flows"] = param_fq_pie_flows
        if ecn is not UNSET:
            field_dict["ecn"] = ecn
        if pie_onoff is not UNSET:
            field_dict["pie_onoff"] = pie_onoff
        if pie_capdrop is not UNSET:
            field_dict["pie_capdrop"] = pie_capdrop
        if pie_qdelay is not UNSET:
            field_dict["pie_qdelay"] = pie_qdelay
        if pie_pderand is not UNSET:
            field_dict["pie_pderand"] = pie_pderand
        if qlimit is not UNSET:
            field_dict["qlimit"] = qlimit
        if delay is not UNSET:
            field_dict["delay"] = delay
        if plr is not UNSET:
            field_dict["plr"] = plr
        if buckets is not UNSET:
            field_dict["buckets"] = buckets
        if queue is not UNSET:
            field_dict["queue"] = queue

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.limiter_bandwidth import LimiterBandwidth
        from ..models.limiter_queue import LimiterQueue

        d = src_dict.copy()
        name = d.pop("name")

        enabled = d.pop("enabled", UNSET)

        number = d.pop("number", UNSET)

        bandwidth = []
        _bandwidth = d.pop("bandwidth", UNSET)
        for bandwidth_item_data in _bandwidth or []:
            bandwidth_item = LimiterBandwidth.from_dict(bandwidth_item_data)

            bandwidth.append(bandwidth_item)

        _mask = d.pop("mask", UNSET)
        mask: Union[Unset, LimiterMask]
        if isinstance(_mask, Unset):
            mask = UNSET
        else:
            mask = LimiterMask(_mask)

        maskbits = d.pop("maskbits", UNSET)

        maskbitsv6 = d.pop("maskbitsv6", UNSET)

        description = d.pop("description", UNSET)

        _aqm = d.pop("aqm", UNSET)
        aqm: Union[Unset, LimiterAqm]
        if isinstance(_aqm, Unset):
            aqm = UNSET
        else:
            aqm = LimiterAqm(_aqm)

        param_codel_target = d.pop("param_codel_target", UNSET)

        param_codel_interval = d.pop("param_codel_interval", UNSET)

        param_pie_target = d.pop("param_pie_target", UNSET)

        param_pie_tupdate = d.pop("param_pie_tupdate", UNSET)

        param_pie_alpha = d.pop("param_pie_alpha", UNSET)

        param_pie_beta = d.pop("param_pie_beta", UNSET)

        param_pie_max_burst = d.pop("param_pie_max_burst", UNSET)

        param_pie_max_ecnth = d.pop("param_pie_max_ecnth", UNSET)

        param_red_w_q = d.pop("param_red_w_q", UNSET)

        param_red_min_th = d.pop("param_red_min_th", UNSET)

        param_red_max_th = d.pop("param_red_max_th", UNSET)

        param_red_max_p = d.pop("param_red_max_p", UNSET)

        param_gred_w_q = d.pop("param_gred_w_q", UNSET)

        param_gred_min_th = d.pop("param_gred_min_th", UNSET)

        param_gred_max_th = d.pop("param_gred_max_th", UNSET)

        param_gred_max_p = d.pop("param_gred_max_p", UNSET)

        _sched = d.pop("sched", UNSET)
        sched: Union[Unset, LimiterSched]
        if isinstance(_sched, Unset):
            sched = UNSET
        else:
            sched = LimiterSched(_sched)

        param_fq_codel_target = d.pop("param_fq_codel_target", UNSET)

        param_fq_codel_interval = d.pop("param_fq_codel_interval", UNSET)

        param_fq_codel_quantum = d.pop("param_fq_codel_quantum", UNSET)

        param_fq_codel_limit = d.pop("param_fq_codel_limit", UNSET)

        param_fq_codel_flows = d.pop("param_fq_codel_flows", UNSET)

        param_fq_pie_target = d.pop("param_fq_pie_target", UNSET)

        param_fq_pie_tupdate = d.pop("param_fq_pie_tupdate", UNSET)

        param_fq_pie_alpha = d.pop("param_fq_pie_alpha", UNSET)

        param_fq_pie_beta = d.pop("param_fq_pie_beta", UNSET)

        param_fq_pie_max_burst = d.pop("param_fq_pie_max_burst", UNSET)

        param_fq_pie_max_ecnth = d.pop("param_fq_pie_max_ecnth", UNSET)

        param_fq_pie_quantum = d.pop("param_fq_pie_quantum", UNSET)

        param_fq_pie_limit = d.pop("param_fq_pie_limit", UNSET)

        param_fq_pie_flows = d.pop("param_fq_pie_flows", UNSET)

        ecn = d.pop("ecn", UNSET)

        pie_onoff = d.pop("pie_onoff", UNSET)

        pie_capdrop = d.pop("pie_capdrop", UNSET)

        pie_qdelay = d.pop("pie_qdelay", UNSET)

        pie_pderand = d.pop("pie_pderand", UNSET)

        qlimit = d.pop("qlimit", UNSET)

        delay = d.pop("delay", UNSET)

        plr = d.pop("plr", UNSET)

        buckets = d.pop("buckets", UNSET)

        queue = []
        _queue = d.pop("queue", UNSET)
        for queue_item_data in _queue or []:
            queue_item = LimiterQueue.from_dict(queue_item_data)

            queue.append(queue_item)

        limiter = cls(
            name=name,
            enabled=enabled,
            number=number,
            bandwidth=bandwidth,
            mask=mask,
            maskbits=maskbits,
            maskbitsv6=maskbitsv6,
            description=description,
            aqm=aqm,
            param_codel_target=param_codel_target,
            param_codel_interval=param_codel_interval,
            param_pie_target=param_pie_target,
            param_pie_tupdate=param_pie_tupdate,
            param_pie_alpha=param_pie_alpha,
            param_pie_beta=param_pie_beta,
            param_pie_max_burst=param_pie_max_burst,
            param_pie_max_ecnth=param_pie_max_ecnth,
            param_red_w_q=param_red_w_q,
            param_red_min_th=param_red_min_th,
            param_red_max_th=param_red_max_th,
            param_red_max_p=param_red_max_p,
            param_gred_w_q=param_gred_w_q,
            param_gred_min_th=param_gred_min_th,
            param_gred_max_th=param_gred_max_th,
            param_gred_max_p=param_gred_max_p,
            sched=sched,
            param_fq_codel_target=param_fq_codel_target,
            param_fq_codel_interval=param_fq_codel_interval,
            param_fq_codel_quantum=param_fq_codel_quantum,
            param_fq_codel_limit=param_fq_codel_limit,
            param_fq_codel_flows=param_fq_codel_flows,
            param_fq_pie_target=param_fq_pie_target,
            param_fq_pie_tupdate=param_fq_pie_tupdate,
            param_fq_pie_alpha=param_fq_pie_alpha,
            param_fq_pie_beta=param_fq_pie_beta,
            param_fq_pie_max_burst=param_fq_pie_max_burst,
            param_fq_pie_max_ecnth=param_fq_pie_max_ecnth,
            param_fq_pie_quantum=param_fq_pie_quantum,
            param_fq_pie_limit=param_fq_pie_limit,
            param_fq_pie_flows=param_fq_pie_flows,
            ecn=ecn,
            pie_onoff=pie_onoff,
            pie_capdrop=pie_capdrop,
            pie_qdelay=pie_qdelay,
            pie_pderand=pie_pderand,
            qlimit=qlimit,
            delay=delay,
            plr=plr,
            buckets=buckets,
            queue=queue,
        )

        limiter.additional_properties = d
        return limiter

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
