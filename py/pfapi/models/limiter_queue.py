from typing import Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.limiter_queue_aqm import LimiterQueueAqm
from ..models.limiter_queue_mask import LimiterQueueMask
from ..types import UNSET, Unset

T = TypeVar("T", bound="LimiterQueue")


@_attrs_define
class LimiterQueue:
    """
    Attributes:
        name (str): name of the limiter, it will appear for selection on firewall rules
        enabled (Union[Unset, bool]):
        number (Union[Unset, int]): generated by system when create limiter queue
        mask (Union[Unset, LimiterQueueMask]): controls how the limiter will mask addresses in the queue
            valid values = none, srcaddress, dstaddress
        maskbits (Union[Unset, int]): address masking for ipv4
        maskbitsv6 (Union[Unset, int]): address masking for ipv6
        description (Union[Unset, str]):
        aqm (Union[Unset, LimiterQueueAqm]): active queue management (AQM) algorithm
            valid values = droptail, codel, pie, red, gred
        qlimit (Union[Unset, int]): specifies the length of this queue, which the AQM is responsible for
        ecn (Union[Unset, bool]): explicit congestion Notification (ECN) sets a reserved TCP flag when the queue is
            nearing or exceeding capacity
        weight (Union[Unset, int]): this value can range from 1 to 100, higher values give more precedence to packets in
            a given queue
        plr (Union[Unset, float]): packet loss rate can be configured to drop a certain fraction of packets that enter
            the limiter
            valid value between 0 and 1
            a value of 0.001 means one packet in 1000 gets dropped
        buckets (Union[Unset, int]): bucket Size, specified in slots, sets the size of the hash table used for queue
            storage
    """

    name: str
    enabled: Union[Unset, bool] = UNSET
    number: Union[Unset, int] = UNSET
    mask: Union[Unset, LimiterQueueMask] = UNSET
    maskbits: Union[Unset, int] = UNSET
    maskbitsv6: Union[Unset, int] = UNSET
    description: Union[Unset, str] = UNSET
    aqm: Union[Unset, LimiterQueueAqm] = UNSET
    qlimit: Union[Unset, int] = UNSET
    ecn: Union[Unset, bool] = UNSET
    weight: Union[Unset, int] = UNSET
    plr: Union[Unset, float] = UNSET
    buckets: Union[Unset, int] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        name = self.name

        enabled = self.enabled

        number = self.number

        mask: Union[Unset, str] = UNSET
        if not isinstance(self.mask, Unset):
            mask = self.mask.value

        maskbits = self.maskbits

        maskbitsv6 = self.maskbitsv6

        description = self.description

        aqm: Union[Unset, str] = UNSET
        if not isinstance(self.aqm, Unset):
            aqm = self.aqm.value

        qlimit = self.qlimit

        ecn = self.ecn

        weight = self.weight

        plr = self.plr

        buckets = self.buckets

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "name": name,
            }
        )
        if enabled is not UNSET:
            field_dict["enabled"] = enabled
        if number is not UNSET:
            field_dict["number"] = number
        if mask is not UNSET:
            field_dict["mask"] = mask
        if maskbits is not UNSET:
            field_dict["maskbits"] = maskbits
        if maskbitsv6 is not UNSET:
            field_dict["maskbitsv6"] = maskbitsv6
        if description is not UNSET:
            field_dict["description"] = description
        if aqm is not UNSET:
            field_dict["aqm"] = aqm
        if qlimit is not UNSET:
            field_dict["qlimit"] = qlimit
        if ecn is not UNSET:
            field_dict["ecn"] = ecn
        if weight is not UNSET:
            field_dict["weight"] = weight
        if plr is not UNSET:
            field_dict["plr"] = plr
        if buckets is not UNSET:
            field_dict["buckets"] = buckets

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        name = d.pop("name")

        enabled = d.pop("enabled", UNSET)

        number = d.pop("number", UNSET)

        _mask = d.pop("mask", UNSET)
        mask: Union[Unset, LimiterQueueMask]
        if isinstance(_mask, Unset):
            mask = UNSET
        else:
            mask = LimiterQueueMask(_mask)

        maskbits = d.pop("maskbits", UNSET)

        maskbitsv6 = d.pop("maskbitsv6", UNSET)

        description = d.pop("description", UNSET)

        _aqm = d.pop("aqm", UNSET)
        aqm: Union[Unset, LimiterQueueAqm]
        if isinstance(_aqm, Unset):
            aqm = UNSET
        else:
            aqm = LimiterQueueAqm(_aqm)

        qlimit = d.pop("qlimit", UNSET)

        ecn = d.pop("ecn", UNSET)

        weight = d.pop("weight", UNSET)

        plr = d.pop("plr", UNSET)

        buckets = d.pop("buckets", UNSET)

        limiter_queue = cls(
            name=name,
            enabled=enabled,
            number=number,
            mask=mask,
            maskbits=maskbits,
            maskbitsv6=maskbitsv6,
            description=description,
            aqm=aqm,
            qlimit=qlimit,
            ecn=ecn,
            weight=weight,
            plr=plr,
            buckets=buckets,
        )

        limiter_queue.additional_properties = d
        return limiter_queue

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
