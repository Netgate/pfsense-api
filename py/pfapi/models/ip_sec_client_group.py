from typing import Any, Dict, List, Type, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="IPSecClientGroup")


@_attrs_define
class IPSecClientGroup:
    """
    Attributes:
        ident (List[str]):
        pool_address (str): must be ipv4 address
        pool_netbits (int): subnet for the pool address
        id (Union[Unset, str]): generated by system when create group pool
        dns_address (Union[Unset, str]): optional, if used, must be ipv4 address
    """

    ident: List[str]
    pool_address: str
    pool_netbits: int
    id: Union[Unset, str] = UNSET
    dns_address: Union[Unset, str] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        ident = self.ident

        pool_address = self.pool_address

        pool_netbits = self.pool_netbits

        id = self.id

        dns_address = self.dns_address

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "ident": ident,
                "pool_address": pool_address,
                "pool_netbits": pool_netbits,
            }
        )
        if id is not UNSET:
            field_dict["id"] = id
        if dns_address is not UNSET:
            field_dict["dns_address"] = dns_address

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        ident = cast(List[str], d.pop("ident"))

        pool_address = d.pop("pool_address")

        pool_netbits = d.pop("pool_netbits")

        id = d.pop("id", UNSET)

        dns_address = d.pop("dns_address", UNSET)

        ip_sec_client_group = cls(
            ident=ident,
            pool_address=pool_address,
            pool_netbits=pool_netbits,
            id=id,
            dns_address=dns_address,
        )

        ip_sec_client_group.additional_properties = d
        return ip_sec_client_group

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
