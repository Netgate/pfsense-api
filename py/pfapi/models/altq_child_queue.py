from typing import Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="ALTQChildQueue")


@_attrs_define
class ALTQChildQueue:
    """
    Attributes:
        name (str): name of the queue, do not use spaces and limit the size to 15 characters
        enabled (Union[Unset, bool]):
        if_ident (Union[Unset, str]): generated by system when create altq child queue
        priority (Union[Unset, int]): cbq and fairq 0-7 (default is 1), priq 0-15, queues with a higher priority are
            preferred in the case of overload
        qlimit (Union[Unset, int]): queue limit in packets
        description (Union[Unset, str]):
        default (Union[Unset, bool]): set this queue as the default
        red (Union[Unset, bool]): random early detection, a method to avoid congestion on a link
        rio (Union[Unset, bool]): random early detection in and out, enables red with in/out
        ecn (Union[Unset, bool]): explicit congestion notification, it allows sending of control messages that will
            throttle connections if both ends support ecn
        codel (Union[Unset, bool]): a flag to mark this queue as being the active queue for the codel shaper discipline
        queue (Union[Unset, List['ALTQChildQueue']]):
    """

    name: str
    enabled: Union[Unset, bool] = UNSET
    if_ident: Union[Unset, str] = UNSET
    priority: Union[Unset, int] = UNSET
    qlimit: Union[Unset, int] = UNSET
    description: Union[Unset, str] = UNSET
    default: Union[Unset, bool] = UNSET
    red: Union[Unset, bool] = UNSET
    rio: Union[Unset, bool] = UNSET
    ecn: Union[Unset, bool] = UNSET
    codel: Union[Unset, bool] = UNSET
    queue: Union[Unset, List["ALTQChildQueue"]] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        name = self.name

        enabled = self.enabled

        if_ident = self.if_ident

        priority = self.priority

        qlimit = self.qlimit

        description = self.description

        default = self.default

        red = self.red

        rio = self.rio

        ecn = self.ecn

        codel = self.codel

        queue: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.queue, Unset):
            queue = []
            for queue_item_data in self.queue:
                queue_item = queue_item_data.to_dict()
                queue.append(queue_item)

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "name": name,
            }
        )
        if enabled is not UNSET:
            field_dict["enabled"] = enabled
        if if_ident is not UNSET:
            field_dict["if_ident"] = if_ident
        if priority is not UNSET:
            field_dict["priority"] = priority
        if qlimit is not UNSET:
            field_dict["qlimit"] = qlimit
        if description is not UNSET:
            field_dict["description"] = description
        if default is not UNSET:
            field_dict["default"] = default
        if red is not UNSET:
            field_dict["red"] = red
        if rio is not UNSET:
            field_dict["rio"] = rio
        if ecn is not UNSET:
            field_dict["ecn"] = ecn
        if codel is not UNSET:
            field_dict["codel"] = codel
        if queue is not UNSET:
            field_dict["queue"] = queue

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        name = d.pop("name")

        enabled = d.pop("enabled", UNSET)

        if_ident = d.pop("if_ident", UNSET)

        priority = d.pop("priority", UNSET)

        qlimit = d.pop("qlimit", UNSET)

        description = d.pop("description", UNSET)

        default = d.pop("default", UNSET)

        red = d.pop("red", UNSET)

        rio = d.pop("rio", UNSET)

        ecn = d.pop("ecn", UNSET)

        codel = d.pop("codel", UNSET)

        queue = []
        _queue = d.pop("queue", UNSET)
        for queue_item_data in _queue or []:
            queue_item = ALTQChildQueue.from_dict(queue_item_data)

            queue.append(queue_item)

        altq_child_queue = cls(
            name=name,
            enabled=enabled,
            if_ident=if_ident,
            priority=priority,
            qlimit=qlimit,
            description=description,
            default=default,
            red=red,
            rio=rio,
            ecn=ecn,
            codel=codel,
            queue=queue,
        )

        altq_child_queue.additional_properties = d
        return altq_child_queue

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
