from typing import Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.altq_child_queue_bandwidthtype import ALTQChildQueueBandwidthtype
from ..types import UNSET, Unset

T = TypeVar("T", bound="ALTQChildQueue")


@_attrs_define
class ALTQChildQueue:
    """scheduler type CODELQ do NOT have a ALTQChildQueue

    Attributes:
        name (str): name of the queue, do not use spaces and limit the size to 15 characters
        enabled (Union[Unset, bool]):
        if_ident (Union[Unset, str]): generated by system when create altq child queue
        priority (Union[Unset, int]): (for CBQ, FAIRQ, and PRIQ scheduler only) CBQ and FAIRQ 0-7 (default is 1), PRIQ
            0-15
            queues with a higher priority are preferred in the case of overload
        qlimit (Union[Unset, int]): queue limit in packets
        description (Union[Unset, str]):
        default (Union[Unset, bool]): set this queue as the default
        red (Union[Unset, bool]): random early detection, a method to avoid congestion on a link
        rio (Union[Unset, bool]): random early detection in and out, enables red with in/out
        ecn (Union[Unset, bool]): explicit congestion notification, it allows sending of control messages that will
            throttle connections if both ends support ecn
        codel (Union[Unset, bool]): a flag to mark this queue as being the active queue for the codel shaper discipline
        bandwidth (Union[Unset, str]): (for HFSC, CBQ, and FAIRQ scheduler only) the amount of bandwidth for this queue
        bandwidthtype (Union[Unset, ALTQChildQueueBandwidthtype]): (for HFSC, CBQ, and FAIRQ scheduler only) units for
            the bandwidth
            valid value = Kb, Mb, Gb, b, %
        upperlimit (Union[Unset, bool]): (for HFSC scheduler only) max bandwidth for queue
        upperlimit_m1 (Union[Unset, str]): (for HFSC scheduler only) burstable bandwidth limit
        upperlimit_d (Union[Unset, str]): (for HFSC scheduler only) time limit for bandwidth burst, in milliseconds
        upperlimit_m2 (Union[Unset, str]): (for HFSC scheduler only) normal bandwidth limit
        realtime (Union[Unset, bool]): (for HFSC scheduler only) min bandwidth for queue
        realtime_m1 (Union[Unset, str]): (for HFSC scheduler only) burstable bandwidth limit
        realtime_d (Union[Unset, str]): (for HFSC scheduler only) time limit for bandwidth burst, in milliseconds
        realtime_m2 (Union[Unset, str]): (for HFSC scheduler only) normal bandwidth limit
        linkshare (Union[Unset, bool]): (for HFSC scheduler only) bandwidth share of a backlogged queue
        linkshare_m1 (Union[Unset, str]): (for HFSC scheduler only) burstable bandwidth limit
        linkshare_d (Union[Unset, str]): (for HFSC scheduler only) time limit for bandwidth burst, in milliseconds
        linkshare_m2 (Union[Unset, str]): (for HFSC scheduler only) normal bandwidth limit
        borrow (Union[Unset, bool]): (for CBQ scheduler CBQ only) borrow from other queues when available
        buckets (Union[Unset, int]): (for FAIRQ scheduler only) number of buckets available
        hogs (Union[Unset, str]): (for FAIRQ scheduler only) bandwidth limit for hosts to not saturate link
        queue (Union[Unset, List['ALTQChildQueue']]):
    """

    name: str
    enabled: Union[Unset, bool] = UNSET
    if_ident: Union[Unset, str] = UNSET
    priority: Union[Unset, int] = UNSET
    qlimit: Union[Unset, int] = UNSET
    description: Union[Unset, str] = UNSET
    default: Union[Unset, bool] = UNSET
    red: Union[Unset, bool] = UNSET
    rio: Union[Unset, bool] = UNSET
    ecn: Union[Unset, bool] = UNSET
    codel: Union[Unset, bool] = UNSET
    bandwidth: Union[Unset, str] = UNSET
    bandwidthtype: Union[Unset, ALTQChildQueueBandwidthtype] = UNSET
    upperlimit: Union[Unset, bool] = UNSET
    upperlimit_m1: Union[Unset, str] = UNSET
    upperlimit_d: Union[Unset, str] = UNSET
    upperlimit_m2: Union[Unset, str] = UNSET
    realtime: Union[Unset, bool] = UNSET
    realtime_m1: Union[Unset, str] = UNSET
    realtime_d: Union[Unset, str] = UNSET
    realtime_m2: Union[Unset, str] = UNSET
    linkshare: Union[Unset, bool] = UNSET
    linkshare_m1: Union[Unset, str] = UNSET
    linkshare_d: Union[Unset, str] = UNSET
    linkshare_m2: Union[Unset, str] = UNSET
    borrow: Union[Unset, bool] = UNSET
    buckets: Union[Unset, int] = UNSET
    hogs: Union[Unset, str] = UNSET
    queue: Union[Unset, List["ALTQChildQueue"]] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        name = self.name

        enabled = self.enabled

        if_ident = self.if_ident

        priority = self.priority

        qlimit = self.qlimit

        description = self.description

        default = self.default

        red = self.red

        rio = self.rio

        ecn = self.ecn

        codel = self.codel

        bandwidth = self.bandwidth

        bandwidthtype: Union[Unset, str] = UNSET
        if not isinstance(self.bandwidthtype, Unset):
            bandwidthtype = self.bandwidthtype.value

        upperlimit = self.upperlimit

        upperlimit_m1 = self.upperlimit_m1

        upperlimit_d = self.upperlimit_d

        upperlimit_m2 = self.upperlimit_m2

        realtime = self.realtime

        realtime_m1 = self.realtime_m1

        realtime_d = self.realtime_d

        realtime_m2 = self.realtime_m2

        linkshare = self.linkshare

        linkshare_m1 = self.linkshare_m1

        linkshare_d = self.linkshare_d

        linkshare_m2 = self.linkshare_m2

        borrow = self.borrow

        buckets = self.buckets

        hogs = self.hogs

        queue: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.queue, Unset):
            queue = []
            for queue_item_data in self.queue:
                queue_item = queue_item_data.to_dict()
                queue.append(queue_item)

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "name": name,
            }
        )
        if enabled is not UNSET:
            field_dict["enabled"] = enabled
        if if_ident is not UNSET:
            field_dict["if_ident"] = if_ident
        if priority is not UNSET:
            field_dict["priority"] = priority
        if qlimit is not UNSET:
            field_dict["qlimit"] = qlimit
        if description is not UNSET:
            field_dict["description"] = description
        if default is not UNSET:
            field_dict["default"] = default
        if red is not UNSET:
            field_dict["red"] = red
        if rio is not UNSET:
            field_dict["rio"] = rio
        if ecn is not UNSET:
            field_dict["ecn"] = ecn
        if codel is not UNSET:
            field_dict["codel"] = codel
        if bandwidth is not UNSET:
            field_dict["bandwidth"] = bandwidth
        if bandwidthtype is not UNSET:
            field_dict["bandwidthtype"] = bandwidthtype
        if upperlimit is not UNSET:
            field_dict["upperlimit"] = upperlimit
        if upperlimit_m1 is not UNSET:
            field_dict["upperlimit_m1"] = upperlimit_m1
        if upperlimit_d is not UNSET:
            field_dict["upperlimit_d"] = upperlimit_d
        if upperlimit_m2 is not UNSET:
            field_dict["upperlimit_m2"] = upperlimit_m2
        if realtime is not UNSET:
            field_dict["realtime"] = realtime
        if realtime_m1 is not UNSET:
            field_dict["realtime_m1"] = realtime_m1
        if realtime_d is not UNSET:
            field_dict["realtime_d"] = realtime_d
        if realtime_m2 is not UNSET:
            field_dict["realtime_m2"] = realtime_m2
        if linkshare is not UNSET:
            field_dict["linkshare"] = linkshare
        if linkshare_m1 is not UNSET:
            field_dict["linkshare_m1"] = linkshare_m1
        if linkshare_d is not UNSET:
            field_dict["linkshare_d"] = linkshare_d
        if linkshare_m2 is not UNSET:
            field_dict["linkshare_m2"] = linkshare_m2
        if borrow is not UNSET:
            field_dict["borrow"] = borrow
        if buckets is not UNSET:
            field_dict["buckets"] = buckets
        if hogs is not UNSET:
            field_dict["hogs"] = hogs
        if queue is not UNSET:
            field_dict["queue"] = queue

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        name = d.pop("name")

        enabled = d.pop("enabled", UNSET)

        if_ident = d.pop("if_ident", UNSET)

        priority = d.pop("priority", UNSET)

        qlimit = d.pop("qlimit", UNSET)

        description = d.pop("description", UNSET)

        default = d.pop("default", UNSET)

        red = d.pop("red", UNSET)

        rio = d.pop("rio", UNSET)

        ecn = d.pop("ecn", UNSET)

        codel = d.pop("codel", UNSET)

        bandwidth = d.pop("bandwidth", UNSET)

        _bandwidthtype = d.pop("bandwidthtype", UNSET)
        bandwidthtype: Union[Unset, ALTQChildQueueBandwidthtype]
        if isinstance(_bandwidthtype, Unset):
            bandwidthtype = UNSET
        else:
            bandwidthtype = ALTQChildQueueBandwidthtype(_bandwidthtype)

        upperlimit = d.pop("upperlimit", UNSET)

        upperlimit_m1 = d.pop("upperlimit_m1", UNSET)

        upperlimit_d = d.pop("upperlimit_d", UNSET)

        upperlimit_m2 = d.pop("upperlimit_m2", UNSET)

        realtime = d.pop("realtime", UNSET)

        realtime_m1 = d.pop("realtime_m1", UNSET)

        realtime_d = d.pop("realtime_d", UNSET)

        realtime_m2 = d.pop("realtime_m2", UNSET)

        linkshare = d.pop("linkshare", UNSET)

        linkshare_m1 = d.pop("linkshare_m1", UNSET)

        linkshare_d = d.pop("linkshare_d", UNSET)

        linkshare_m2 = d.pop("linkshare_m2", UNSET)

        borrow = d.pop("borrow", UNSET)

        buckets = d.pop("buckets", UNSET)

        hogs = d.pop("hogs", UNSET)

        queue = []
        _queue = d.pop("queue", UNSET)
        for queue_item_data in _queue or []:
            queue_item = ALTQChildQueue.from_dict(queue_item_data)

            queue.append(queue_item)

        altq_child_queue = cls(
            name=name,
            enabled=enabled,
            if_ident=if_ident,
            priority=priority,
            qlimit=qlimit,
            description=description,
            default=default,
            red=red,
            rio=rio,
            ecn=ecn,
            codel=codel,
            bandwidth=bandwidth,
            bandwidthtype=bandwidthtype,
            upperlimit=upperlimit,
            upperlimit_m1=upperlimit_m1,
            upperlimit_d=upperlimit_d,
            upperlimit_m2=upperlimit_m2,
            realtime=realtime,
            realtime_m1=realtime_m1,
            realtime_d=realtime_d,
            realtime_m2=realtime_m2,
            linkshare=linkshare,
            linkshare_m1=linkshare_m1,
            linkshare_d=linkshare_d,
            linkshare_m2=linkshare_m2,
            borrow=borrow,
            buckets=buckets,
            hogs=hogs,
            queue=queue,
        )

        altq_child_queue.additional_properties = d
        return altq_child_queue

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
