from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.bridge_interface_ifpathcost import BridgeInterfaceIfpathcost
    from ..models.bridge_interface_ifpriority import BridgeInterfaceIfpriority


T = TypeVar("T", bound="BridgeInterface")


@_attrs_define
class BridgeInterface:
    """
    Attributes:
        members (List[str]):
        enablestp (bool): enable RSTP/STP
        descr (str): description
        proto (str): protocol used for spanning tree
            valid value = "rstp" or "stp"
        ip6linklocal (bool): enable IPv6 auto linklocal
        ifpriority (BridgeInterfaceIfpriority):
        ifpathcost (BridgeInterfaceIfpathcost):
        static (List[str]):
        private (List[str]):
        stp (List[str]):
        span (List[str]):
        edge (List[str]):
        autoedge (List[str]):
        ptp (List[str]):
        autoptp (List[str]):
        bridgeif_device (str): generated by system when a Bridge is created
        maxaddr (Union[Unset, int]): cache size of the bridge address, default is 2000 entries
        timeout (Union[Unset, int]): cache expire time, default is 1200 seconds
        maxage (Union[Unset, int]): the time that a Spanning Tree Protocol configuration is valid
            default is 20 seconds, minimum is 6 seconds and maximum is 40 seconds
        fwdelay (Union[Unset, int]): the time that must pass before an interface begins forwarding packets when spanning
            tree is enabled
            default is 15 seconds, minimum is 4 seconds and maximum is 30 seconds
        hellotime (Union[Unset, int]): the time in seconds between broadcasting of STP configuration messages
            default is 2 seconds, minimum is 1 second and maximum is 2 seconds
        priority (Union[Unset, int]): the bridge priority for spanning tree
            default is 32768, minimum is 0 and maximum is 61440
        holdcnt (Union[Unset, int]): the transmit hold count for spanning tree
            default is 6, minimum is 1 and maximum is 10
    """

    members: List[str]
    enablestp: bool
    descr: str
    proto: str
    ip6linklocal: bool
    ifpriority: "BridgeInterfaceIfpriority"
    ifpathcost: "BridgeInterfaceIfpathcost"
    static: List[str]
    private: List[str]
    stp: List[str]
    span: List[str]
    edge: List[str]
    autoedge: List[str]
    ptp: List[str]
    autoptp: List[str]
    bridgeif_device: str
    maxaddr: Union[Unset, int] = UNSET
    timeout: Union[Unset, int] = UNSET
    maxage: Union[Unset, int] = UNSET
    fwdelay: Union[Unset, int] = UNSET
    hellotime: Union[Unset, int] = UNSET
    priority: Union[Unset, int] = UNSET
    holdcnt: Union[Unset, int] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        members = self.members

        enablestp = self.enablestp

        descr = self.descr

        proto = self.proto

        ip6linklocal = self.ip6linklocal

        ifpriority = self.ifpriority.to_dict()

        ifpathcost = self.ifpathcost.to_dict()

        static = self.static

        private = self.private

        stp = self.stp

        span = self.span

        edge = self.edge

        autoedge = self.autoedge

        ptp = self.ptp

        autoptp = self.autoptp

        bridgeif_device = self.bridgeif_device

        maxaddr = self.maxaddr

        timeout = self.timeout

        maxage = self.maxage

        fwdelay = self.fwdelay

        hellotime = self.hellotime

        priority = self.priority

        holdcnt = self.holdcnt

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "members": members,
                "enablestp": enablestp,
                "descr": descr,
                "proto": proto,
                "ip6linklocal": ip6linklocal,
                "ifpriority": ifpriority,
                "ifpathcost": ifpathcost,
                "static": static,
                "private": private,
                "stp": stp,
                "span": span,
                "edge": edge,
                "autoedge": autoedge,
                "ptp": ptp,
                "autoptp": autoptp,
                "bridgeif_device": bridgeif_device,
            }
        )
        if maxaddr is not UNSET:
            field_dict["maxaddr"] = maxaddr
        if timeout is not UNSET:
            field_dict["timeout"] = timeout
        if maxage is not UNSET:
            field_dict["maxage"] = maxage
        if fwdelay is not UNSET:
            field_dict["fwdelay"] = fwdelay
        if hellotime is not UNSET:
            field_dict["hellotime"] = hellotime
        if priority is not UNSET:
            field_dict["priority"] = priority
        if holdcnt is not UNSET:
            field_dict["holdcnt"] = holdcnt

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.bridge_interface_ifpathcost import BridgeInterfaceIfpathcost
        from ..models.bridge_interface_ifpriority import BridgeInterfaceIfpriority

        d = src_dict.copy()
        members = cast(List[str], d.pop("members"))

        enablestp = d.pop("enablestp")

        descr = d.pop("descr")

        proto = d.pop("proto")

        ip6linklocal = d.pop("ip6linklocal")

        ifpriority = BridgeInterfaceIfpriority.from_dict(d.pop("ifpriority"))

        ifpathcost = BridgeInterfaceIfpathcost.from_dict(d.pop("ifpathcost"))

        static = cast(List[str], d.pop("static"))

        private = cast(List[str], d.pop("private"))

        stp = cast(List[str], d.pop("stp"))

        span = cast(List[str], d.pop("span"))

        edge = cast(List[str], d.pop("edge"))

        autoedge = cast(List[str], d.pop("autoedge"))

        ptp = cast(List[str], d.pop("ptp"))

        autoptp = cast(List[str], d.pop("autoptp"))

        bridgeif_device = d.pop("bridgeif_device")

        maxaddr = d.pop("maxaddr", UNSET)

        timeout = d.pop("timeout", UNSET)

        maxage = d.pop("maxage", UNSET)

        fwdelay = d.pop("fwdelay", UNSET)

        hellotime = d.pop("hellotime", UNSET)

        priority = d.pop("priority", UNSET)

        holdcnt = d.pop("holdcnt", UNSET)

        bridge_interface = cls(
            members=members,
            enablestp=enablestp,
            descr=descr,
            proto=proto,
            ip6linklocal=ip6linklocal,
            ifpriority=ifpriority,
            ifpathcost=ifpathcost,
            static=static,
            private=private,
            stp=stp,
            span=span,
            edge=edge,
            autoedge=autoedge,
            ptp=ptp,
            autoptp=autoptp,
            bridgeif_device=bridgeif_device,
            maxaddr=maxaddr,
            timeout=timeout,
            maxage=maxage,
            fwdelay=fwdelay,
            hellotime=hellotime,
            priority=priority,
            holdcnt=holdcnt,
        )

        bridge_interface.additional_properties = d
        return bridge_interface

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
