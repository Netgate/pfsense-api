from typing import Any, Dict, List, Type, TypeVar, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.lagg_interface_lacptimeout import LAGGInterfaceLacptimeout
from ..models.lagg_interface_proto import LAGGInterfaceProto

T = TypeVar("T", bound="LAGGInterface")


@_attrs_define
class LAGGInterface:
    """
    Attributes:
        members (List[str]):
        descr (str): description
        laggif_device (str): generated by system when create lagg
        proto (LAGGInterfaceProto): lagg protocol
            valid value = none, lacp, failover, loadbalance, roundrobin
        failovermaster (str): (for proto=failover only) failover master interface
        lacptimeout (LAGGInterfaceLacptimeout): (for proto=lacp only) LACP Timeout Mode
            valid value = slow, fast
        lagghash (str): (for proto=lacp or loadbalance) hash algorithms for the packet layers
            valid value = "l2,l3,l4", "l2", "l3", "l4", "l2,l3", "l3,l4", "l2,l4"
    """

    members: List[str]
    descr: str
    laggif_device: str
    proto: LAGGInterfaceProto
    failovermaster: str
    lacptimeout: LAGGInterfaceLacptimeout
    lagghash: str
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        members = self.members

        descr = self.descr

        laggif_device = self.laggif_device

        proto = self.proto.value

        failovermaster = self.failovermaster

        lacptimeout = self.lacptimeout.value

        lagghash = self.lagghash

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "members": members,
                "descr": descr,
                "laggif_device": laggif_device,
                "proto": proto,
                "failovermaster": failovermaster,
                "lacptimeout": lacptimeout,
                "lagghash": lagghash,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        members = cast(List[str], d.pop("members"))

        descr = d.pop("descr")

        laggif_device = d.pop("laggif_device")

        proto = LAGGInterfaceProto(d.pop("proto"))

        failovermaster = d.pop("failovermaster")

        lacptimeout = LAGGInterfaceLacptimeout(d.pop("lacptimeout"))

        lagghash = d.pop("lagghash")

        lagg_interface = cls(
            members=members,
            descr=descr,
            laggif_device=laggif_device,
            proto=proto,
            failovermaster=failovermaster,
            lacptimeout=lacptimeout,
            lagghash=lagghash,
        )

        lagg_interface.additional_properties = d
        return lagg_interface

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
