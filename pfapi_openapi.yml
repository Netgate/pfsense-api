openapi: 3.0.3
info:
  title: pfSense API
  version: "1.0"
  description: This is the schema for APIs to manage pfSense devices

tags:
  - name: auth
    description: Authentication
  - name: login
    description: Authentication Operations
  - name: controller
    description: pfSense Controller operations
  - name: events
    description: Device events
  - name: system
    description: System configuration
  - name: aliases
    description: Firewall aliases
  - name: interfaces
    description: Network interfaces
paths:
  /aliases:
    get:
      tags:
        - aliases
      summary: Get firewall aliases
      description: ""
      operationId: FirewallGetAliases
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FWAliases'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - aliases
      summary: Create a new alias
      description: ""
      operationId: FirewallAddAlias
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FWAliasReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /aliases/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    get:
      tags:
        - aliases
      summary: Get a firewall alias
      description: ""
      operationId: FirewallGetAlias
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FWAlias'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - aliases
      summary: Update firewall alias
      description: ""
      operationId: FirewallUpdateAlias
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FWUpdateAliasreq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - aliases
      summary: Delete alias
      description: ""
      operationId: FirewallDeleteAlias
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth:
    get:
      tags:
        - auth
      summary: Return authentication servers
      description: ""
      operationId: GetAuthServers
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthServersList'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/test:
    post:
      tags:
        - auth
      summary: ""
      description: ""
      operationId: AuthTestAuthentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTestCredentials'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTestResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /controller:
    get:
      tags:
        - controller
      summary: Get controller information
      description: ""
      operationId: GetControllerDescrip
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControllerDescrip'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /controller/alarms:
    get:
      tags:
        - controller
      summary: Get summary of alarms
      description: ""
      operationId: GetControllerAlarms
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControllerAlarms'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /controller/logs:
    get:
      tags:
        - controller
      summary: Get controller logs
      description: ""
      operationId: GetControllerLogs
      parameters:
        - in: query
          name: device_name
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
        - in: query
          name: from_ts
          schema:
            type: integer
        - in: query
          name: to_ts
          schema:
            type: integer
        - in: query
          name: class
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogEntries'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /controller/service:
    post:
      tags:
        - controller
      summary: Request action on the controller process
      description: ""
      operationId: ControllerAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ControllerServiceAction'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /controller/stats:
    get:
      tags:
        - controller
      summary: Get controller stats
      description: ""
      operationId: GetControllerStats
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControllerStats'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/activity:
    get:
      tags:
        - diag
      summary: Get system activity based on "top" output
      description: ""
      operationId: DiagGetActivity
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagActivity'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/arp:
    get:
      tags:
        - diag
      summary: Get ARP table
      description: ""
      operationId: DiagGetArpTable
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagArpTable'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - diag
      summary: Delete ARP table
      description: ""
      operationId: DiagDeleteArpTable
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/arp/{ip}:
    parameters:
      - in: path
        name: ip
        required: true
        schema:
          type: string
    delete:
      tags:
        - diag
      summary: Delete ARP entry
      description: ""
      operationId: DiagDeleteArpEntry
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/auth:
    get:
      tags:
        - diag
      summary: Get list of authentication servers
      description: ""
      operationId: DiagGetAuthServerList
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagAuthServerList'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/auth/test:
    post:
      tags:
        - diag
      summary: Perform auth test
      description: ""
      operationId: DiagAuthTest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiagAuthTestRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagAuthTestResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/backup:
    post:
      tags:
        - diag
      summary: Get a backup of the config as file
      description: ""
      operationId: DiagGetBackup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiagBackupRequest'
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/backup/diff:
    get:
      tags:
        - diag
      summary: Get a diff of two backups
      description: ""
      operationId: DiagGetBackupDiff
      parameters:
        - in: query
          name: t1
          schema:
            type: integer
        - in: query
          name: t2
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagBackupDiff'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/backup/prior:
    get:
      tags:
        - diag
      summary: Get a list of previous backup
      description: ""
      operationId: DiagGetPriorBackupsList
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagPriorBackupInfo'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/backup/priorbackup/{time}:
    parameters:
      - in: path
        name: time
        required: true
        schema:
          type: string
    get:
      tags:
        - diag
      summary: Get a prior backup
      description: ""
      operationId: DiagGetPriorBackup
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/backup/restore:
    post:
      tags:
        - diag
      summary: Restore a backup of the config from file
      description: ""
      operationId: DiagRestoreBackup
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                backup:
                  $ref: '#/components/schemas/DiagBackupRequest'
                config:
                  type: string
                  format: binary
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/backup/restorebkp:
    post:
      tags:
        - diag
      summary: Restore from prior backup
      description: ""
      operationId: DiagRestorePriorBackup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiagRestorePriorBackupRequst'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/backup/{time}:
    parameters:
      - in: path
        name: time
        required: true
        schema:
          type: string
    delete:
      tags:
        - diag
      summary: Delete a backup of the config
      description: ""
      operationId: DiagDeleteBackup
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/cmd/download:
    get:
      tags:
        - diag
      summary: Download a file
      description: ""
      operationId: DiagCmdGetFile
      parameters:
        - in: query
          name: filename
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/cmd/php:
    post:
      tags:
        - diag
      summary: Run PHP code
      description: ""
      operationId: DiagExecutePhpCmd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiagPhpCommand'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagCommandResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/cmd/shell:
    post:
      tags:
        - diag
      summary: Run a shell command and returns its output
      description: ""
      operationId: DiagExecuteShellCmd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiagShellCommand'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagCommandResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/cmd/upload:
    post:
      tags:
        - diag
      summary: Upload a file to a specified location
      description: ""
      operationId: DiagCmdUploadFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiagUploadRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagUploadResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/console:
    get:
      tags:
        - diag
      summary: |
        Obtain access to the console. Note this is a websocket upgrade
        point and not regular HTTP. The success response below is for
        OpenAPI and not meant as the actual reponse payload. The API
        will launch a virtual terminal instance on the host and stream
        its contents to the client. Client writes are delivered to
        the virtual terminal as is.
      description: ""
      operationId: DiagGetConsole
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - diag
      summary: Shutdown web console session
      description: ""
      operationId: DiagShutdownConsole
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/console/sessions:
    get:
      tags:
        - diag
      summary: List open console clients, including remote SSH logins.
      description: ""
      operationId: DiagGetConsoleClients
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsoleClients'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/control:
    post:
      tags:
        - diag
      summary: Execute system control, such as rebooting
      description: ""
      operationId: DiagSystemControl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemControl'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/dns:
    get:
      tags:
        - diag
      summary: Lookup DNS entry for the given host
      description: ""
      operationId: DiagLookupHostDNS
      parameters:
        - in: query
          name: host
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagDnsLookupResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/dns/alias:
    post:
      tags:
        - diag
      summary: Create a DNS alias
      description: ""
      operationId: DiagDNSCreateAlias
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsAliasRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/editfile:
    get:
      tags:
        - diag
      summary: Get file contents for editing
      description: ""
      operationId: DiagGetEditFile
      parameters:
        - in: query
          name: fname
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditFileData'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - diag
      summary: Save edited file
      description: ""
      operationId: DiagSaveEditedFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditFileData'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditFileData'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/limiterinfo:
    get:
      tags:
        - diag
      summary: Return limiter information
      description: ""
      operationId: DiagGetLimiterInfo
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagLimiters'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/pcap:
    get:
      tags:
        - diag
      summary: List current or completed packet captures
      description: ""
      operationId: DiagGetPcap
      parameters:
        - in: query
          name: proto
          schema:
            type: string
        - in: query
          name: detail
          schema:
            type: string
        - in: query
          name: dnsquery
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PacketCapture'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - diag
      summary: Start a new packet capture
      description: ""
      operationId: DiagRunPcap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PacketCaptureRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PacketCapture'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/pcap/download:
    get:
      tags:
        - diag
      summary: Download packet capture
      description: ""
      operationId: DiagDownloadPcap
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/pfinfo:
    get:
      tags:
        - diag
      summary: Get pfctl summary
      description: ""
      operationId: DiagGetPfInfo
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfInfoResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/pftop:
    get:
      tags:
        - diag
      summary: Get pftop output
      description: ""
      operationId: DiagGetPftop
      parameters:
        - in: query
          name: viewtype
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: sorttype
          schema:
            type: string
        - in: query
          name: states
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PftopResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/ping:
    post:
      tags:
        - diag
      summary: Ping target host
      description: ""
      operationId: DiagPing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiagPingRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagPingResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/routes:
    get:
      tags:
        - diag
      summary: Retrieve routing table
      description: ""
      operationId: DiagGetRoutes
      parameters:
        - in: query
          name: resolve
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagRoutes'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/smart:
    get:
      tags:
        - diag
      summary: Get SMART information
      description: ""
      operationId: DiagGetSmartDevices
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMARTDevices'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/smart/abort:
    get:
      tags:
        - diag
      summary: Abort SMART test
      description: ""
      operationId: DiagGetSmartAbort
      parameters:
        - in: query
          name: drive
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMARTResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/smart/info:
    get:
      tags:
        - diag
      summary: Get SMART info
      description: ""
      operationId: DiagGetSmartInfo
      parameters:
        - in: query
          name: drive
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMARTResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/smart/logs:
    get:
      tags:
        - diag
      summary: Get SMART logs
      description: ""
      operationId: DiagGetSmartLogs
      parameters:
        - in: query
          name: drive
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMARTResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/smart/test:
    get:
      tags:
        - diag
      summary: Run SMART test
      description: ""
      operationId: DiagGetSmartTest
      parameters:
        - in: query
          name: drive
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMARTResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/sockets:
    get:
      tags:
        - diag
      summary: Get socket stats
      description: ""
      operationId: DiagGetSocketStats
      parameters:
        - in: query
          name: filter
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagSocketStats'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/states:
    get:
      tags:
        - diag
      summary: Get state information
      description: ""
      operationId: DiagGetStates
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagStates'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - diag
      summary: Delete state information
      description: ""
      operationId: DiagDeleteStates
      parameters:
        - in: query
          name: srcip
          schema:
            type: string
        - in: query
          name: dstip
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/testport:
    get:
      tags:
        - diag
      summary: Get possible source addresses
      description: ""
      operationId: DiagGetSourceAddresses
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestPortSources'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - diag
      summary: Test a network port
      description: ""
      operationId: DiagTestsPort
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPortRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestPortResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /diag/traceroute:
    post:
      tags:
        - diag
      summary: Perform traceroute
      description: ""
      operationId: DiagTraceroute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TracerouteRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TracerouteResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events:
    get:
      tags:
        - events
      summary: Long poll to wait for events from the system
      description: |
        Detect system events or alerts that need to be attended to.
        Calling this function will block the client, and it should therefore
        be placed on a a dedicated connection from other API requests.
        Each event returned in the events list has an event_id, which
        can be used as a tracker for retrieving the nest set of events.
        
        parameters:
          - last_id: the ID of the event that was last retrieved by the client.
      operationId: GetEvents
      parameters:
        - in: query
          name: last_id
          description: last seen ID
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/npt:
    get:
      tags:
        - firewall
      summary: Get NPt (IPv6 Network Prefix Translation) Rules
      description: ""
      operationId: FirewallGetNATNpt
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NATNptRules'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - firewall
      summary: Create NAT NPt rule
      description: ""
      operationId: FirewallCreateNATNpt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NATNptRule'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NATNptRules'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/npt/reorder:
    post:
      tags:
        - firewall
      summary: Reorder NPt NAT rules
      description: ""
      operationId: FirewallOrderNATNptRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NATRuleOrder'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/npt/toggle:
    put:
      tags:
        - firewall
      summary: Toggle NPt Rules
      description: ""
      operationId: FirewallToggleNATNptRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FwBulkToggle'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/npt/toggle/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
        - firewall
      summary: Toggle NPt Rule
      description: ""
      operationId: FirewallToggleNATNptRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FwIgnoredInput'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/npt/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      tags:
        - firewall
      summary: Delete NAT NPt rules
      description: ""
      operationId: FirewallDeleteNATNptRules
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/onetoone:
    get:
      tags:
        - firewall
      summary: Get NAT 1:1 rules
      description: ""
      operationId: FirewallGetNAT1To1Rules
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NAT1To1Rules'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - firewall
      summary: Create 1:1 NAT rule
      description: ""
      operationId: FirewallCreateNAT1To1Rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NAT1To1Rule'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NAT1To1Rules'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/onetoone/reorder:
    post:
      tags:
        - firewall
      summary: Reorder 1:1 NAT rules
      description: ""
      operationId: FirewallOrderNAT1To1Rules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NATRuleOrder'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/onetoone/toggle:
    put:
      tags:
        - firewall
      summary: Toggle NAT 1:1 rules
      description: ""
      operationId: FirewallToggleNAT1To1Rules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FwIgnoredInput'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/onetoone/toggle/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
        - firewall
      summary: Toggle NAT 1:1 rule
      description: ""
      operationId: FirewallToggleNAT1To1Rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FwBulkToggle'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FWToggleResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/onetoone/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      tags:
        - firewall
      summary: Delete NAT 1:1 rules
      description: ""
      operationId: FirewallDeleteNAT1To1Rules
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/outbound:
    get:
      tags:
        - firewall
      summary: Get NAT Outbound Rules
      description: ""
      operationId: FirewallGetNATOut
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NATOutboundRules'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - firewall
      summary: Create NAT Outbound Rule
      description: ""
      operationId: FirewallCreateNATOut
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NATOutboundRule'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NATOutboundRules'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/outbound/mode:
    post:
      tags:
        - firewall
      summary: Update NAT Outbound Mode
      description: ""
      operationId: FirewallUpdateNATOutMode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NATOutboundMode'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NATOutModeUpdateResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/outbound/reorder:
    post:
      tags:
        - firewall
      summary: Reorder NAT Outbound Rules
      description: ""
      operationId: FirewallOrderNATOut
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NATRuleOrder'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/outbound/toggle/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
        - firewall
      summary: Toggle NAT Outbound rule
      description: ""
      operationId: FirewallToggleNATOut
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FwIgnoredInput'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FWToggleResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/outbound/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
        - firewall
      summary: Update NAT Outbound Rule
      description: ""
      operationId: FirewallUpdateNATOut
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NATOutboundRule'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NATOutUpdateResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/port-forward:
    get:
      tags:
        - firewall
      summary: Get NAT Rules
      description: ""
      operationId: FirewallGetNAT
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NATRules'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - firewall
      summary: Create NAT rule
      description: ""
      operationId: FirewallCreateNAT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NATRule'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NATRules'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/port-forward/reorder:
    post:
      tags:
        - firewall
      summary: Reorder NAT rules
      description: ""
      operationId: FirewallOrderNATRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FWRuleOrder'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/port-forward/separators:
    post:
      tags:
        - firewall
      summary: Create NAT separator before/after a rule identified by its index
      description: ""
      operationId: FirewallAddNATSeparator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertFilterSeparator'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Separator'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/port-forward/separators/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      tags:
        - firewall
      summary: Delete a NAT separator by index
      description: ""
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/port-forward/toggle:
    put:
      tags:
        - firewall
      summary: Toggle NAT Rules
      description: ""
      operationId: FirewallToggleNATRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FwBulkToggle'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/port-forward/toggle/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
        - firewall
      summary: Toggle NAT Rule
      description: ""
      operationId: FirewallToggleNATRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FwIgnoredInput'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/nat/port-forward/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      tags:
        - firewall
      summary: Delete NAT rules
      description: ""
      operationId: FirewallDeleteNAT
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - firewall
      summary: Update NAT rule
      description: ""
      operationId: FirewallUpdateNAT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NATRule'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NATUpdateResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/pflow:
    get:
      tags:
        - firewall
      summary: Get Global Packet Flow Options
      description: ""
      operationId: FirewallGetPFlow
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PFlowGlobalOptions'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - firewall
      summary: Change Global Packet Flow Options
      description: ""
      operationId: FirewallSetPFlow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PFlowOptions'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/pflow/exporters:
    post:
      tags:
        - firewall
      summary: Add Packet Flow Exporters
      description: ""
      operationId: FirewallAddPFlowExporter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PFlowExporter'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/pflow/exporters/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
        - firewall
      summary: Update Packet Flow Exporters
      description: ""
      operationId: FirewallUpdatePFlowExporter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PFlowExporter'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - firewall
      summary: Delete Packet Flow Exporters
      description: ""
      operationId: FirewallDeletePFlowExporter
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/rules/interface:
    get:
      tags:
        - firewall
      summary: Query rules for interface
      description: ""
      operationId: GetFWInterfaces
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FWFirewallInterfaces'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/rules/interface/{interface}:
    parameters:
      - in: path
        name: interface
        required: true
        schema:
          type: string
    get:
      tags:
        - firewall
      summary: Query rules and separators
      description: ""
      operationId: GetFirewallRules
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FWRules'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - firewall
      summary: Append rule to the firewall
      description: ""
      operationId: AppendFirewallRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FWFilterRule'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FWFilterRule'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/rules/interface/{interface}/bogon:
    parameters:
      - in: path
        name: interface
        required: true
        schema:
          type: string
    get:
      tags:
        - firewall
      summary: Get bogon rule for the specified interface
      description: ""
      operationId: QueryBogonRule
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FWBogonRule'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - firewall
      summary: Toggles the bogon rule
      description: ""
      operationId: ToggleBogonRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FWBogonState'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/rules/interface/{interface}/copy:
    parameters:
      - in: path
        name: interface
        required: true
        schema:
          type: string
    post:
      tags:
        - firewall
      summary: Bulk copy of rules to target interface
      description: ""
      operationId: CopyFirewallRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FwBulkCopy'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/rules/interface/{interface}/delete:
    parameters:
      - in: path
        name: interface
        required: true
        schema:
          type: string
    post:
      tags:
        - firewall
      summary: Bulk delete of rules
      description: ""
      operationId: DeleteFirewallRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FwBulkDelete'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/rules/interface/{interface}/reorder:
    parameters:
      - in: path
        name: interface
        required: true
        schema:
          type: string
    post:
      tags:
        - firewall
      summary: Reorder rules and separators
      description: ""
      operationId: ReorderFirewallRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FWRulesOrder'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/rules/interface/{interface}/separators:
    parameters:
      - in: path
        name: interface
        required: true
        schema:
          type: string
    post:
      tags:
        - firewall
      summary: Create separator before/after a rule identified by its id
      description: ""
      operationId: InsertFirewallSeparator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertFilterSeparator'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Separator'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/rules/interface/{interface}/separators/{id}:
    parameters:
      - in: path
        name: interface
        required: true
        schema:
          type: string
      - in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      tags:
        - firewall
      summary: Delete firewall rule separator identified by id
      description: ""
      operationId: DeleteFirewallSeparator
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/rules/interface/{interface}/toggle:
    parameters:
      - in: path
        name: interface
        required: true
        schema:
          type: string
    post:
      tags:
        - firewall
      summary: Bulk toggle of rules
      description: ""
      operationId: ToggleFirewallRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FwBulkToggle'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/rules/interface/{interface}/toggle/{id}:
    parameters:
      - in: path
        name: interface
        required: true
        schema:
          type: string
      - in: path
        name: id
        required: true
        schema:
          type: string
    post:
      tags:
        - firewall
      summary: Toggle rule by id
      description: ""
      operationId: ToggleFirewallRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FwRuleToggle'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/rules/interface/{interface}/{id}:
    parameters:
      - in: path
        name: interface
        required: true
        schema:
          type: string
      - in: path
        name: id
        required: true
        schema:
          type: string
    patch:
      tags:
        - firewall
      summary: Update rule identified by id
      description: ""
      operationId: UpdateFirewallRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FWFilterRule'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FWFilterRule'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - firewall
      summary: Add rule before/after other rule identified by its id
      description: ""
      operationId: InsertFirewallRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertFilterRule'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FWFilterRule'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - firewall
      summary: Deletes a rule by its id
      description: ""
      operationId: DeleteFirewallRule
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/schedules:
    get:
      tags:
        - firewall
      summary: Get Firewall Schedules
      description: ""
      operationId: FirewallGetSchedules
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FWSchedules'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - firewall
      summary: Add Firewall Schedule
      description: ""
      operationId: FirewallAddSchedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FWSchedule'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/schedules/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
        - firewall
      summary: Update Firewall Schedule
      description: ""
      operationId: FirewallUpdateSchedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FWSchedule'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - firewall
      summary: Delete schedule
      description: ""
      operationId: FirewallDeleteSchedule
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/virtualip:
    get:
      tags:
        - firewall
      summary: List Virtual IPs
      description: ""
      operationId: FirewallGetVirtualIPs
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualIPs'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - firewall
      summary: Add Virtual IP
      description: ""
      operationId: FirewallSetVirtualIP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualIP'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualIPResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /firewall/virtualip/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      tags:
        - firewall
      summary: Delete Virtual IP
      description: ""
      operationId: FirewallDeleteVirtualIP
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - firewall
      summary: Update Virtual IP
      description: ""
      operationId: FirewallUpdateVirtualIP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualIP'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualIPResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces:
    get:
      tags:
        - interfaces
      summary: Get network interfaces
      description: ""
      operationId: GetInterfaces
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfacesSimple'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - interfaces
      summary: Update All interfaces
      description: ""
      operationId: UpdateInterfaces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterfacesSimple'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - interfaces
      summary: Add Interface
      description: ""
      operationId: AddInterface
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewInterfaceResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/bridge:
    get:
      tags:
        - interfaces
      summary: Get Bridges
      description: ""
      operationId: GetBridgeInterfaces
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BridgeInterfaces'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - interfaces
      summary: Add bridge interface
      description: ""
      operationId: AddBridgeInterface
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BridgeInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/bridge/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    put:
      tags:
        - interfaces
      summary: Update bridge interface
      description: ""
      operationId: SetBridgeInterface
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BridgeInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - interfaces
      summary: Remove bridge interface
      description: ""
      operationId: RemoveBridgeInterface
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/by-device:
    get:
      tags:
        - interfaces
      summary: Get all host interfaces
      description: ""
      operationId: GetHostInterfaces
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetIfs'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/by-device/{devname}:
    parameters:
      - in: path
        name: devname
        required: true
        schema:
          type: string
    get:
      tags:
        - interfaces
      summary: Get interface by its host interface name
      description: |
        Host interfaces are those defined by the operating system's drivers.
        It also includes pseudo interfaces, which are software created, such as
        TUN, TAP and bridges. This function gets the information information
        of the {name} specified.
      operationId: GetHostInterface
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetIf'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/by-device/{devname}/owner:
    parameters:
      - in: path
        name: devname
        required: true
        schema:
          type: string
    post:
      tags:
        - interfaces
      summary: Assign or release interface owner
      description: ""
      operationId: SetInterfaceOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetIfAssignOwnerReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetIf'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/descriptors:
    get:
      tags:
        - interfaces
      summary: Get a interface descriptors
      description: ""
      operationId: GetInterfaceDescriptors
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceDescriptors'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/friendly:
    get:
      tags:
        - interfaces
      summary: Get interfaces
      description: ""
      operationId: GetInterfacesFriendly
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfacesFriendly'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/gif:
    get:
      tags:
        - interfaces
      summary: Get GIF interfaces
      description: ""
      operationId: GetGIFs
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GIFInterfaces'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - interfaces
      summary: Add GIF interface
      description: ""
      operationId: AddGIF
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GIFInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/gif/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    put:
      tags:
        - interfaces
      summary: Update GIF interface
      description: ""
      operationId: SetGIF
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GIFInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - interfaces
      summary: Delete GIF interface
      description: ""
      operationId: DeleteGIF
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/gre:
    get:
      tags:
        - interfaces
      summary: Get interfaces
      description: ""
      operationId: GetGREs
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GREInterfaces'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - interfaces
      summary: Adding GRE interface
      description: ""
      operationId: AddGRE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GREInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/gre/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    put:
      tags:
        - interfaces
      summary: Update GRE interface
      description: ""
      operationId: SetGRE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GREInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - interfaces
      summary: Delete GRE interface
      description: ""
      operationId: DeleteGRE
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/groups:
    get:
      tags:
        - interfaces
      summary: Get interface groups
      description: ""
      operationId: GetInterfaceGroups
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceGroups'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - interfaces
      summary: Add interface group
      description: ""
      operationId: AddInterfaceGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterfaceGroup'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/groups/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    delete:
      tags:
        - interfaces
      summary: Delete interface group
      description: ""
      operationId: DeleteInterfaceGroup
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - interfaces
      summary: Set interface group
      description: ""
      operationId: SetInterfaceGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterfaceGroup'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/lagg:
    get:
      tags:
        - interfaces
      summary: Get interfaces
      description: ""
      operationId: GetLAGGs
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LAGGInterfaces'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - interfaces
      summary: Add LAGG interface
      description: ""
      operationId: AddLAGG
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LAGGInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/lagg/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    put:
      tags:
        - interfaces
      summary: Update LAGG interface
      description: ""
      operationId: SetLAGG
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LAGGInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - interfaces
      summary: Delete LAGG interface
      description: ""
      operationId: DeleteLAGG
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/lan:
    get:
      tags:
        - interfaces
      summary: Get LAN interface
      description: ""
      operationId: GetLAN
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - interfaces
      summary: Update LAN interface
      description: ""
      operationId: UpdateLAN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/ports:
    get:
      tags:
        - interfaces
      summary: |
        Get interface ports.
        The response of ports is a map of port-type (e.g. wans, gres) to
        a list of its corresponding datastructure.
      description: ""
      operationId: GetInterfacePorts
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfacePorts'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/ppp:
    get:
      tags:
        - interfaces
      summary: Get interfaces
      description: ""
      operationId: GetPPPInterfaces
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PPPInterfaces'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - interfaces
      summary: Add PPP interface
      description: ""
      operationId: AddPPPInterface
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PPPInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/ppp/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    put:
      tags:
        - interfaces
      summary: Update PPP interface
      description: ""
      operationId: SetPPPInterface
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PPPInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - interfaces
      summary: Delete PPP interface
      description: ""
      operationId: DeletePPPInterface
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/qinq:
    get:
      tags:
        - interfaces
      summary: Get QinQs
      description: ""
      operationId: GetQinQs
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QinQInterfaces'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - interfaces
      summary: Add QinQ
      description: ""
      operationId: AddQinQ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QinQInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/qinq/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    put:
      tags:
        - interfaces
      summary: Update QinQ
      description: ""
      operationId: SetQinQ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QinQInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - interfaces
      summary: Delete QinQ
      description: ""
      operationId: DeleteQinQ
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/vlan:
    get:
      tags:
        - interfaces
      summary: Get VLANs
      description: ""
      operationId: GetVLANs
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VLANInterfaces'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - interfaces
      summary: Add VLAN interface
      description: ""
      operationId: AddVLAN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VLANInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/vlan/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    put:
      tags:
        - interfaces
      summary: Update VLAN interface
      description: ""
      operationId: SetVLAN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VLANInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - interfaces
      summary: Delete VLAN interface
      description: ""
      operationId: DeleteVLAN
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/wan:
    get:
      tags:
        - interfaces
      summary: Get WAN interface
      description: ""
      operationId: GetWAN
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - interfaces
      summary: Update WAN interface
      description: ""
      operationId: UpdateWAN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/wireless:
    get:
      tags:
        - interfaces
      summary: Get Wireless interfaces
      description: ""
      operationId: GetWirelessInterfaces
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WirelessInterfaces'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - interfaces
      summary: Add Wireless Interface
      description: ""
      operationId: AddWirelessInterface
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WirelessInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/wireless/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
        - interfaces
      summary: Set Wireless interfaces
      description: ""
      operationId: SetWirelessInterface
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WirelessInterface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - interfaces
      summary: Delete Wireless interface
      description: ""
      operationId: DeleteWirelessInterface
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /interfaces/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    get:
      tags:
        - interfaces
      summary: Get interface by its assigned name
      description: ""
      operationId: GetInterface
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interface'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - interfaces
      summary: Delete an interface
      description: ""
      operationId: DeleteInterface
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - interfaces
      summary: Update an interface
      description: ""
      operationId: SetInterface
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interface'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
        - login
      summary: Authenticate with the controller.
      description: |
        Login to pfSense. If the JWT access token is not provided, then a new
        one is allocated. A JWT refresh token is also applied to cookie. The client
        can refresh the access token, while the refresh token is still valid, by
        calling RefreshAccessToken (POST /login/refresh).
      operationId: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login/refresh:
    post:
      tags:
        - login
      summary: |
        Refresh the JWT access token. The refresh token cookie must be valid
        for a successful refresh.
      description: ""
      operationId: RefreshAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenParam'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/controller/identity:
    get:
      tags:
        - mim
      summary: 'Get this Controller''s MIM identity, which is used to register it on the managed device.'
      description: |
        The Controller Summary payload which is provided to a remote pfSense device to
        store in its configuration and is used for it establish a MIM VPN connection
        to the controller.
      operationId: GetMIMControllerSummary
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControllerSummary'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/controllers:
    get:
      tags:
        - mim
      summary: Get a list of configured controllers managing this device and information about this device
      description: ""
      operationId: GetControllers
      parameters:
        - in: query
          name: detailed
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControllersList'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - mim
      summary: Add/change a management controller with its public key on the pfsense host
      description: |
        Adding the controller will initiate a Netgard connection to it. The device will
        continue to issue a connection request every 10 seconds while the Controller
        has not added the device to its configuration.
      operationId: SetController
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ControllerIdentity'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControllerInfo'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/controllers/id/{key}:
    parameters:
      - in: path
        name: key
        required: true
        schema:
          type: string
    get:
      tags:
        - mim
      summary: Get stored controller information, by its key ID
      description: ""
      operationId: GetMIMController
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControllerInfo'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - mim
      summary: Delete controller entry. The key can be hex or base64-URL encoded.
      description: ""
      operationId: DeleteMIMController
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/device/identity:
    get:
      tags:
        - mim
      summary: 'Gets the device''s details to register with the MIM controller.'
      description: |
        Get the required information for the MiM controller to manage this device. It includes
        this device's public keys for API Noise handshaking and VPN connection.
      operationId: GetDeviceIdentity
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceIdentity'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/device/pubkey:
    post:
      tags:
        - mim
      summary: 'Sets the pfSense device''s public key which is used by a controller to manage it.'
      description: |
        The ED25519 public key set to the device is used for secure Noise handshaking
        between the controller and the device to ensure the establish trust. The public
        key part is exported in the `DeviceIdentity` structure and is what should be
        updated on the controller when this device's key is changed.
        
        This function is intended to be used on the device to change its ED25519 public key.
      operationId: SetDevicePublicKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicePublicKeyOption'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePublicKeyOption'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/devices:
    get:
      tags:
        - mim
      summary: Get controlled devices
      description: ""
      operationId: GetControlledDevices
      parameters:
        - in: query
          name: tags
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlledDevices'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - mim
      summary: |
        Add device to be controlled. This will also attempt to connect to
        the device and perform an authentication handshake with it.
      description: ""
      operationId: AddControlledDevice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/DeviceIdentity'
                - $ref: '#/components/schemas/ControlledDevice'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlledDevice'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/devices/certificate:
    get:
      tags:
        - mim
      summary: Get certificates for controlled devices
      description: ""
      operationId: GetControlledDeviceCerts
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlledDeviceCerts'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - mim
      summary: Add/update certificate for controlled devices
      description: ""
      operationId: MakeControlledDeviceCert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledDeviceCert'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlledDeviceCert'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/devices/certificate/{cert}:
    parameters:
      - in: path
        name: cert
        required: true
        schema:
          type: string
    delete:
      tags:
        - mim
      summary: Delete certificate
      description: ""
      operationId: DeleteControlledDeviceCert
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/devices/device/{device_id}:
    parameters:
      - in: path
        name: device_id
        required: true
        schema:
          type: string
    patch:
      tags:
        - mim
      summary: |
        Update device's settings, which can include its VPN keys or tags.
        Only parameters provided will be updated
      description: ""
      operationId: SetControlledDevice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ControlledDevice'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlledDevice'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - mim
      summary: Remove the device from the controller
      description: ""
      operationId: DeleteControlledDevice
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/devices/tag:
    post:
      tags:
        - mim
      summary: add new tag to the specified devices
      description: ""
      operationId: SetTagsToDevices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceTagOption'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/devices/tag/{tag}:
    parameters:
      - in: path
        name: tag
        required: true
        schema:
          type: string
    delete:
      tags:
        - mim
      summary: Delete tag, removing it from applied devices.
      description: ""
      operationId: DeleteDeviceTag
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mim/devices/tag/{tag}/device/{device_id}:
    parameters:
      - in: path
        name: tag
        required: true
        schema:
          type: string
      - in: path
        name: device_id
        required: true
        schema:
          type: string
    delete:
      tags:
        - mim
      summary: Remove the tag from the specified device. If tag == "*" then remove all tags from the device.
      description: ""
      operationId: RemoveDeviceTag
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlledDevice'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/acb:
    get:
      tags:
        - services
      summary: List backups
      description: ""
      operationId: GetACBList
      parameters:
        - in: query
          name: userkey
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACBList'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/acb/backup:
    post:
      tags:
        - services
      summary: Perform a backup
      description: ""
      operationId: BackupACB
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACBManualBackupRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/acb/bkp:
    get:
      tags:
        - services
      summary: Retrieve backup
      description: ""
      operationId: GetACB
      parameters:
        - in: query
          name: userkey
          schema:
            type: string
        - in: query
          name: revision
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrievedBackup'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/acb/bkp/{timestamp}:
    parameters:
      - in: path
        name: timestamp
        required: true
        schema:
          type: string
    delete:
      tags:
        - services
      summary: Delete backup
      description: ""
      operationId: DeleteACB
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/acb/config:
    get:
      tags:
        - services
      summary: Get ACB config
      description: ""
      operationId: GetACBConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACBConfigInfo'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Save ACB config
      description: ""
      operationId: SaveACBConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACBConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/acb/restore:
    post:
      tags:
        - services
      summary: Restore from ACB backup
      description: ""
      operationId: RestoreACB
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACBRestoreRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/act:
    post:
      tags:
        - services
      summary: Perform action on System Service
      description: ""
      operationId: ServicesAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicesActionReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/capportal:
    get:
      tags:
        - services
      summary: Get Captive Portal Zones
      description: ""
      operationId: GetCaptivePortals
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptivePortals'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Set a Captive Portal configuration
      description: ""
      operationId: SetCaptivePortal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptivePortalConfigReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/capportal/disconnect:
    post:
      tags:
        - services
      summary: Disconnect some or all users from Captive Portal
      description: ""
      operationId: DoCaptivePortalDisconnect
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptivePortalDisconnectRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/capportal/status/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    get:
      tags:
        - services
      summary: Get the status of current active users in a zone.
      description: ""
      operationId: GetCaptivePortalStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptivePortalStatus'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/capportal/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    get:
      tags:
        - services
      summary: Get a specific Captive Portal configuration
      description: ""
      operationId: GetCaptivePortal
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptivePortalInfo'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - services
      summary: Delete a specific Captive Portal configuration
      description: ""
      operationId: DeleteCaptivePortal
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/carp/enabled:
    post:
      tags:
        - services
      summary: Enable/Disable the CARP service
      description: ""
      operationId: SetCARPEnabled
      parameters:
        - in: query
          name: enabled
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CARPStatus'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/carp/maintenancemode:
    post:
      tags:
        - services
      summary: Enable/Disable persistent maintenance mode
      description: ""
      operationId: SetCARPMaintenanceEnabled
      parameters:
        - in: query
          name: enabled
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CARPStatus'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/carp/resetdemotion:
    post:
      tags:
        - services
      summary: Reset demotions and return if any problems were detected (carp_detected_problems != 0)
      description: ""
      operationId: DoCARPResetDemotion
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CARPResetDemotionResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/carp/status:
    get:
      tags:
        - services
      summary: Get the current status of any active CARP clusters
      description: ""
      operationId: GetCARPStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CARPStatus'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp-relay/v4:
    get:
      tags:
        - services
      summary: Get current DHCP over IPv4 Relay configuration
      description: ""
      operationId: GetDhcpV4RelayConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpRelayConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Set DHCP over IPv4 Relay configuration
      description: ""
      operationId: SetDhcpV4RelayConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp-relay/v4/toggle:
    post:
      tags:
        - services
      summary: Toggle DHCP over IPv4 Relay configuration
      description: ""
      operationId: ToggleDhcpV4Relay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DhcpRelayToggle'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp-relay/v6:
    get:
      tags:
        - services
      summary: Get current DHCP over IPv6 Relay configuration
      description: ""
      operationId: GetDhcpV6RelayConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpRelayConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Set DHCP over IPv6 Relay configuration
      description: ""
      operationId: SetDhcpV6RelayConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp-relay/v6/toggle:
    post:
      tags:
        - services
      summary: Toggle DHCP over IPv6 Relay configuration
      description: ""
      operationId: ToggleDhcpV6Relay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DhcpRelayToggle'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp-server:
    get:
      tags:
        - services
      summary: Get current configuration of the DHCP server
      description: ""
      operationId: GetDhcpdConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpdConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - services
      summary: Set new DHCP server configuration
      description: ""
      operationId: SetDhcpdConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DhcpdConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp-server/{version}/address-pools/{iface}:
    parameters:
      - in: path
        name: version
        required: true
        schema:
          type: string
      - in: path
        name: iface
        required: true
        schema:
          type: string
    get:
      tags:
        - services
      summary: List all address pools for an interface
      description: ""
      operationId: ListDhcpdAddressPools
      parameters:
        - in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpAddressPools'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - services
      summary: Create a address pool for a given interface
      description: ""
      operationId: CreateDhcpdAddressPool
      parameters:
        - in: path
          name: version
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DhcpAddressPool'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpAddressPool'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp-server/{version}/address-pools/{iface}/{id}:
    parameters:
      - in: path
        name: version
        required: true
        schema:
          type: string
      - in: path
        name: iface
        required: true
        schema:
          type: string
      - in: path
        name: id
        required: true
        schema:
          type: string
    patch:
      tags:
        - services
      summary: Update address pool
      description: ""
      operationId: UpdateDhcpdAddressPool
      parameters:
        - in: path
          name: version
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DhcpAddressPool'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - services
      summary: Delete address pool by its id
      description: ""
      operationId: DeleteDhcpAddressPool
      parameters:
        - in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp-server/{version}/interface:
    parameters:
      - in: path
        name: version
        required: true
        schema:
          type: string
    get:
      tags:
        - services
      summary: Get a list of all available interfaces
      description: ""
      operationId: GetDhcpdInterfaces
      parameters:
        - in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpInterfaces'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp-server/{version}/interface/{iface}:
    parameters:
      - in: path
        name: version
        required: true
        schema:
          type: string
      - in: path
        name: iface
        required: true
        schema:
          type: string
    get:
      tags:
        - services
      summary: Get the configuration for the interface
      description: ""
      operationId: GetDhcpdInterfaceConfig
      parameters:
        - in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpInterfaceConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - services
      summary: Set interface DHCP configuration
      description: ""
      operationId: SetDhcpdInterfaceConfig
      parameters:
        - in: path
          name: version
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DhcpInterfaceConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp-server/{version}/static-mappings/{iface}:
    parameters:
      - in: path
        name: version
        required: true
        schema:
          type: string
      - in: path
        name: iface
        required: true
        schema:
          type: string
    get:
      tags:
        - services
      summary: List all static mappings for an interface
      description: ""
      operationId: ListDhcpdStaticMappings
      parameters:
        - in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpStaticMappings'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - services
      summary: Create a static mapping for a given interface
      description: ""
      operationId: CreateDhcpdStaticMapping
      parameters:
        - in: path
          name: version
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DhcpStaticMapping'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DhcpStaticMapping'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp-server/{version}/static-mappings/{iface}/{id}:
    parameters:
      - in: path
        name: version
        required: true
        schema:
          type: string
      - in: path
        name: iface
        required: true
        schema:
          type: string
      - in: path
        name: id
        required: true
        schema:
          type: string
    patch:
      tags:
        - services
      summary: Update static mapping
      description: ""
      operationId: UpdateDhcpdStaticMapping
      parameters:
        - in: path
          name: version
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DhcpStaticMapping'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - services
      summary: Delete static mapping by its id
      description: ""
      operationId: DeleteDhcpdStaticMapping
      parameters:
        - in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp/leases:
    get:
      tags:
        - services
      summary: List DHCP leases
      description: ""
      operationId: GetDHCPLeases
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DHCPLeases'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp/leases/{ip}:
    parameters:
      - in: path
        name: ip
        required: true
        schema:
          type: string
    delete:
      tags:
        - services
      summary: Delete DHCP lease
      description: ""
      operationId: DeleteDHCPLease
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp/v4:
    delete:
      tags:
        - services
      summary: Delete all IPv4 DHCP leases
      description: ""
      operationId: DeleteDHCPAllIPv4Leases
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dhcp/v6:
    delete:
      tags:
        - services
      summary: Delete all IPv6 DHCP leases
      description: ""
      operationId: DeleteDHCPAllIPv6Leases
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dnsmasq:
    get:
      tags:
        - services
      summary: Get DNS Forwarder config
      description: ""
      operationId: GetDNSForwarderConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSForwarderConfigInfo'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Update DNS Forwarder config
      description: ""
      operationId: SetDNSForwarderConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DNSForwarderUpdateReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dnsresolver:
    get:
      tags:
        - services
      summary: Get DNS Resolver config
      description: ""
      operationId: GetDNSResolverConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSResolverConfigInfo'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Update DNS Resolver config
      description: ""
      operationId: SetDNSResolverConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DNSResolverUpdateReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dnsresolver/status:
    get:
      tags:
        - services
      summary: Get the status of the DNS resolver
      description: ""
      operationId: GetDnsResolverStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSResolverStatus'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/dyndns:
    get:
      tags:
        - services
      summary: Get Dynamic DNS config
      description: ""
      operationId: GetDynDNSConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynDNSConfigInfo'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Set Dynamic DNS config
      description: ""
      operationId: SetDynDNSConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynDNSUpdateReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/igmpproxy:
    get:
      tags:
        - services
      summary: Get IGMP proxies
      description: ""
      operationId: GetIGMPProxies
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGMPProxies'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Add IGMP proxy
      description: ""
      operationId: SetIGMPProxy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IGMPProxiesReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/igmpproxy/settings:
    post:
      tags:
        - services
      summary: Update IGMP proxy
      description: ""
      operationId: UpdateIGMPProxySettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IGMPProxySettings'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/igmpproxy/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    post:
      tags:
        - services
      summary: Update IGMP proxy
      description: ""
      operationId: UpdateIGMPProxy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProxyReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - services
      summary: Delete IGMP proxy
      description: ""
      operationId: DeleteIGMPProxy
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/ndp:
    get:
      tags:
        - services
      summary: Get NDP Table
      description: ""
      operationId: GetNDPTable
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NDPTable'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - services
      summary: Delete NDP Table
      description: ""
      operationId: DeleteNDPTable
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/ndp/{ip}:
    parameters:
      - in: path
        name: ip
        required: true
        schema:
          type: string
    delete:
      tags:
        - services
      summary: Delete a NDP Entry
      description: ""
      operationId: DeleteNDP
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/ntp:
    get:
      tags:
        - services
      summary: Get current NTP configuration
      description: ""
      operationId: GetNtp
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesNtpConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Updates the NTP configuration
      description: ""
      operationId: SetNtp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicesNtpConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/ntp/status:
    get:
      tags:
        - services
      summary: Get the status of current NTP servers
      description: ""
      operationId: GetNtpStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NtpStatus'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/ntp/stop:
    post:
      tags:
        - services
      summary: Stop ntp service
      description: ""
      operationId: StopNtp
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/pppoe:
    get:
      tags:
        - services
      summary: Get PPPoE config
      description: ""
      operationId: GetPPPoE
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PPPoEConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Set PPPoE config
      description: ""
      operationId: SetPPPoE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PPPoEConfigReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/snmp:
    get:
      tags:
        - services
      summary: Get SNMP config
      description: ""
      operationId: GetSNMP
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesSNMPConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Set SNMP config
      description: ""
      operationId: SetSNMP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicesSNMPConfigReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/status:
    get:
      tags:
        - services
      summary: Get Service Status
      description: ""
      operationId: GetServicesStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesStatusList'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/upnp:
    get:
      tags:
        - services
      summary: Get UPnP config
      description: ""
      operationId: GetUPnP
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesUPnPConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - services
      summary: Set UPnP config
      description: ""
      operationId: SetUPnP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicesUPnPConfigReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/upnp/acl:
    put:
      tags:
        - services
      summary: Create Service ACL
      description: ""
      operationId: CreateUPnPACL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUPnPACL'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UPnPPermUser'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/upnp/acl/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      tags:
        - services
      summary: Delete Service ACL
      description: ""
      operationId: DeleteUPnPACL
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/upnp/status:
    get:
      tags:
        - services
      summary: Get a list of active UPnP mappings
      description: ""
      operationId: GetUPnPStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UPnPMappings'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/upnp/toggle:
    post:
      tags:
        - services
      summary: Toggle UPNP
      description: ""
      operationId: ToggleUPNP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleUPNP'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system:
    get:
      tags:
        - system
      summary: Get system summary
      description: ""
      operationId: GetSystemSummary
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemSummary'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/advanced/admin:
    get:
      tags:
        - system
      summary: List Advanced Admin
      description: ""
      operationId: GetSystemAdvAdmin
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemAdvAdminSetting'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Update Advanced Admin
      description: ""
      operationId: UpdateSystemAdvAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemAdvAdminSetting'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/advanced/firewall:
    get:
      tags:
        - system
      summary: Get Advanced Firewall
      description: ""
      operationId: GetSystemAdvFirewallSetting
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvFirewallSetting'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Update Advanced Firewall
      description: ""
      operationId: UpdateSystemAdvFirewallSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvFirewall'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/advanced/misc:
    get:
      tags:
        - system
      summary: Get Advanced Miscellaneous
      description: ""
      operationId: GetSystemAdvMisc
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvMiscSetting'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Update Advanced Miscellaneous
      description: ""
      operationId: UpdateSystemAdvMisc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvMiscSetting'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/advanced/networking:
    get:
      tags:
        - system
      summary: List network settings
      description: ""
      operationId: GetAdvancedNetworking
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvNetworking'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Set Advanced Network
      description: ""
      operationId: SetSystemAdvNetworking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvNetworkSetting'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/advanced/notifications:
    get:
      tags:
        - system
      summary: Get advanced notifications
      description: ""
      operationId: GetSystemAdvNotifications
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvNotifications'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Update advanced notifications
      description: ""
      operationId: UpdateSystemAdvNotifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvNotifications'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/advanced/sysctl:
    get:
      tags:
        - system
      summary: List system tunables
      description: ""
      operationId: GetTunables
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tunables'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Set/update tunable
      description: ""
      operationId: SetTunable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TunableRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/advanced/sysctl/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      tags:
        - system
      summary: Delete system tunable
      description: ""
      operationId: DeleteTunable
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/advanced/tlscert:
    post:
      tags:
        - system
      summary: |
        Reload TLS certificate. The server will set its TLS certificate to use
        the one specified.
      description: ""
      operationId: UpdateSystemTLSCert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TLSCertPath'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/bootenv:
    get:
      tags:
        - system
      summary: Get all boot environments
      description: ""
      operationId: GetBootenvs
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BootEnvs'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - system
      summary: Deletes a bootenv by its name
      description: ""
      operationId: DeleteBootenvs
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - system
      summary: Creates a bootenv
      description: ""
      operationId: CreateBootenv
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBootenv'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - system
      summary: Updates a bootenv
      description: ""
      operationId: UpdateBootenv
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBootenv'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/bootenv/activate:
    post:
      tags:
        - system
      summary: Activates a bootenv by its name
      description: ""
      operationId: ActivateBootenv
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateBootenv'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BootEnvs'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/bootenv/quick:
    post:
      tags:
        - system
      summary: Quickly create a bootenv from default
      description: ""
      operationId: QuickBootenv
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuickResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certauth:
    get:
      tags:
        - system
      summary: Get a list of Certificate Authorities
      description: ""
      operationId: GetCertAuthorities
      parameters:
        - in: query
          name: withprivkey
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertAuthorities'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - system
      summary: Add Certificate Authority
      description: |
        Add a new Certificate Authority. The input must provide one of the method structures
        which contain the parameters to generate the certificate from. If an existing certificate
        is to be used, the method_existing must contain the certificate and the private key
        associated with it.
        
        The input `NewCaCertReq` object must have a name provided, and one of the `method_xxxxx`
        providing the certificate creation options.
      operationId: AddCertAuthority
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCaCertReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertAuthority'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certauth/{refid}:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Get Certificate Authority details (by its reference ID)
      description: ""
      operationId: GetCertAuthority
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertAuthority'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - system
      summary: Delete Certificate Authority by reference ID
      description: ""
      operationId: DeleteCertAuthority
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertAuthorities'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Update Certificate Authority by reference ID
      description: ""
      operationId: UpdateCertAuthority
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCaCertReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertAuthority'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certauth/{refid}/export-ca:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Download the CA certificate
      description: ""
      operationId: DownloadCACert
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certauth/{refid}/export-key:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Download the CA certificate signing key
      description: ""
      operationId: DownloadCAKey
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certauth/{refid}/renew:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
    post:
      tags:
        - system
      summary: Renew/reissue CA certificate
      description: ""
      operationId: RenewCACert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenewCertOptions'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertAuthority'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certificates:
    get:
      tags:
        - system
      summary: Get certificates, or CSRs only (if ?csr_only=true)
      description: ""
      operationId: GetCertificates
      parameters:
        - in: query
          name: csr_only
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertsConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - system
      summary: Add certificate, certificate signing request or sign a certificate.
      description: |
        Add a certificate, CSR or sign CSR request. The NewCertReq method can contain one of:
          - method_internal:        CertMethodNew
          - method_existing_pem:    CertMethodExistingPEM
          - method_existing_pkcs12: CertMethodExistingPkcs12
          - method_csr:             CertMethodSigningRequest
          - method_sign:            CertMethodSignCSR
      operationId: AddCertificate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCertReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDetailed'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Add certificate with PKCS12 upload. The NewCertReq must provide the method_existing_pkcs12 object.
      description: ""
      operationId: ImportPkcs12Certificate
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                reqdata:
                  $ref: '#/components/schemas/NewCertReq'
                pkcs12file:
                  type: string
                  format: binary
            encoding:
                pkcs12file:
                  contentType: application/x-pkcs12
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDetailed'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certificates/{refid}:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Get certificate with reference ID
      description: ""
      operationId: GetCertificate
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - system
      summary: Delete certificate
      description: ""
      operationId: DeleteCertificate
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertsConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Update certificate with certificate and private key payloads
      description: ""
      operationId: UpdateCertificate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCertReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDetailed'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - system
      summary: Update certificate with PKCS12 upload. The PKCS12 payload must be part of a mutl-part form.
      description: ""
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                reqdata:
                  $ref: '#/components/schemas/UpdatePKCS12CertReq'
                pcsk12file:
                  type: string
                  format: binary
            encoding:
                pcsk12file:
                  contentType: application/x-pkcs12
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDetailed'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certificates/{refid}/export-cert:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Download the certificate as a PEM file
      description: ""
      operationId: DownloadCert
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certificates/{refid}/export-key:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: 'Download the certificate''s private key'
      description: ""
      operationId: GetCertKey
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: 'Download the certificate''s private key'
      description: ""
      operationId: DownloadCertKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertKeyExportOpts'
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certificates/{refid}/export-p12:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Download the certificate and key as a unified PKCS12 file, without password protection
      description: ""
      operationId: GetCertP12
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Download the certificate and key as a unified PKCS12 file
      description: ""
      operationId: DownloadCertP12
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertPkcs12ExportOpts'
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certificates/{refid}/renew:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
    post:
      tags:
        - system
      summary: Renew/reissue certificate
      description: ""
      operationId: RenewCert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenewCertOptions'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateDetailed'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/certoptions:
    get:
      tags:
        - system
      summary: Get options for new certificate creation
      description: ""
      operationId: GetCertOptions
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertOpts'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/config/dirty:
    get:
      tags:
        - system
      summary: Get subsystem dirty states
      description: Retrieve the list of subsystem configuration which are pending applying of changes
      operationId: GetDirtySubsystems
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirtySubsystems'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Apply pending subsystem changes to the system.
      description: |
        The configuration has pending changes that require a series of being applied.
        It returns the list of subsystems that are still dirty.
      operationId: ApplyDirtyConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyDirtyConfigRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirtySubsystems'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/config/export:
    get:
      tags:
        - system
      summary: Downloads the configuration file of the controller
      description: ""
      operationId: ExportConfiguration
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfConfiguration'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/config/import:
    put:
      tags:
        - system
      summary: Uploads a configuration file into the controller
      description: ""
      operationId: ImportConfiguration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PfConfiguration'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/crl:
    get:
      tags:
        - system
      summary: Retrieve the CRL configuration
      description: ""
      operationId: GetCRLsList
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRLEntries'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Add new CRL, either by importing an existing X509 version or creating one.
      description: |
        Add a new CRL with either an existing X509 input or values for creating a new one.
        The NewCRLReq method must contain one of:
          - method_internal:  CRLMethodNew
          - method_x509:      CRLMethodX509
      operationId: AddCRL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCRLReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRLEntries'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/crl/{refid}:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Get configuration of the specified CRL ID
      description: ""
      operationId: GetCRL
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRLConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - system
      summary: Update CRL, and add certs to be revoked
      description: |
        Update CRL details, with option to add certificates to be revoked (if the CRL
        is an internal one). The update request must provide the complete CRL information
        including its description, just like creating a new CRL.
      operationId: UpdateCRL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCRLReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRLEntries'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - system
      summary: Delete CRL
      description: |
        Deletes the CRL record from the configuration. This also results in certificates
        being unrevoked.
      operationId: DeleteCRL
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRLEntries'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/crl/{refid}/cert/{certid}:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
      - in: path
        name: certid
        required: true
        schema:
          type: string
    delete:
      tags:
        - system
      summary: Unrevoke certificate by its ID.
      description: Unrevokes the certificate by removing it from the CRL.
      operationId: UnrevokeCert
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRLEntries'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/crl/{refid}/export-crl:
    parameters:
      - in: path
        name: refid
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Download the CRL in X.509 format
      description: ""
      operationId: DownloadCRL
      responses:
        '200':
          description: ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/filterreload/reload:
    post:
      tags:
        - system
      summary: Initiate a manual filter reload
      description: ""
      operationId: DoFilterReload
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/filterreload/status:
    get:
      tags:
        - system
      summary: Get the status of an ongoing filter reload
      description: ""
      operationId: GetFilterReloadStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterReloadStatus'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/filterreload/sync:
    post:
      tags:
        - system
      summary: Initiate a manual filter sync
      description: ""
      operationId: DoFilterSync
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/firmware:
    get:
      tags:
        - system
      summary: Get the current system firmware version and the available upgrade version
      description: |
        Retrieve the system's current firmware version and determine if there is an upgradable
        firmware image available to install on the system.
      operationId: GetFirmware
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SysFirmwareInfo'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Upgrade the system firmware
      description: |
        Upgrade the system's firmware to the latest available version.
        The system should be rebooted after upgrading.
      operationId: UpgradeFirmware
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SysFirmwareUpgradeOpt'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/gateways:
    get:
      tags:
        - system
      summary: List gateways
      description: ""
      operationId: GetGateways
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateways'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Add new gateway
      description: ""
      operationId: AddGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gateway'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/gateways/group_priorities:
    get:
      tags:
        - system
      summary: Get the list of gateways and the priority labeling associated with it
      description: ""
      operationId: GetGatewayPriorities
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayPriorities'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/gateways/groups:
    get:
      tags:
        - system
      summary: Get gateway groups
      description: ""
      operationId: GetGatewayGroups
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayGroups'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - system
      summary: Add gateway group
      description: ""
      operationId: AddGatewayGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewayGroup'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayGroups'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/gateways/groups/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    delete:
      tags:
        - system
      summary: Delete gateway group by its entry index
      description: ""
      operationId: DeleteGatewayGroup
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayGroups'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Update gateway group
      description: ""
      operationId: UpdateGatewayGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewayGroup'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayGroups'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/gateways/status:
    get:
      tags:
        - system
      summary: List Gateway status
      description: ""
      operationId: GetGatewaysStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewaysStatus'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/gateways/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
        - system
      summary: Update gateway id
      description: ""
      operationId: SetGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gateway'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - system
      summary: Delete gateway
      description: ""
      operationId: DeleteGateway
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/highavail:
    get:
      tags:
        - system
      summary: Get high availability synchronization settings
      description: ""
      operationId: GetHASyncSettings
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HASyncOpts'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Update high avialable synchronization settings
      description: ""
      operationId: SetHASyncSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HASyncOpts'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HASyncOpts'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/initialsetup:
    get:
      tags:
        - system
      summary: Get initial setup
      description: ""
      operationId: GetInitialSetup
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialSetup'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/interfaces/status:
    get:
      tags:
        - system
      summary: Get the status of any configured interfaces.
      description: ""
      operationId: GetInterfacesStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceInfoList'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/logs:
    post:
      tags:
        - system
      summary: Set the logging configuration
      description: ""
      operationId: SetLogConfiguration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyslogConfiguration'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - system
      summary: Get system log configuration
      description: ""
      operationId: GetSyslogConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyslogConfiguration'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/logs/reset:
    post:
      tags:
        - system
      summary: Reset the local log files and reinitialize as empty files.
      description: ""
      operationId: ResetLogFiles
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/logs/{filename}:
    parameters:
      - in: path
        name: filename
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Get log file contents
      description: |
        Regular log files are returned as a list of records in StdLogs.Logs. For
        firewall logs (filename being "filter" or "firewall"), the log records
        are returned in StdLogs.filter_logs. If the query string "summary=true" is
        provided, then the firewall log summary is returned in StdLogs.filter_summary
        with dictionaries of each category with its tallied values.
      operationId: GetLogs
      parameters:
        - in: query
          name: start
          schema:
            type: string
        - in: query
          name: end
          schema:
            type: string
        - in: query
          name: summary
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StdLogs'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Log configuration for the component filename, if it supports it
      description: ""
      operationId: SetLogfileConfiguration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyslogConfigOverride'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/logs/{filename}/config:
    parameters:
      - in: path
        name: filename
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Retrieve the overriding log configuration for the component filename
      description: ""
      operationId: GetLogfileConfiguration
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyslogConfigOverride'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/monitoring:
    post:
      tags:
        - system
      summary: Get monitoring data for a given scope and dataset
      description: ""
      operationId: GetMonitoringData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitoringDataRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoringDataResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/monitoring/datasets:
    get:
      tags:
        - system
      summary: Get the available monitoring datasets
      description: ""
      operationId: GetMonitoringDatasets
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoringDatasets'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/package/available:
    get:
      tags:
        - system
      summary: Get list of available packages
      description: ""
      operationId: GetAvailPackages
      parameters:
        - in: query
          name: remote_check
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Packages'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/package/install:
    post:
      tags:
        - system
      summary: Install package(s)
      description: Install specified list of packages. If chunked=true, then the progress of the installation is returned as chunks.
      operationId: InstallPackages
      parameters:
        - in: query
          name: chunked
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallPackagesOpt'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallPackagesResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/package/installed:
    get:
      tags:
        - system
      summary: Get list of installed packages
      description: ""
      operationId: GetInstalledPackages
      parameters:
        - in: query
          name: remote_check
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Packages'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/package/name/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    delete:
      tags:
        - system
      summary: Uninstall the named package. Returns the progress of the removal. Use GetInstallProgress to track live progress.
      description: ""
      operationId: RemovePackage
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallPackagesResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/package/progress:
    get:
      tags:
        - system
      summary: Get install/reinstall/delete progress. If chunked=true, then the progress of the installation is returned as chunks.
      description: ""
      operationId: GetInstallProgress
      parameters:
        - in: query
          name: chunked
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallPackagesResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/package/reinstall:
    post:
      tags:
        - system
      summary: Reinstall package(s)
      description: Reinstall specified list of packages. If chunked=true, then the progress of the reinstallation is returned as chunks.
      operationId: ReinstallPackages
      parameters:
        - in: query
          name: chunked
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallPackagesOpt'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallPackagesResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/queue/stats:
    get:
      tags:
        - system
      summary: Get stats of traffic shaping queues
      description: ""
      operationId: GetQueueStats
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueStats'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/routes:
    get:
      tags:
        - system
      summary: Determine if there are any pending routing changes (dirty config)
      description: ""
      operationId: GetRoutesDirtyState
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesDirtyState'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Apply routing changes, if there are any
      description: ""
      operationId: ApplyRouteChanges
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutesApplyRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/routes/static:
    get:
      tags:
        - system
      summary: Get static routes
      description: ""
      operationId: GetStaticRoutes
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaticRoutes'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Set static route
      description: ""
      operationId: SetStaticRoute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StaticRoute'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaticRoutes'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/routes/static/{network}:
    parameters:
      - in: path
        name: network
        required: true
        schema:
          type: string
    delete:
      tags:
        - system
      summary: Delete route by network address
      description: The `network` address must be URL-safe, base64 encoded.
      operationId: DeleteRoute
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/routes/static/{network}/{gateway}:
    parameters:
      - in: path
        name: network
        required: true
        schema:
          type: string
      - in: path
        name: gateway
        required: true
        schema:
          type: string
    delete:
      tags:
        - system
      summary: Delete route by network address and gateway name
      description: The `network` address and `gateway` name must be URL-safe, base64 encoded.
      operationId: DeleteRouteWithGw
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/serviceproviders:
    get:
      tags:
        - system
      summary: Get all service providers
      description: ""
      operationId: GetServiceProviders
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProviders'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/serviceproviders/{country}:
    parameters:
      - in: path
        name: country
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Get Service Provider by Country
      description: ""
      operationId: GetServiceProvidersByCountry
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderCountry'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/serviceproviders/{country}/{provider}:
    parameters:
      - in: path
        name: country
        required: true
        schema:
          type: string
      - in: path
        name: provider
        required: true
        schema:
          type: string
    get:
      tags:
        - system
      summary: Get Service Provider by Provider
      description: ""
      operationId: GetServicePlansByProvider
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProvider'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/setup:
    get:
      tags:
        - system
      summary: Get Setup
      description: ""
      operationId: GetSetup
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupSettings'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Apply Setup
      description: ""
      operationId: SaveSetup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupSettings'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/setupwiz:
    get:
      tags:
        - system
      summary: Get setup wizard data
      description: ""
      operationId: GetSetupWizard
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupWizard'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Save setupwizard data
      description: ""
      operationId: SaveSetupWizard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupWizard'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/status:
    get:
      tags:
        - system
      summary: Get system status
      description: ""
      operationId: GetStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusSummary'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/status/ifstats:
    get:
      tags:
        - system
      summary: Get network interface stats
      description: ""
      operationId: GetIfStats
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IfStatsSummary'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/update:
    get:
      tags:
        - system
      summary: Get system update details
      description: ""
      operationId: GetSystemUpdateInfo
      parameters:
        - in: query
          name: refresh
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemUpdateInfo'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Perform system update
      description: ""
      operationId: PerformSystemUpdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemUpdateOptions'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemUpdateProgress'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/update/progress:
    get:
      tags:
        - system
      summary: Poll current update progress
      description: ""
      operationId: GetSystemUpdateProgress
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemUpdateProgress'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/update/settings:
    get:
      tags:
        - system
      summary: Get system update settings
      description: ""
      operationId: GetSystemUpdateSettings
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemUpdateSettings'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Set system update settings
      description: ""
      operationId: SetSystemUpdateSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemUpdateSettingsSet'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemUpdateSettings'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/users:
    get:
      tags:
        - system
      summary: Get users and groups
      description: ""
      operationId: GetUsersConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/users/authservers:
    get:
      tags:
        - system
      summary: Get auth servers
      description: ""
      operationId: GetAuthServerSettings
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthServers'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - system
      summary: Add auth server
      description: ""
      operationId: AddAuthServer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthServer'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthServers'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/users/authservers/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    post:
      tags:
        - system
      summary: Update auth server
      description: ""
      operationId: UpdateAuthServer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthServer'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthServers'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - system
      summary: Delete auth server. Deletion will fail if it is being referenced.
      description: ""
      operationId: DeleteAuthServer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/users/group:
    get:
      tags:
        - system
      summary: Get list of users
      description: ""
      operationId: GetUserGroups
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroups'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - system
      summary: Add group
      description: ""
      operationId: AddGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupAddReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroups'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/users/group/{groupname}:
    parameters:
      - in: path
        name: groupname
        required: true
        schema:
          type: string
    post:
      tags:
        - system
      summary: Update group
      description: ""
      operationId: UpdateGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdateReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroups'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - system
      summary: Delete a group
      description: ""
      operationId: DeleteGroup
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/users/privs:
    get:
      tags:
        - system
      summary: Get definitions of user privileges
      description: |
        In pfSense, the user privileges are applied to the user's login to the
        legacy user interface. When pfSense acts as a Multi-instance Management
        Controller, MIM privileges are defined by the group's name.
        
        When the Controller runs as a separate entity, group privileges are used
        as roles in Multi-instance management and define the entitlements of the
        user belonging to the group. Apart from the superuser (or admin) role,
        all roles can be made granular with read, modify and delete attributes.
        A role without these attributes is considered to be granted them all.
      operationId: ListUserPrivileges
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrivileges'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/users/settings:
    get:
      tags:
        - system
      summary: Get user authentication settings
      description: ""
      operationId: GetUserAuthSettings
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthSettings'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - system
      summary: Set user authentication settings
      description: ""
      operationId: SetUserAuthSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthSettingsReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthSettings'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/users/user:
    get:
      tags:
        - system
      summary: Get list of users
      description: ""
      operationId: GetUsers
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - system
      summary: Add user
      description: ""
      operationId: AddUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/users/user/{username}:
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
    post:
      tags:
        - system
      summary: Update user
      description: ""
      operationId: UpdateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - system
      summary: Delete a user
      description: ""
      operationId: DeleteUser
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/widgets/interfaces:
    get:
      tags:
        - system
      summary: Get Interfaces widget
      description: ""
      operationId: GetInterfacesWidgets
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceWidgets'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/widgets/interfacestats:
    get:
      tags:
        - system
      summary: Get Interface statistics widget
      description: ""
      operationId: GetInterfaceStatisticsWidget
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceStatisticsWidgetResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system/widgets/ipsec:
    get:
      tags:
        - system
      summary: Get IPSec widget
      description: ""
      operationId: GetIPSecWidget
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPSecWidget'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ui/features:
    get:
      tags:
        - ui
      summary: Get current state of UI components
      description: ""
      operationId: GetUIStates
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UIStates'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec:
    get:
      tags:
        - vpn
      summary: Get IPSec Phases
      description: ""
      operationId: GetIPSecPhases
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPSecPhaseList'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/advanced:
    get:
      tags:
        - vpn
      summary: Get IPSec Advanced Configuration
      description: ""
      operationId: GetIPSecConfig
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPSecConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - vpn
      summary: Update IPSec Config
      description: ""
      operationId: UpdateIPSecConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPSecConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/client:
    get:
      tags:
        - vpn
      summary: Get IPSec Client
      description: ""
      operationId: GetIPSecClient
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPSecClientConfig'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - vpn
      summary: Update IPSec Client
      description: ""
      operationId: SetIPSecClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPSecClient'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/connect:
    post:
      tags:
        - vpn
      summary: Connect IPSec Tunnel
      description: ""
      operationId: ConnectIPSec
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPSecConnectReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/disconnect:
    post:
      tags:
        - vpn
      summary: Disconnect IPSec Tunnel
      description: ""
      operationId: DisconnectIPSec
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPSecDisconnectReq'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/genpsk:
    get:
      tags:
        - vpn
      summary: Generate new Pre-Shared Key
      description: ""
      operationId: GetNewIPSecPSK
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPSecPSK'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/mobilekey:
    get:
      tags:
        - vpn
      summary: Get IPSec Mobile Keys
      description: ""
      operationId: GetIPSecMobileKeys
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPSecMobileKeys'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - vpn
      summary: Set IPSec Mobile Key
      description: ""
      operationId: SetIPSecMobileKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPSecMobileKey'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/mobilekey/{name}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    put:
      tags:
        - vpn
      summary: Update IPSec Mobile Key
      description: ""
      operationId: UpdateIPSecMobileKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPSecMobileKey'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - vpn
      summary: Delete IPSec Mobile Key
      description: ""
      operationId: DeleteIPSecMobileKey
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/phase1:
    post:
      tags:
        - vpn
      summary: Set IPSec Phase 1
      description: ""
      operationId: SetIPSecPhase1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phase1'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/phase1/{ikeid}:
    parameters:
      - in: path
        name: ikeid
        required: true
        schema:
          type: string
    put:
      tags:
        - vpn
      summary: Update IPSec Phase 1
      description: ""
      operationId: UpdateIPSecPhase1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phase1'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - vpn
      summary: Delete IPSec Phase 1
      description: ""
      operationId: DeleteIPSecPhase1
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/phase2:
    post:
      tags:
        - vpn
      summary: Add IPSec Phase 2
      description: ""
      operationId: SetIPSecPhase2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phase2'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/phase2/{reqid}:
    parameters:
      - in: path
        name: reqid
        required: true
        schema:
          type: string
    put:
      tags:
        - vpn
      summary: Set IPSec Phase 2
      description: ""
      operationId: UpdateIPSecPhase2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phase2'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - vpn
      summary: Delete IPSec Phase 2
      description: ""
      operationId: DeleteIPSecPhase2
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/ipsec/status:
    get:
      tags:
        - vpn
      summary: Get IPSec Status
      description: ""
      operationId: GetIPSecStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPSecStatusOverview'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/l2tp:
    get:
      tags:
        - vpn
      summary: List L2TP
      description: ""
      operationId: GetL2TP
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/L2TPSettings'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - vpn
      summary: Update L2TP
      description: ""
      operationId: UpdateL2TP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/L2TPConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/openvpn/clients:
    get:
      tags:
        - vpn
      summary: Get OpenVPN clients
      description: ""
      operationId: GetOpenVPNClients
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenVPNClients'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - vpn
      summary: Set OpenVPN client
      description: ""
      operationId: SetOpenVPNClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenVPNClientConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetOpenVPNClientResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/openvpn/clients/{vpnid}:
    parameters:
      - in: path
        name: vpnid
        required: true
        schema:
          type: string
    get:
      tags:
        - vpn
      summary: Get single OpenVPN client
      description: ""
      operationId: GetOpenVPNClient
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenVPNClient'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - vpn
      summary: Update OpenVPN client
      description: ""
      operationId: UpdateOpenVPNClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenVPNClientConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - vpn
      summary: Delete OpenVPN client
      description: ""
      operationId: DeleteOpenVPNClient
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/openvpn/clientso:
    get:
      tags:
        - vpn
      summary: Get OpenVPN Client Specific Overrides
      description: ""
      operationId: GetOpenVPNCSOs
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenVPNCSOs'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - vpn
      summary: Set OpenVPN Client Specific Overrides
      description: ""
      operationId: SetOpenVPNCSO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenVPNCSOConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetOpenVPNCSOResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/openvpn/clientso/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    get:
      tags:
        - vpn
      summary: Get single OpenVPN Client Specific Overrides
      description: ""
      operationId: GetOpenVPNCSO
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenVPNCSO'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - vpn
      summary: Update OpenVPN Client Specific Overrides
      description: ""
      operationId: UpdateOpenVPNCSO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenVPNCSOConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - vpn
      summary: Delete OpenVPN Client Specific Overrides
      description: ""
      operationId: DeleteOpenVPNCSO
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/openvpn/killclient:
    post:
      tags:
        - vpn
      summary: Kill a client by host, IP or client ID
      description: ""
      operationId: KillClientOpenVPN
      parameters:
        - in: query
          name: port
          schema:
            type: integer
        - in: query
          name: remipp
          schema:
            type: string
        - in: query
          name: clientid
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/openvpn/servers:
    get:
      tags:
        - vpn
      summary: Get OpenVPN servers
      description: ""
      operationId: GetOpenVPNServers
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenVPNServers'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - vpn
      summary: Set OpenVPN server
      description: ""
      operationId: SetOpenVPNServer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenVPNServerConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetOpenVPNServerResponse'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/openvpn/servers/{vpnid}:
    parameters:
      - in: path
        name: vpnid
        required: true
        schema:
          type: string
    get:
      tags:
        - vpn
      summary: Get single OpenVPN server
      description: ""
      operationId: GetOpenVPNServer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenVPNServer'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - vpn
      summary: Update OpenVPN server
      description: ""
      operationId: UpdateOpenVPNServer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenVPNServerConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - vpn
      summary: Delete OpenVPN server
      description: ""
      operationId: DeleteOpenVPNServer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/openvpn/status:
    get:
      tags:
        - vpn
      summary: Get OpenVPN Status
      description: ""
      operationId: GetOpenVPNStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenVPNStatus'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/wg:
    get:
      tags:
        - vpn
      summary: List WireGuard config
      description: ""
      operationId: GetWireGuard
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WireGuardSettings'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/wg/genkeys:
    get:
      tags:
        - vpn
      summary: Get a new pair of public/private keys
      description: ""
      operationId: GetNewWireGuardKeys
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WireGuardKeys'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/wg/peer:
    post:
      tags:
        - vpn
      summary: Set WireGuard Peer
      description: ""
      operationId: SetWireGuardPeer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WGPeer'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/wg/peer/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
        - vpn
      summary: Update WireGuard Peer
      description: ""
      operationId: UpdateWireGuardPeer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WGPeer'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - vpn
      summary: Delete WireGuard Peer
      description: ""
      operationId: DeleteWireGuardPeer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/wg/settings:
    post:
      tags:
        - vpn
      summary: Set WireGuard Settings
      description: ""
      operationId: SetWireGuardSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WGConfig'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/wg/status:
    get:
      tags:
        - vpn
      summary: Get Wireguard status
      description: ""
      operationId: GetWireGuardStatus
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WireGuardStatus'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/wg/tunnel:
    post:
      tags:
        - vpn
      summary: Set WireGuard Tunnel
      description: ""
      operationId: SetWireGuardTunnel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WGTunnel'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/wg/tunnel/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
        - vpn
      summary: Update WireGuard Tunnel
      description: ""
      operationId: UpdateWireGuardTunnel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WGTunnel'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - vpn
      summary: Delete WireGuard Tunnel
      description: ""
      operationId: DeleteWireGuardTunnel
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PfsenseResult'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /vpn/wg/tunnel/{id}/conf:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    get:
      tags:
        - vpn
      summary: Get Wireguard Tunnel Conf
      description: ""
      operationId: GetWireGuardTunnelConf
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WGTunnelConf'
        '400':
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ACBBackup:
      type: object
      required: [timestamp, reason]
      properties:
        timestamp:
          type: string
        reason:
          type: string
    ACBConfig:
      type: object
      description: |
        valid values:
        frequency = "cron", "every"
        reverse = "yes", "no"
      required: [encryption_password, enable, hint, frequency, minute, hour, month, day, dow, numman, reverse]
      properties:
        encryption_password:
          type: string
        enable:
          type: boolean
        hint:
          type: string
        frequency:
          type: string
        minute:
          type: string
        hour:
          type: string
        month:
          type: string
        day:
          type: string
        dow:
          type: string
        numman:
          type: string
        reverse:
          type: string
    ACBConfigInfo:
      type: object
      required: [config, userkey]
      properties:
        config:
          $ref: '#/components/schemas/ACBConfig'
        userkey:
          type: string
    ACBList:
      type: object
      properties:
        backups:
          type: array
          items:
            $ref: '#/components/schemas/ACBBackup'
    ACBManualBackupRequest:
      type: object
      properties:
        reason:
          type: string
    ACBRestoreRequest:
      type: object
      properties:
        timestamp:
          type: string
    ActivateBootenv:
      type: object
      required: [name, temp]
      properties:
        name:
          type: string
        temp:
          type: boolean
    AdvFirewall:
      type: object
      required: [adaptiveend, adaptivestart, aliasesresolveinterval, bogonsinterval, bypassstaticroutes, checkaliasesurlcert, disablefilter, disablenatreflection, disablenegate, disablereplyto, disablescrub, disablevpnrules, enablebinatreflection, enablenatreflectionhelper, enablenatreflectionpurenat, icmperrortimeout, icmpfirsttimeout, maximumfrags, maximumstates, maximumtableentries, maxmss, maxmss_enable, vpn_scrubenodf, vpn_fragment_reassemble, natreflection, no_apipa_block, optimization, otherfirsttimeout, othermultipletimeout, othersingletimeout, reflectiontimeout, scrubnodf, scrubrnid, sctpfirsttimeout, sctpopeningtimeout, sctpestablishedtimeout, sctpclosingtimeout, sctpclosedtimeout, tcpclosedtimeout, tcpclosingtimeout, tcpestablishedtimeout, tcpfinwaittimeout, tcpfirsttimeout, tcpopeningtimeout, tcptsdifftimeout, tftpinterface, udpfirsttimeout, udpmultipletimeout, udpsingletimeout]
      properties:
        adaptiveend:
          type: string
        adaptivestart:
          type: string
        aliasesresolveinterval:
          type: string
        bogonsinterval:
          type: string
        bypassstaticroutes:
          type: boolean
        checkaliasesurlcert:
          type: boolean
        disablefilter:
          type: boolean
        disablenatreflection:
          type: boolean
        disablenegate:
          type: boolean
        disablereplyto:
          type: boolean
        disablescrub:
          type: boolean
        disablevpnrules:
          type: boolean
        enablebinatreflection:
          type: boolean
        enablenatreflectionhelper:
          type: boolean
        enablenatreflectionpurenat:
          type: boolean
        icmperrortimeout:
          type: string
        icmpfirsttimeout:
          type: string
        maximumfrags:
          type: string
        maximumstates:
          type: string
        maximumtableentries:
          type: string
        maxmss:
          type: string
        maxmss_enable:
          type: boolean
        vpn_scrubenodf:
          type: boolean
        vpn_fragment_reassemble:
          type: boolean
        natreflection:
          type: string
        no_apipa_block:
          type: boolean
        optimization:
          type: string
        otherfirsttimeout:
          type: string
        othermultipletimeout:
          type: string
        othersingletimeout:
          type: string
        reflectiontimeout:
          type: string
        scrubnodf:
          type: boolean
        scrubrnid:
          type: boolean
        sctpfirsttimeout:
          type: string
        sctpopeningtimeout:
          type: string
        sctpestablishedtimeout:
          type: string
        sctpclosingtimeout:
          type: string
        sctpclosedtimeout:
          type: string
        tcpclosedtimeout:
          type: string
        tcpclosingtimeout:
          type: string
        tcpestablishedtimeout:
          type: string
        tcpfinwaittimeout:
          type: string
        tcpfirsttimeout:
          type: string
        tcpopeningtimeout:
          type: string
        tcptsdifftimeout:
          type: string
        tftpinterface:
          type: array
          items:
            type: string
        udpfirsttimeout:
          type: string
        udpmultipletimeout:
          type: string
        udpsingletimeout:
          type: string
    AdvFirewallSetting:
      type: object
      properties:
        firewall:
          $ref: '#/components/schemas/AdvFirewall'
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
    AdvMisc:
      type: object
      required: [available_kernel_memory, block_external_services, crypto_hardware, do_not_send_uniqueid, dpinger_dont_add_static_routes, gw_down_kill_states, harddiskstandby, hwpstate, hwpstate_control_level, hwpstate_epp, ipsec_mb, keep_failover_states, lb_use_sticky, mds, mds_disable, php_memory_limit, powerd_ac_mode, powerd_battery_mode, powerd_enable, powerd_normal_mode, proxypass, proxypass_confirm, proxyport, proxyurl, proxyuser, pti, pti_disabled, remove_failover_states_default, schedule_states, skip_rules_gw_down, srctrack, thermal_hardware, use_mfs_tmp_size, use_mfs_tmpvar, use_mfs_var_size, watchdogd_enable, watchdogd_timeout]
      properties:
        available_kernel_memory:
          type: integer
        block_external_services:
          type: boolean
        crypto_hardware:
          type: string
        do_not_send_uniqueid:
          type: boolean
        dpinger_dont_add_static_routes:
          type: boolean
        gw_down_kill_states:
          type: boolean
        harddiskstandby:
          type: string
        hwpstate:
          type: boolean
        hwpstate_control_level:
          type: string
        hwpstate_epp:
          type: integer
        ipsec_mb:
          type: boolean
        keep_failover_states:
          type: boolean
        lb_use_sticky:
          type: boolean
        mds:
          type: string
        mds_disable:
          type: string
        php_memory_limit:
          type: integer
        powerd_ac_mode:
          type: string
        powerd_battery_mode:
          type: string
        powerd_enable:
          type: boolean
        powerd_normal_mode:
          type: string
        proxypass:
          type: string
        proxypass_confirm:
          type: string
        proxyport:
          type: integer
        proxyurl:
          type: string
        proxyuser:
          type: string
        pti:
          type: string
        pti_disabled:
          type: boolean
        remove_failover_states_default:
          type: string
        schedule_states:
          type: boolean
        skip_rules_gw_down:
          type: boolean
        srctrack:
          type: string
        thermal_hardware:
          type: string
        use_mfs_tmp_size:
          type: integer
        use_mfs_tmpvar:
          type: boolean
        use_mfs_var_size:
          type: integer
        watchdogd_enable:
          type: boolean
        watchdogd_timeout:
          type: string
    AdvMiscSetting:
      type: object
      properties:
        misc:
          $ref: '#/components/schemas/AdvMisc'
    AdvNetworkSetting:
      type: object
      required: [disablechecksumoffloading, disablesegmentationoffloading, disablelargereceiveoffloading, dhcp6debug, dhcp6norelease, hnaltqenable, ignoreiscwarning, ip_change_kill_states, ipv6allow, ipv6dontcreatelocaldns, ipv6nat_enable, prefer_ipv4, sharednet, duid, global_v6duid, ipv6duiden_en, ipv6duiden_id, ipv6duidll, ipv6duidllt_ll, ipv6duidllt_time, ipv6duidtype, ipv6duiduuid, ipv6nat_ipaddr, dhcpbackend]
      properties:
        disablechecksumoffloading:
          type: boolean
        disablesegmentationoffloading:
          type: boolean
        disablelargereceiveoffloading:
          type: boolean
        dhcp6debug:
          type: boolean
        dhcp6norelease:
          type: boolean
        hnaltqenable:
          type: boolean
        ignoreiscwarning:
          type: boolean
        ip_change_kill_states:
          type: boolean
        ipv6allow:
          type: boolean
        ipv6dontcreatelocaldns:
          type: boolean
        ipv6nat_enable:
          type: boolean
        prefer_ipv4:
          type: boolean
        sharednet:
          type: boolean
        duid:
          type: string
        global_v6duid:
          type: string
        ipv6duiden_en:
          type: string
        ipv6duiden_id:
          type: string
        ipv6duidll:
          type: string
        ipv6duidllt_ll:
          type: string
        ipv6duidllt_time:
          type: string
        ipv6duidtype:
          type: string
        ipv6duiduuid:
          type: string
        ipv6nat_ipaddr:
          type: string
        dhcpbackend:
          type: string
    AdvNetworking:
      type: object
      properties:
        networking:
          $ref: '#/components/schemas/AdvNetworkSetting'
    AdvNotificationSetting:
      type: object
      required: [cert_enable_notify, disablebeep, disable_smtp, enable_pushover, enable_telegram, smtpssl, sslvalidate, api, certexpiredays, chatid, pushoverapikey, pushoverexpire, pushoverpriority, pushoverretry, pushoversound, pushoveruserkey, smtpauthmech, smtpfromaddress, smtpipaddress, smtpnotifyemailaddress, smtppassword, smtppassword_confirm, smtpport, smtptimeout, smtpusername, save, test_smtp, test_telegram, test_pushover, revoked_cert_ignore_notify, enable_slack, slack_api, slack_channel]
      properties:
        cert_enable_notify:
          type: boolean
        disablebeep:
          type: boolean
        disable_smtp:
          type: boolean
        enable_pushover:
          type: boolean
        enable_telegram:
          type: boolean
        smtpssl:
          type: boolean
        sslvalidate:
          type: boolean
        api:
          type: string
        certexpiredays:
          type: integer
        chatid:
          type: string
        pushoverapikey:
          type: string
        pushoverexpire:
          type: integer
        pushoverpriority:
          type: string
        pushoverretry:
          type: integer
        pushoversound:
          type: string
        pushoveruserkey:
          type: string
        smtpauthmech:
          type: string
        smtpfromaddress:
          type: string
        smtpipaddress:
          type: string
        smtpnotifyemailaddress:
          type: string
        smtppassword:
          type: string
        smtppassword_confirm:
          type: string
        smtpport:
          type: string
        smtptimeout:
          type: integer
        smtpusername:
          type: string
        save:
          type: boolean
        test_smtp:
          type: boolean
        test_telegram:
          type: boolean
        test_pushover:
          type: boolean
        revoked_cert_ignore_notify:
          type: boolean
        enable_slack:
          type: boolean
        slack_api:
          type: string
        slack_channel:
          type: string
    AdvNotifications:
      type: object
      properties:
        notifications:
          $ref: '#/components/schemas/AdvNotificationSetting'
    AllSoftwarePackages:
      type: object
      description: |
        Example:
        
        {
          "software_packages": {
            "plus": {
              "24.03": {
                "packages": [
                  { "name": "snort", "category": "security", "local_version": "1.0.1", "avail_version": "1.0.2" },
                  ...
                ]
              }
            },
            "free": {
              "2.8.0": {
                "packages": [
                  { "name": "tinyproxy", "category": "net", "local_version": "1.1", "avail_version": "1.1" },
                  ...
                ]
              }
            }
          }
        }
      properties:
        software_packages:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OSSoftwarePackages'
    AllowedHost:
      type: object
      required: [hostname, sn, descr, dir, bw_up, bw_down]
      properties:
        hostname:
          type: string
        sn:
          type: string
        descr:
          type: string
        dir:
          type: string
        bw_up:
          type: string
        bw_down:
          type: string
    AllowedIP:
      type: object
      required: [ip, sn, descr, dir, bw_up, bw_down]
      properties:
        ip:
          type: string
        sn:
          type: string
        descr:
          type: string
        dir:
          type: string
        bw_up:
          type: string
        bw_down:
          type: string
    ApplyDirtyConfigRequest:
      type: object
      properties:
        apply:
          type: boolean
    ArpTableEntry:
      type: object
      required: [ip, mac, interface, expires, type, dnsresolve]
      properties:
        ip:
          type: string
        mac:
          type: string
        interface:
          type: string
        expires:
          type: string
        type:
          type: string
        dnsresolve:
          type: string
    AuthServer:
      type: object
      properties:
        ldap:
          $ref: '#/components/schemas/LdapAuthServer'
        radius:
          $ref: '#/components/schemas/RadiusAuthServer'
    AuthServers:
      type: object
      required: [active_type, active_name, local]
      properties:
        active_type:
          type: string
        active_name:
          type: string
        ldap:
          type: array
          items:
            $ref: '#/components/schemas/LdapAuthServer'
        radius:
          type: array
          items:
            $ref: '#/components/schemas/RadiusAuthServer'
        local:
          $ref: '#/components/schemas/LocalServer'
    AuthServersList:
      type: object
      required: [svrlist, authtype]
      properties:
        svrlist:
          type: array
          items:
            type: string
        authtype:
          type: string
    AuthTestCredentials:
      type: object
      required: [authtype, username, password]
      properties:
        authtype:
          type: string
        username:
          type: string
        password:
          type: string
    AuthTestResult:
      type: object
      properties:
        authenticated:
          type: boolean
    BootEnvs:
      type: object
      properties:
        envs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Bootenv'
    Bootenv:
      type: object
      required: [creation_nice, used_nice, version, name, mounted, activate_title, dataset, prior, creation, usedrefreserv, used, upgrading, active, nextboot, activate_icon, lastbooted_nice, usedsnap, descr, failed, referenced, mountpoint, bootonce, origin, useds, protect]
      properties:
        creation_nice:
          type: string
        used_nice:
          type: integer
        version:
          type: string
        name:
          type: string
        mounted:
          type: string
        activate_title:
          type: string
        dataset:
          type: string
        prior:
          type: string
        creation:
          type: string
        usedrefreserv:
          type: string
        used:
          type: string
        upgrading:
          type: boolean
        active:
          type: boolean
        nextboot:
          type: boolean
        activate_icon:
          type: string
        lastbooted_nice:
          type: string
        usedsnap:
          type: string
        descr:
          type: string
        failed:
          type: boolean
        referenced:
          type: string
        mountpoint:
          type: string
        bootonce:
          type: boolean
        origin:
          type: string
        useds:
          type: string
        protect:
          type: boolean
    BridgeCapableInterface:
      type: object
      required: [if_identity, if_assigned_name]
      properties:
        if_identity:
          type: string
        if_assigned_name:
          type: string
    BridgeInterface:
      type: object
      required: [members, enablestp, descr, proto, ip6linklocal, ifpriority, ifpathcost, static, private, stp, span, edge, autoedge, ptp, autoptp, bridgeif_device]
      properties:
        members:
          type: array
          items:
            type: string
            description: (array of interface identity) member interfaces
        enablestp:
          type: boolean
          description: enable RSTP/STP
        descr:
          type: string
          description: description
        maxaddr:
          type: integer
          description: cache size of the bridge address, default is 2000 entries
        timeout:
          type: integer
          description: cache expire time, default is 1200 seconds
        maxage:
          type: integer
          description: |
            the time that a Spanning Tree Protocol configuration is valid
            default is 20 seconds, minimum is 6 seconds and maximum is 40 seconds
        fwdelay:
          type: integer
          description: |
            the time that must pass before an interface begins forwarding packets when spanning tree is enabled
            default is 15 seconds, minimum is 4 seconds and maximum is 30 seconds
        hellotime:
          type: integer
          description: |
            the time in seconds between broadcasting of STP configuration messages
            default is 2 seconds, minimum is 1 second and maximum is 2 seconds
        priority:
          type: integer
          description: |
            the bridge priority for spanning tree
            default is 32768, minimum is 0 and maximum is 61440
        proto:
          type: string
          description: |
            protocol used for spanning tree
            valid value = "rstp" or "stp"
        holdcnt:
          type: integer
          description: |
            the transmit hold count for spanning tree
            default is 6, minimum is 1 and maximum is 10
        ip6linklocal:
          type: boolean
          description: enable IPv6 auto linklocal
        ifpriority:
          type: object
          additionalProperties:
            type: integer
            description: |
              the spanning tree priority of interface
              default is 128, minimum is 0 and maximum is 240, increments of 16
              (map of interface identity to priority e.g. {"ifpriority":{"lan":128,"opt1":128}})
        ifpathcost:
          type: object
          additionalProperties:
            type: integer
            description: |
              the spanning tree path cost of interface, default is calculated from the link speed,
              to change a previously selected path cost back to automatic, set the cost to 0
              minimum is 1 and maximum is 200000000
              (map of interface identity to cost e.g. {"ifpathcost":{"lan":20000,"opt1":2000}})
        static:
          type: array
          items:
            type: string
            description: |
              (array of interface identity) mark an interface as a "sticky" interface
        private:
          type: array
          items:
            type: string
            description: |
              (array of interface identity) mark an interface as a "private" interface
        stp:
          type: array
          items:
            type: string
            description: (array of interface identity) enable STP on interface
        span:
          type: array
          items:
            type: string
            description: |
              (array of interface identity) set interface as a span port
              span interface cannot be part of the bridge member interfaces
        edge:
          type: array
          items:
            type: string
            description: (array of interface identity) set interface as an edge port
        autoedge:
          type: array
          items:
            type: string
            description: |
              (array of interface identity) allow interface to automatically detect edge status
              this will disable the autoedge status of interfaces
        ptp:
          type: array
          items:
            type: string
            description: (array of interface identity) set the interface as a point-to-point link
        autoptp:
          type: array
          items:
            type: string
            description: |
              (array of interface identity) automatically detect the point-to-point status on interface
              interfaces supplied here will be removed from default autoedge status
        bridgeif_device:
          type: string
          description: generated by system when a Bridge is created
    BridgeInterfaces:
      type: object
      required: [interfaces, bridge_capable_ifs]
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/BridgeInterface'
        bridge_capable_ifs:
          type: array
          items:
            $ref: '#/components/schemas/BridgeCapableInterface'
    CARPResetDemotionResult:
      type: object
      properties:
        carp_detected_problems:
          type: integer
    CARPStatus:
      type: object
      required: [enabled, maintenancemode_enabled]
      properties:
        enabled:
          type: boolean
        maintenancemode_enabled:
          type: boolean
        vips:
          type: array
          items:
            $ref: '#/components/schemas/CARPVIPStatus'
    CARPVIPStatus:
      type: object
      required: [interface, virtual_ip, mode, peer, description, status]
      properties:
        interface:
          type: string
        virtual_ip:
          type: string
        virtual_aliases:
          type: array
          items:
            type: string
        mode:
          type: string
        peer:
          type: string
        description:
          type: string
        status:
          type: string
    CRLCert:
      type: object
      required: [refid, ca_refid, descr, type, cert, privkey, serial, reason, revoke_time]
      properties:
        refid:
          type: string
        ca_refid:
          type: string
        descr:
          type: string
        type:
          type: string
        cert:
          type: string
        privkey:
          type: string
        serial:
          type: integer
        reason:
          type: string
        revoke_time:
          type: integer
    CRLConfig:
      type: object
      required: [refid, ca_refid, descr, method, serial, lifetime, internal, inuse, is_ovpn_crl, text, pkgs]
      properties:
        refid:
          type: string
        ca_refid:
          type: string
        descr:
          type: string
        method:
          type: string
        serial:
          type: integer
        lifetime:
          type: integer
        internal:
          type: boolean
        inuse:
          type: boolean
        is_ovpn_crl:
          type: boolean
        text:
          type: string
        cert:
          type: array
          items:
            $ref: '#/components/schemas/CRLCert'
        pkgs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CRLPackageInfo'
    CRLEntries:
      type: object
      properties:
        crls:
          type: array
          items:
            $ref: '#/components/schemas/CRLConfig'
        refid:
          type: string
          description: for new and update CRL functions, the refid of the CRL that was changed
    CRLMethodInternalUpdate:
      type: object
      required: [lifetime, serial, revoke_reason, revoke_serials, revoke_certref]
      properties:
        lifetime:
          type: integer
        serial:
          type: integer
        revoke_reason:
          type: string
          enum: ['nostatus', 'unspecified', 'keycompromise', 'cacompromise', 'affilchange', 'superseded', 'cessation', 'certhold', 'privwithdrawn']
        revoke_serials:
          type: array
          items:
            type: integer
        revoke_certref:
          type: array
          items:
            type: string
    CRLMethodNew:
      type: object
      required: [lifetime, serial]
      properties:
        lifetime:
          type: integer
          description: lifetime days
        serial:
          type: integer
    CRLMethodX509:
      type: object
      properties:
        crl:
          type: string
          description: x509 CRL
    CRLPackageInfo:
      type: object
      properties:
        used_by:
          type: array
          items:
            type: string
        count:
          type: integer
    CaCertMethodExisting:
      type: object
      description: Existing PEM certificate and key, either in PEM format or base64-encoded
      required: [cert, private_key, next_serial]
      properties:
        cert:
          type: string
        private_key:
          type: string
        next_serial:
          type: integer
    CaCertMethodNew:
      type: object
      description: |
        Options for creating/updating an internal CA certificate.
        The values for internal and intermediate certificates are the same,
        with the exception that the intermediate certificate is signed by
        a CA referenced by caref.
        For key type, size and options, query /system/certopts for the
        supported values.
        
        - key_type:     RSA or ECDSA
        - key_size:     size of key in bits (RSA)
        - key_opt:      curve types (historically ecname)
        - digest_alg:   hash algorithm for signing
        - lifetime:     days to expire
        - cn:           common name
        - country_code: 2-character country code
        - state:        state or province
        - city:         city
        - org:          organization, business name
        - ou:           organization unit
        - caref:        signing CA reference ID
      required: [key_type, key_size, key_opt, digest_alg, lifetime, cn, country_code, state, city, org, ou, caref]
      properties:
        key_type:
          type: string
        key_size:
          type: integer
        key_opt:
          type: string
        digest_alg:
          type: string
        lifetime:
          type: integer
        cn:
          type: string
        country_code:
          type: string
        state:
          type: string
        city:
          type: string
        org:
          type: string
        ou:
          type: string
        caref:
          type: string
    CaptiveElement:
      type: object
      required: [name, size, nocontent]
      properties:
        name:
          type: string
        size:
          type: string
        nocontent:
          type: string
    CaptivePortalConfig:
      type: object
      required: [zone, zoneid, descr, localauth_priv, interface, maxproc, maxprocperip, timeout, idletime, trafficquota, freelogins_count, freelogins_resettimeout, freelogins_updatetimeouts, logoutwin_enable, enable, auth_method, auth_server, auth_server2, radmac_secret, radmac_fallback, radiussession_timeout, radiustraffic_quota, radiusperuserbw, radacct_enable, radacct_server, reverseacct, includeidletime, reauthenticate, preservedb, reauthenticateacct, httpslogin, httpsname, preauthurl, blockedmacsurl, certref, nohttpsforwards, nomacfilter, redirurl, passthrumacadd, radmac_format, radiusnasid, customlogo, custombg, customhtml, termsconditions, page, noconcurrentlogins, peruserbw, bwdefaultdn, bwdefaultup]
      properties:
        zone:
          type: string
        zoneid:
          type: string
        descr:
          type: string
        localauth_priv:
          type: boolean
        interface:
          type: string
        maxproc:
          type: string
        maxprocperip:
          type: string
        timeout:
          type: string
        idletime:
          type: string
        trafficquota:
          type: string
        freelogins_count:
          type: string
        freelogins_resettimeout:
          type: string
        freelogins_updatetimeouts:
          type: boolean
        logoutwin_enable:
          type: boolean
        enable:
          type: boolean
        auth_method:
          type: string
        auth_server:
          type: string
        auth_server2:
          type: string
        radmac_secret:
          type: string
        radmac_fallback:
          type: boolean
        radiussession_timeout:
          type: boolean
        radiustraffic_quota:
          type: boolean
        radiusperuserbw:
          type: boolean
        radacct_enable:
          type: boolean
        radacct_server:
          type: string
        reverseacct:
          type: boolean
        includeidletime:
          type: boolean
        reauthenticate:
          type: boolean
        preservedb:
          type: boolean
        reauthenticateacct:
          type: string
        httpslogin:
          type: boolean
        httpsname:
          type: string
        preauthurl:
          type: string
        blockedmacsurl:
          type: string
        certref:
          type: string
        nohttpsforwards:
          type: boolean
        nomacfilter:
          type: boolean
        redirurl:
          type: string
        passthrumacadd:
          type: boolean
        radmac_format:
          type: string
        radiusnasid:
          type: string
        customlogo:
          type: boolean
        custombg:
          type: boolean
        customhtml:
          type: boolean
        termsconditions:
          type: string
        page:
          type: string
        noconcurrentlogins:
          type: string
        peruserbw:
          type: boolean
        bwdefaultdn:
          type: string
        bwdefaultup:
          type: string
        passthrumac:
          type: array
          items:
            $ref: '#/components/schemas/PassthruMac'
        allowedip:
          type: array
          items:
            $ref: '#/components/schemas/AllowedIP'
        allowedhostname:
          type: array
          items:
            $ref: '#/components/schemas/AllowedHost'
        element:
          type: array
          items:
            $ref: '#/components/schemas/CaptiveElement'
    CaptivePortalConfigReq:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/CaptivePortalConfig'
    CaptivePortalDisconnectRequest:
      type: object
      required: [all, session_id]
      properties:
        all:
          type: boolean
        session_id:
          type: string
    CaptivePortalInfo:
      type: object
      required: [config, vouch]
      properties:
        config:
          $ref: '#/components/schemas/CaptivePortalConfig'
        interfaces:
          type: array
          items:
            type: string
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/ServiceCertificate'
        vouch:
          $ref: '#/components/schemas/Voucher'
    CaptivePortalName:
      type: object
      required: [zone, interface, descr, users]
      properties:
        zone:
          type: string
        interface:
          type: string
        descr:
          type: string
        users:
          type: integer
    CaptivePortalStatus:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/CaptivePortalUserInfo'
    CaptivePortalUserInfo:
      type: object
      required: [ip_address, mac_address, mac_manufacturer, username, session_id, session_start_unix, session_duration_seconds, session_remaining_seconds, idle_time_seconds, bytes_sent, bytes_received, packets_sent, packets_received, last_activity, zone]
      properties:
        ip_address:
          type: string
        mac_address:
          type: string
        mac_manufacturer:
          type: string
        username:
          type: string
        session_id:
          type: string
        session_start_unix:
          type: integer
        session_duration_seconds:
          type: integer
        session_remaining_seconds:
          type: integer
        idle_time_seconds:
          type: integer
        bytes_sent:
          type: integer
        bytes_received:
          type: integer
        packets_sent:
          type: integer
        packets_received:
          type: integer
        last_activity:
          type: integer
        zone:
          type: string
    CaptivePortals:
      type: object
      properties:
        config:
          type: array
          items:
            $ref: '#/components/schemas/CaptivePortalName'
    CertAltName:
      type: object
      description: |
        Alternative name specifies a type and a value:
        - type:    fqdn, ip, uri, or email
        - value:   string that applies to the type
      required: [type, value]
      properties:
        type:
          type: string
        value:
          type: string
    CertAuthorities:
      type: object
      properties:
        cas:
          type: array
          items:
            $ref: '#/components/schemas/CertAuthority'
    CertAuthority:
      type: object
      required: [name, refid, internal, issuer, certificates, inuse, trust, randomize_serial, next_serial, info]
      properties:
        name:
          type: string
        refid:
          type: string
        internal:
          type: boolean
        issuer:
          type: string
        certificates:
          type: integer
        inuse:
          type: array
          items:
            type: string
        trust:
          type: boolean
        randomize_serial:
          type: boolean
        next_serial:
          type: integer
        info:
          $ref: '#/components/schemas/CertInfo'
    CertConfig:
      type: object
      properties:
        cert:
          $ref: '#/components/schemas/CertificateDetailed'
    CertInfo:
      type: object
      required: [issuer, serial, sig_digest, key_usage, key_type, key_size, dn, hash, subject_key_id, auth_key_id, valid_from, expires, raw_data]
      properties:
        issuer:
          type: string
        serial:
          type: string
        sig_digest:
          type: string
        key_usage:
          type: string
        key_type:
          type: string
        key_size:
          type: integer
        dn:
          type: string
        hash:
          type: string
        subject_key_id:
          type: string
        auth_key_id:
          type: string
        valid_from:
          type: string
        expires:
          type: string
        raw_data:
          type: string
        private_key:
          type: string
    CertKeyExportOpts:
      type: object
      properties:
        password:
          type: string
          description: pass-phrase to protect certificate
    CertMethodExistingPEM:
      type: object
      description: Existing PEM certificate and key, either in PEM/pkcs12 format or base64-encoded
      required: [cert, private_key]
      properties:
        cert:
          type: string
        private_key:
          type: string
    CertMethodExistingPkcs12:
      type: object
      description: |
        Existing PKCS12 certificate and key; the PKCS12 payload
        is to be sent as a file upload part in a multi-part request, otherwise
        it can be included as pkcs12_b64 directly within this structure.
      required: [password, intermediates]
      properties:
        password:
          type: string
        intermediates:
          type: boolean
        pkcs12_b64:
          type: string
    CertMethodNew:
      type: object
      description: |
        Options for creating/updating an internal certificate.
        For key type, size and options, query /system/certopts for the
        supported values.
        
        - caref:        CA (refid) to sign cert
        - key_type:     RSA or ECDSA
        - key_size:     size of key in bits (RSA)
        - key_opt:      curve types (historically ecname)
        - digest_alg:   hash algorithm for signing
        - lifetime:     days to expire
        - cn:           common name
        - country_code: 2-character country code
        - state:        state or province
        - city:         city
        - org:          organization, business name
        - ou:           organization unit
        - server_cert   true for server cert, false for user cert
      required: [caref, key_type, key_size, key_opt, digest_alg, lifetime, cn, country_code, state, city, org, ou, server_cert, alt_names]
      properties:
        caref:
          type: string
        key_type:
          type: string
        key_size:
          type: integer
        key_opt:
          type: string
        digest_alg:
          type: string
        lifetime:
          type: integer
        cn:
          type: string
        country_code:
          type: string
        state:
          type: string
        city:
          type: string
        org:
          type: string
        ou:
          type: string
        server_cert:
          type: boolean
        alt_names:
          type: array
          items:
            $ref: '#/components/schemas/CertAltName'
    CertMethodSignCSR:
      type: object
      description: |
        Sign a certificate signing request with the selected CA.
        An existing csr_refid or new CSR (base64 encoded "csr") must be provided.
      required: [caref, csr_refid, csr, lifetime, digest_alg, server_cert, alt_names]
      properties:
        caref:
          type: string
        csr_refid:
          type: string
        csr:
          type: string
        priv_key:
          type: string
        lifetime:
          type: integer
        digest_alg:
          type: string
        server_cert:
          type: boolean
        alt_names:
          type: array
          items:
            $ref: '#/components/schemas/CertAltName'
    CertMethodSigningRequest:
      type: object
      required: [key_type, key_size, key_opt, digest_alg, cn, country_code, state, city, org, ou, server_cert, alt_names]
      properties:
        key_type:
          type: string
        key_size:
          type: integer
        key_opt:
          type: string
        digest_alg:
          type: string
        cn:
          type: string
        country_code:
          type: string
        state:
          type: string
        city:
          type: string
        org:
          type: string
        ou:
          type: string
        server_cert:
          type: boolean
        alt_names:
          type: array
          items:
            $ref: '#/components/schemas/CertAltName'
    CertOpts:
      type: object
      required: [key_type, key_size, key_opt, digest]
      properties:
        key_type:
          type: array
          items:
            type: string
        key_size:
          type: array
          items:
            type: integer
        key_opt:
          type: array
          items:
            type: string
        digest:
          type: array
          items:
            type: string
    CertPkcs12ExportOpts:
      type: object
      required: [password, add_certauths, encryption]
      properties:
        password:
          type: string
          description: pass-phrase to protect pkcs12 file
        add_certauths:
          type: boolean
          description: add cert authorities to pkcs12 store
        encryption:
          type: string
          description: encryption level (high, low, legacy)
          enum: ['high', 'low', 'legacy']
    CertificateDetailed:
      type: object
      required: [refid, descr, crt, csr, caref, cadata, ends, inuse, issuer, prv, starts, subj, type, name, dn, info, can_renew]
      properties:
        refid:
          type: string
        descr:
          type: string
        crt:
          type: string
        csr:
          type: string
        caref:
          type: string
        cadata:
          type: string
        ends:
          type: string
        inuse:
          type: string
        issuer:
          type: string
        prv:
          type: string
        starts:
          type: string
        subj:
          type: string
        type:
          type: string
        name:
          type: string
        dn:
          type: string
        info:
          $ref: '#/components/schemas/CertInfo'
        can_renew:
          type: boolean
    CertsConfig:
      type: object
      properties:
        certs:
          type: array
          items:
            $ref: '#/components/schemas/CertificateDetailed'
    CheckIPService:
      type: object
      required: [enable, name, url, username, password, verifysslpeer, curl_proxy, descr]
      properties:
        enable:
          type: boolean
        name:
          type: string
        url:
          type: string
        username:
          type: string
        password:
          type: string
        verifysslpeer:
          type: boolean
        curl_proxy:
          type: boolean
        descr:
          type: string
    ConsoleClient:
      type: object
      required: [addr, type, time]
      properties:
        addr:
          type: string
        type:
          type: string
        time:
          type: integer
    ConsoleClients:
      type: object
      properties:
        clients:
          type: array
          items:
            $ref: '#/components/schemas/ConsoleClient'
    ControlledDevice:
      type: object
      description: Parameters for adding the device
      required: [name, alias, device_type, address, address6, primary_auth, auth, state]
      properties:
        name:
          type: string
        alias:
          type: string
        device_id:
          type: string
        device_type:
          type: string
        tags:
          type: array
          items:
            type: string
            description: custom tags assigned by user
        address:
          type: string
        address6:
          type: string
        primary_auth:
          type: string
        auth:
          $ref: '#/components/schemas/ControlledDeviceAuth'
        state:
          type: string
          description: |
            current device state: active, error, offline, rebooting, pending (pending auth)
        device_cert:
          type: string
          description: recorded value of device certificate
        device_key:
          type: string
          description: public key of device
        device_info:
          $ref: '#/components/schemas/ControlledDeviceInfo'
    ControlledDeviceAuth:
      type: object
      required: [vpn_pubkey, vpn_address, vpn_listenaddr]
      properties:
        vpn_pubkey:
          type: string
          description: MIM public key of device
        vpn_address:
          type: string
          description: IPv6 VPN address of device
        vpn_listenaddr:
          type: string
          description: |
            Listening addresses of device's VPN service
        cert:
          type: string
          description: certificate
    ControlledDeviceCert:
      type: object
      required: [name, key, cert, ca_cert]
      properties:
        name:
          type: string
        key:
          type: string
        cert:
          type: string
        ca_cert:
          type: string
    ControlledDeviceCertOptions:
      type: object
      required: [organization, country, province, locality, street_addr, postal_code, ip_addresses, expiry_days]
      properties:
        organization:
          type: string
        country:
          type: string
        province:
          type: string
        locality:
          type: string
        street_addr:
          type: string
        postal_code:
          type: string
        ip_addresses:
          type: array
          items:
            type: string
        expiry_days:
          type: integer
    ControlledDeviceCerts:
      type: object
      properties:
        certs:
          type: array
          items:
            $ref: '#/components/schemas/ControlledDeviceCert'
    ControlledDeviceDetailed:
      type: object
      description: Detailed information about the controlled device
      required: [name, alias, device_id, device_key, address, address6, primary_auth, auth, mim_depth, mim_devices, state, sys_info]
      properties:
        name:
          type: string
        alias:
          type: string
        device_id:
          type: string
        device_type:
          type: string
          description: defeault pfsense
        device_key:
          type: string
          description: public key of device
        tags:
          type: array
          items:
            type: string
            description: custom tags assigned by user
        address:
          type: string
        address6:
          type: string
        primary_auth:
          type: string
        auth:
          $ref: '#/components/schemas/ControlledDeviceAuth'
        controller:
          $ref: '#/components/schemas/DeviceControllerInfo'
        mim_depth:
          type: integer
          description: how many hops to reach device. 0 = this sytem, 1 = direct hop, etc
        mim_devices:
          type: integer
          description: if this device is a controller, how many devices are being managed by it
        state:
          type: string
          description: |
            current device state: active, error, offline, rebooting, pending (pending auth)
        device_cert:
          type: string
          description: recorded value of device certificate
        sys_info:
          $ref: '#/components/schemas/ControlledDeviceInfo'
    ControlledDeviceInfo:
      type: object
      description: Additional information about the device
      required: [hostname, uptime, product, product_version, product_build, os_name, os_version, cpu, memory, model, vendor, serial, hw_uuid]
      properties:
        hostname:
          type: string
        uptime:
          type: integer
          description: number of seconds since the device started
        network_ports:
          type: array
          items:
            $ref: '#/components/schemas/DeviceNetworkPort'
        services:
          type: array
          items:
            $ref: '#/components/schemas/DeviceServiceBasic'
        product:
          type: string
          description: eg pfsense
        product_version:
          type: string
          description: eg 24.08
        product_build:
          type: string
        os_name:
          type: string
        os_version:
          type: string
        cpu:
          type: string
        memory:
          type: integer
        model:
          type: string
        vendor:
          type: string
        serial:
          type: string
        hw_uuid:
          type: string
    ControlledDevices:
      type: object
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/ControlledDeviceDetailed'
    ControllerAlarm:
      type: object
      properties:
        count:
          type: integer
        messages:
          type: array
          items:
            type: string
    ControllerAlarms:
      type: object
      properties:
        alarms:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ControllerAlarm'
    ControllerBackup:
      type: object
      required: [time, id, label, description]
      properties:
        time:
          type: integer
        id:
          type: string
        label:
          type: string
        description:
          type: string
        acb_id:
          type: string
          format: byte
    ControllerBackupRequest:
      type: object
      properties:
        label:
          type: string
        description:
          type: string
        auto_backup:
          type: boolean
        acb_password:
          type: string
    ControllerBackupRestoreRequest:
      type: object
      properties:
        reason:
          type: string
    ControllerBackupRestoreResult:
      type: object
      properties:
        messages:
          type: string
          format: byte
    ControllerBackupResult:
      type: object
      required: [time, id, label, description, messages]
      properties:
        time:
          type: integer
        id:
          type: string
        label:
          type: string
        description:
          type: string
        acb_id:
          type: string
          format: byte
        messages:
          type: string
          format: byte
    ControllerBackups:
      type: object
      properties:
        backups:
          type: array
          items:
            $ref: '#/components/schemas/ControllerBackup'
    ControllerDescrip:
      type: object
      required: [build, api_version, host, host_os, pubkey, tls_pubkey, tls_key_id, mim_vpn_addr, stats]
      properties:
        build:
          type: string
        api_version:
          type: string
        host:
          type: string
        host_os:
          type: object
          additionalProperties:
            type: string
            description: host operating system, various details
        pubkey:
          type: string
        tls_pubkey:
          type: string
          description: pulibc key of TLS certificate
        tls_key_id:
          type: string
          description: TLS certificate key ID
        public_addresses:
          type: array
          items:
            type: string
        mim_vpn_addr:
          type: string
          description: multi-instance managment VPN address
        stats:
          $ref: '#/components/schemas/ControllerStats'
    ControllerIdentity:
      type: object
      required: [name, key, cert, vpn_listenaddr, vpn_address, vpn_pubkey, vpn_netkey, vpn_prefix]
      properties:
        name:
          type: string
        key:
          type: string
        cert:
          type: string
        vpn_listenaddr:
          type: string
        vpn_address:
          type: string
        vpn_pubkey:
          type: string
        vpn_netkey:
          type: string
        vpn_prefix:
          type: string
        oldkey:
          type: string
        regentokens:
          type: boolean
    ControllerInfo:
      type: object
      required: [name, key, cert, vpn_listenaddr, vpn_address, vpn_pubkey, vpn_netkey, vpn_prefix, device_pubkey, device_vpn]
      properties:
        name:
          type: string
        key:
          type: string
        cert:
          type: string
        vpn_listenaddr:
          type: string
        vpn_address:
          type: string
        vpn_pubkey:
          type: string
        vpn_netkey:
          type: string
        vpn_prefix:
          type: string
        tag:
          type: string
        noise_secret:
          type: string
        device_pubkey:
          type: string
        device_vpn:
          $ref: '#/components/schemas/DeviceVpn'
    ControllerServiceAction:
      type: object
      properties:
        action:
          type: string
          description: Action to carry out [restart, reload, stop]
    ControllerStats:
      type: object
      required: [uptime, started, mem_total, mem_used, cpu_load, admin_logins, systems_total, systems_online, systems_failed, mesh]
      properties:
        uptime:
          type: integer
          description: uptime in seconds
        started:
          type: integer
          description: time controller was started/restarted
        mem_total:
          type: integer
          description: host physical memory in bytes
        mem_used:
          type: integer
          description: controller current memory usage
        storage:
          type: array
          items:
            $ref: '#/components/schemas/StorageStats'
        cpu_load:
          type: array
          items:
            type: integer
            description: percentage CPU load used by controller
        admin_logins:
          type: integer
          description: number of logged in admins
        systems_total:
          type: integer
          description: total number of systems being managed
        systems_online:
          type: integer
          description: number of systems that are online
        systems_failed:
          type: integer
          description: number of systems in failure/error state
        mesh:
          $ref: '#/components/schemas/MeshStats'
    ControllerSummary:
      type: object
      description: |
        Information provided to the remote device on how to connect to the
        controller using Netgard.
      required: [mode_active, name, key, vpn_pubkey, vpn_listenaddr, vpn_address, vpn_prefix, vpn_netkey]
      properties:
        mode_active:
          type: boolean
        name:
          type: string
        key:
          type: string
        vpn_pubkey:
          type: string
        vpn_listenaddr:
          type: string
        vpn_address:
          type: string
        vpn_prefix:
          type: string
        vpn_netkey:
          type: string
    ControllerUpgradeInfo:
      type: object
      required: [current_version, new_version, changes]
      properties:
        current_version:
          type: string
        new_version:
          type: string
        changes:
          type: string
          format: byte
    ControllerUpgradeRequest:
      type: object
      required: [version, restart]
      properties:
        version:
          type: string
        restart:
          type: boolean
    ControllerUpgradeResult:
      type: object
      required: [active_version, previous_version, restart_time, messages]
      properties:
        active_version:
          type: string
        previous_version:
          type: string
        restart_time:
          type: integer
        messages:
          type: string
          format: byte
    ControllersList:
      type: object
      required: [device_pubkey, controllers]
      properties:
        device_pubkey:
          type: string
        controllers:
          type: array
          items:
            $ref: '#/components/schemas/ControllerInfo'
    CreateBootenv:
      type: object
      required: [name, descr, from, protect]
      properties:
        name:
          type: string
        descr:
          type: string
        from:
          type: string
        protect:
          type: boolean
    CreateControlledDeviceCert:
      type: object
      properties:
        name:
          type: string
        key:
          type: string
        cert:
          type: string
        ca_cert:
          type: string
        options:
          $ref: '#/components/schemas/ControlledDeviceCertOptions'
    CreateUPnPACL:
      type: object
      properties:
        permuser:
          type: string
    DHCPLease:
      type: object
      required: [host, lifetime, ip, mac, cltt, state, start, end, iaid, duid]
      properties:
        host:
          type: string
        lifetime:
          type: integer
        ip:
          type: string
        mac:
          type: string
        cltt:
          type: string
        state:
          type: string
        start:
          type: string
        end:
          type: string
        iaid:
          type: integer
        duid:
          type: string
    DHCPLeases:
      type: object
      properties:
        v4leases:
          type: array
          items:
            $ref: '#/components/schemas/DHCPLease'
        v6leases:
          type: array
          items:
            $ref: '#/components/schemas/DHCPLease'
        prefixes:
          type: array
          items:
            $ref: '#/components/schemas/DHCPLease'
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/LeaseInterface'
    DNSACL:
      type: object
      required: [aclid, aclname, aclaction, description]
      properties:
        aclid:
          type: string
        aclname:
          type: string
        aclaction:
          type: string
        description:
          type: string
        row:
          type: array
          items:
            $ref: '#/components/schemas/DNSACLNetwork'
    DNSACLNetwork:
      type: object
      required: [acl_network, mask, description]
      properties:
        acl_network:
          type: string
        mask:
          type: string
        description:
          type: string
    DNSForwarderAlias:
      type: object
      required: [host, domain, description]
      properties:
        host:
          type: string
        domain:
          type: string
        description:
          type: string
    DNSForwarderConfig:
      type: object
      required: [enable, regdhcp, regdhcpstatic, dhcpfirst, strict_order, domain_needed, no_private_reverse, port, interface, strictbind, custom_options]
      properties:
        enable:
          type: boolean
        regdhcp:
          type: boolean
        regdhcpstatic:
          type: boolean
        dhcpfirst:
          type: boolean
        strict_order:
          type: boolean
        domain_needed:
          type: boolean
        no_private_reverse:
          type: boolean
        port:
          type: string
        interface:
          type: string
        strictbind:
          type: boolean
        custom_options:
          type: string
          format: byte
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/DNSForwarderHost'
        domainoverrides:
          type: array
          items:
            $ref: '#/components/schemas/DNSForwarderDomain'
    DNSForwarderConfigInfo:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/DNSForwarderConfig'
        interfaces:
          type: array
          items:
            type: string
    DNSForwarderDomain:
      type: object
      required: [domain, ip, descr, idx]
      properties:
        domain:
          type: string
        ip:
          type: string
        descr:
          type: string
        idx:
          type: integer
    DNSForwarderHost:
      type: object
      required: [host, domain, ip, descr]
      properties:
        host:
          type: string
        domain:
          type: string
        ip:
          type: string
        descr:
          type: string
        aliases:
          type: array
          items:
            $ref: '#/components/schemas/DNSForwarderAlias'
    DNSForwarderUpdateReq:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/DNSForwarderConfig'
    DNSResolverConfig:
      type: object
      required: [enable, dnssec, custom_options, hideidentity, hideversion, dnssecstripped, qname_minimisation, qname_minimisation_strict, prefetch, prefetchkey, dnsrecordcache, aggressivensec, msgcachesize, outgoing_num_tcp, incoming_num_tcp, edns_buffer_size, num_queries_per_thread, jostle_timeout, cache_max_ttl, cache_min_ttl, infra_host_ttl, infra_cache_numhosts, unwanted_reply_threshold, log_verbosity, disable_auto_added_access_control, disable_auto_added_host_entries, use_caps, dns64, dns64prefix, dns64netbits, port, sslport, sslcertref, system_domain_local_zone_type, regdhcp, enablessl, python, python_order, python_script, forwarding, forward_tls_upstream, regdhcpstatic, regovpnclients]
      properties:
        enable:
          type: boolean
        dnssec:
          type: boolean
        active_interface:
          type: array
          items:
            type: string
        outgoing_interface:
          type: array
          items:
            type: string
        custom_options:
          type: string
          format: byte
        hideidentity:
          type: boolean
        hideversion:
          type: boolean
        dnssecstripped:
          type: boolean
        qname_minimisation:
          type: boolean
        qname_minimisation_strict:
          type: boolean
        prefetch:
          type: boolean
        prefetchkey:
          type: boolean
        dnsrecordcache:
          type: boolean
        aggressivensec:
          type: boolean
        msgcachesize:
          type: string
        outgoing_num_tcp:
          type: string
        incoming_num_tcp:
          type: string
        edns_buffer_size:
          type: string
        num_queries_per_thread:
          type: string
        jostle_timeout:
          type: string
        cache_max_ttl:
          type: string
        cache_min_ttl:
          type: string
        infra_host_ttl:
          type: string
        infra_cache_numhosts:
          type: string
        unwanted_reply_threshold:
          type: string
        log_verbosity:
          type: string
        disable_auto_added_access_control:
          type: boolean
        disable_auto_added_host_entries:
          type: boolean
        use_caps:
          type: boolean
        dns64:
          type: boolean
        dns64prefix:
          type: string
        dns64netbits:
          type: string
        port:
          type: integer
        sslport:
          type: integer
        sslcertref:
          type: string
        system_domain_local_zone_type:
          type: string
        regdhcp:
          type: boolean
        enablessl:
          type: boolean
        python:
          type: boolean
        python_order:
          type: string
        python_script:
          type: string
        forwarding:
          type: boolean
        forward_tls_upstream:
          type: boolean
        regdhcpstatic:
          type: boolean
        regovpnclients:
          type: boolean
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/DNSForwarderHost'
        domainoverrides:
          type: array
          items:
            $ref: '#/components/schemas/DNSForwarderDomain'
        acls:
          type: array
          items:
            $ref: '#/components/schemas/DNSACL'
    DNSResolverConfigInfo:
      type: object
      required: [config, interfaces]
      properties:
        config:
          $ref: '#/components/schemas/DNSResolverConfig'
        interfaces:
          type: object
          additionalProperties:
            type: string
        certs:
          type: array
          items:
            $ref: '#/components/schemas/ServiceCertificate'
        scripts:
          type: array
          items:
            type: string
    DNSResolverStatus:
      type: object
      properties:
        speed:
          type: array
          items:
            $ref: '#/components/schemas/DNSResolverStatusSpeed'
        stats:
          type: array
          items:
            $ref: '#/components/schemas/DNSResolverStatusStats'
    DNSResolverStatusSpeed:
      type: object
      required: [server, zone, ttl, expired, ping, var, rtt, rto, timeout_a, timeout_aaaa, timeout_other]
      properties:
        server:
          type: string
        zone:
          type: string
        ttl:
          type: integer
        expired:
          type: boolean
        ping:
          type: integer
        var:
          type: integer
        rtt:
          type: integer
        rto:
          type: integer
        timeout_a:
          type: integer
        timeout_aaaa:
          type: integer
        timeout_other:
          type: integer
    DNSResolverStatusStats:
      type: object
      required: [server, zone, expired, edns_lame_known, edns_version, probe_delay, lame_dnssec, lame_rec, lame_a, lame_other]
      properties:
        server:
          type: string
        zone:
          type: string
        expired:
          type: boolean
        edns_lame_known:
          type: integer
        edns_version:
          type: integer
        probe_delay:
          type: integer
        lame_dnssec:
          type: integer
        lame_rec:
          type: integer
        lame_a:
          type: integer
        lame_other:
          type: integer
    DNSResolverUpdateReq:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/DNSResolverConfig'
    DeleteBootenvs:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
        name:
          type: string
    DeleteControlledDeviceCertRequest:
      type: object
      properties:
        name:
          type: string
    DeleteFirewallRule:
      type: object
      properties:
        id:
          type: string
    DeviceBasicInfo:
      type: object
      required: [name, device_id, device_type, os_type, os_version, address]
      properties:
        name:
          type: string
        device_id:
          type: string
        device_type:
          type: string
        os_type:
          type: string
        os_version:
          type: string
        address:
          type: string
    DeviceControllerInfo:
      type: object
      description: brief information about the controller managing the device
      required: [pubkey, vpn_ep_address, vpn_addr]
      properties:
        pubkey:
          type: string
          description: base64 encoded public key of the controller
        vpn_ep_address:
          type: string
          description: list of MIM VPN listening addresses of the controller
        vpn_addr:
          type: string
          description: MIM vpn address
    DeviceIdentity:
      type: object
      description: |
        Fields:
        * name:            name of device
        * alias:           another alias for the device
        * type:            device type
        * pubkey:          public key identity of device
        * address:         device's API URL, e.g. https://0.0.0.0:8443
        * vpn_pubkey:      VPN public key
        * vpn_address:     MIM VPN address
        * vpn_prefix:      MIM VPN address subnet
        * vpn_netkey:      MIM VPN netkey
        * vpn_listenaddr:  MIM listening address:port
        * devinfo:         summary of device information
        * tags:            Optional tags assigned to device
        
        * controller_add:  curl command that can be used to add the device to the controller.
      required: [name, alias, device_type, type, pubkey, address, vpn_pubkey, vpn_address, vpn_prefix, vpn_netkey, vpn_listenaddr, tags]
      properties:
        name:
          type: string
          description: name of device
        alias:
          type: string
          description: another alias for the device
        device_type:
          type: string
          description: device type, eg pfsense
        type:
          type: string
          description: alias to device_type
        pubkey:
          type: string
          description: public key identity of device
        address:
          type: string
          description: |
            device's API URL, e.g. https://0.0.0.0:8443
        vpn_pubkey:
          type: string
          description: VPN public key
        vpn_address:
          type: string
          description: MIM VPN address
        vpn_prefix:
          type: string
          description: MIM VPN address subnet
        vpn_netkey:
          type: string
          description: MIM VPN netkey
        vpn_listenaddr:
          type: string
          description: |
            MIM listening address:port
        tags:
          type: array
          items:
            type: string
            description: Optional tags assigned to device
        devinfo:
          $ref: '#/components/schemas/ControlledDeviceInfo'
        controller_add:
          type: string
          description: API command that can be used to add the device to the controller
    DeviceNetworkPort:
      type: object
      description: network interface on the device
      required: [name, identity, device, assigned, link_speed, phy_speed, state, vlan, device_info, is_physical, label]
      properties:
        name:
          type: string
          description: device name of the device
        identity:
          type: string
          description: interface identity, e.g. wan, lan, opt1
        device:
          type: string
          description: device driver name, e..g vtnet1
        assigned:
          type: string
          description: user assigned name of the device, WAN, LAN, LANOPT
        link_speed:
          type: integer
          description: bps speed negotiated
        phy_speed:
          type: integer
          description: bps max speed of port
        state:
          type: string
          description: on, off, error
        vlan:
          type: integer
          description: vlan number, if VLAN
        device_info:
          type: string
          description: device hardware, model name
        is_physical:
          type: boolean
          description: device is a physical port
        addresses:
          type: array
          items:
            type: string
            description: list of addresses configured on the interface
        label:
          type: string
          description: description (user-defined name) of device
    DevicePkgInstallRequest:
      type: object
      properties:
        device_ids:
          type: array
          items:
            type: string
    DevicePkgInstallResult:
      type: object
      required: [device_id, previous_version, active_version, install_messages, result]
      properties:
        device_id:
          type: string
        previous_version:
          type: string
        active_version:
          type: string
        install_messages:
          type: string
          format: byte
        result:
          type: string
    DevicePkgInstallResults:
      type: object
      properties:
        devices:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DevicePkgInstallResult'
    DevicePkgUninstallResult:
      type: object
      required: [device_id, uninstall_messages, result]
      properties:
        device_id:
          type: string
        uninstall_messages:
          type: string
          format: byte
        result:
          type: string
    DevicePkgUninstallResults:
      type: object
      properties:
        devices:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DevicePkgUninstallResult'
    DevicePublicKeyOption:
      type: object
      properties:
        keytype:
          type: string
        privkey:
          type: string
        pubkey:
          type: string
    DeviceServiceBasic:
      type: object
      required: [type, name, enabled]
      properties:
        type:
          type: string
        name:
          type: string
        enabled:
          type: boolean
    DeviceTagOption:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        devices:
          type: array
          items:
            type: string
        action:
          type: string
    DeviceVpn:
      type: object
      description: 'The device''s VPN settings'
      required: [vpn_listenaddr, vpn_address, vpn_pubkey, vpn_netkey, vpn_prefix, vpn_state, vpn_conn_start, vpn_conn_stop, vpn_conn_attempt]
      properties:
        vpn_listenaddr:
          type: string
        vpn_address:
          type: string
        vpn_pubkey:
          type: string
        vpn_netkey:
          type: string
        vpn_prefix:
          type: string
        vpn_state:
          type: string
        vpn_conn_start:
          type: integer
        vpn_conn_stop:
          type: integer
        vpn_conn_attempt:
          type: integer
    Dhcp6AdvancedOptions:
      type: object
      required: [duid, client_id, dhcp6_pfxdel_len, prefix_selected_interface, ifreq_information_only_enable, send_options, request_options, enable_override_options, override_options, config_file_override_path]
      properties:
        duid:
          type: string
        client_id:
          type: string
        dhcp6_pfxdel_len:
          type: integer
          description: delegated prefix length
        prefix_selected_interface:
          type: string
        ifreq_information_only_enable:
          type: boolean
        send_options:
          type: string
        request_options:
          type: string
        enable_override_options:
          type: boolean
        override_options:
          type: string
        config_file_override_path:
          type: string
    DhcpAddressPool:
      type: object
      required: [id, deny_unknown_clients, description, address_pool_range_from, address_pool_range_to, gateway, domain_name, tftp_server, ldap_server_uri, network_booting, subnet, subnet_range_from, subnet_range_to]
      properties:
        id:
          type: string
        deny_unknown_clients:
          type: string
        description:
          type: string
        address_pool_range_from:
          type: string
        address_pool_range_to:
          type: string
        wins_servers:
          type: array
          items:
            type: string
        dns_servers:
          type: array
          items:
            type: string
        gateway:
          type: string
        domain_name:
          type: string
        domain_search_list:
          type: array
          items:
            type: string
        mac_allow:
          type: array
          items:
            type: string
        mac_deny:
          type: array
          items:
            type: string
        ntp_servers:
          type: array
          items:
            type: string
        tftp_server:
          type: string
        ldap_server_uri:
          type: string
        network_booting:
          $ref: '#/components/schemas/DhcpNetworkBooting'
        subnet:
          type: string
        subnet_range_from:
          type: string
        subnet_range_to:
          type: string
    DhcpAddressPools:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/DhcpAddressPool'
    DhcpAdvancedOptions:
      type: object
      required: [req_timeout, req_retry, req_select_timeout, req_restart, req_backoff_cutoff, req_initial_interval, send_options, request_options, required_options, option_modifiers, enable_override_options, override_options, config_file_override_path]
      properties:
        req_timeout:
          type: string
          description: protocol timeout
        req_retry:
          type: string
          description: try again duration
        req_select_timeout:
          type: string
          description: offer selection timeout when multiple are received
        req_restart:
          type: string
          description: time before requiring new lease
        req_backoff_cutoff:
          type: string
          description: backoff algorithm duration
        req_initial_interval:
          type: string
          description: interval between initial requests
        send_options:
          type: string
          description: options to send to DHCP server
        request_options:
          type: string
          description: options wanting from DHCP server
        required_options:
          type: string
          description: options that must be received in the offer to be accepted
        option_modifiers:
          type: string
          description: modify options from offer received
        enable_override_options:
          type: boolean
        override_options:
          type: string
          description: override options received
        config_file_override_path:
          type: string
    DhcpGlobalSettings:
      type: object
      required: [backend, radvd_debug, dhcp6_debug, address_release, ipv6_duid_type, ipv6_duid_raw, ipv6_duid_llt_time, ipv6_duid_llt_ll, ipv6_duid_en_en, ipv6_duid_en_id, ipv6_duid_ll, ipv6_duid_uuid]
      properties:
        backend:
          type: string
        radvd_debug:
          type: boolean
        dhcp6_debug:
          type: boolean
        address_release:
          type: boolean
        ipv6_duid_type:
          type: string
          description: |
            A DHCPv6 Unique Identifier (DUID) is used by the firewall when requesting an IPv6 address.
            
            By default, the firewall automatically creates a dynamic DUID-LLT which is not saved
            in the firewall configuration. To ensure that the same DUID is retained by the firewall
            at all times, enter a DUID in this section. The new DUID will take effect after a
            reboot or when the WAN interface(s) are reconfigured by the firewall.
            
            If the firewall is configured to use a RAM disk for state (such as /var), the best
            practice is to store a DUID here; otherwise, the DUID will change on each reboot.
            
            When setting the config, if duid type is 0/raw and no value for ipv6_duid_raw is provided,
            then the DUID will be removed from the firewall configuration.
          format: str
          enum: ['0', '1', '2', '3', '4', 'raw', 'llt', 'en', 'll', 'uuid']
        ipv6_duid_raw:
          type: string
        ipv6_duid_llt_time:
          type: string
        ipv6_duid_llt_ll:
          type: string
        ipv6_duid_en_en:
          type: string
        ipv6_duid_en_id:
          type: string
        ipv6_duid_ll:
          type: string
        ipv6_duid_uuid:
          type: string
    DhcpHighAvailabilityAdvanceConfig:
      type: object
      properties:
        heartbeat_delay:
          type: integer
        max_response_delay:
          type: integer
        max_ack_delay:
          type: integer
        max_unacked_clients:
          type: integer
        max_rejected_updates:
          type: integer
    DhcpHighAvailabilityConfig:
      type: object
      description: High-availability configuration for Kea DHCP service.
      required: [enable, role, local_name, local_address, remote_name, remote_address, advance_options, enable_tls, tls_server_cert_refid, enable_mutual_tls, mutual_client_cert_refid]
      properties:
        enable:
          type: boolean
        role:
          type: string
          description: primary or standby
        local_name:
          type: string
        local_address:
          type: string
          description: |
            address:port
        remote_name:
          type: string
        remote_address:
          type: string
          description: |
            address:port
        advance_options:
          $ref: '#/components/schemas/DhcpHighAvailabilityAdvanceConfig'
        enable_tls:
          type: boolean
        tls_server_cert_refid:
          type: string
        enable_mutual_tls:
          type: boolean
        mutual_client_cert_refid:
          type: string
        available_tls_server_certs:
          type: array
          items:
            type: string
        available_mutual_client_certs:
          type: array
          items:
            type: string
    DhcpInterfaceConfig:
      type: object
      required: [if_ident, if_assigned_name, enabled, deny_unknown_clients, ignore_client_identifiers, dns_reg, early_dns_reg, address_pool_range_from, address_pool_range_to, gateway, domain_name, default_lease_time, maximum_lease_time, tftp_server, ldap_server_uri, network_booting, subnet, subnet_range_from, subnet_range_to, backend]
      properties:
        if_ident:
          type: string
        if_assigned_name:
          type: string
        enabled:
          type: boolean
        deny_unknown_clients:
          type: string
        ignore_client_identifiers:
          type: boolean
        dns_reg:
          type: string
        early_dns_reg:
          type: string
        address_pool_range_from:
          type: string
        address_pool_range_to:
          type: string
        wins_servers:
          type: array
          items:
            type: string
        dns_servers:
          type: array
          items:
            type: string
        additional_pools:
          type: array
          items:
            $ref: '#/components/schemas/DhcpAddressPool'
        gateway:
          type: string
        domain_name:
          type: string
        domain_search_list:
          type: array
          items:
            type: string
        default_lease_time:
          type: integer
        maximum_lease_time:
          type: integer
        mac_allow:
          type: array
          items:
            type: string
        mac_deny:
          type: array
          items:
            type: string
        ntp_servers:
          type: array
          items:
            type: string
        tftp_server:
          type: string
        ldap_server_uri:
          type: string
        network_booting:
          $ref: '#/components/schemas/DhcpNetworkBooting'
        static_mappings:
          type: array
          items:
            $ref: '#/components/schemas/DhcpStaticMapping'
        static_mappings_v6:
          type: array
          items:
            $ref: '#/components/schemas/Dhcpv6StaticMapping'
        subnet:
          type: string
        subnet_range_from:
          type: string
        subnet_range_to:
          type: string
        backend:
          type: string
    DhcpInterfaces:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/InterfaceLabelToName'
    DhcpLeaseIp:
      type: object
      properties:
        ip:
          type: string
    DhcpNetworkBooting:
      type: object
      required: [enable, next_server, default_bios_name, uefi_32_filename, uefi_64_filename, arm_32_filename, arm_64_filename, uefi_http_boot_url, root_path, bootfile_url]
      properties:
        enable:
          type: boolean
        next_server:
          type: string
        default_bios_name:
          type: string
        uefi_32_filename:
          type: string
        uefi_64_filename:
          type: string
        arm_32_filename:
          type: string
        arm_64_filename:
          type: string
        uefi_http_boot_url:
          type: string
        root_path:
          type: string
        bootfile_url:
          type: string
    DhcpRange:
      type: object
      required: [from, to]
      properties:
        from:
          type: string
        to:
          type: string
    DhcpRelayConfig:
      type: object
      required: [enable, carp_status_vip, append_circuit_agent_ids]
      properties:
        enable:
          type: boolean
        interfaces:
          type: array
          items:
            type: string
        carp_status_vip:
          type: string
        append_circuit_agent_ids:
          type: boolean
        upstream_servers:
          type: array
          items:
            type: string
    DhcpRelayToggle:
      type: object
      properties:
        enable:
          type: boolean
    DhcpServiceConfig:
      type: object
      description: Per IP version DHCP service setting
      required: [dns_reg, early_dns_reg]
      properties:
        high_availability:
          $ref: '#/components/schemas/DhcpHighAvailabilityConfig'
        dns_reg:
          type: boolean
        early_dns_reg:
          type: boolean
        interfaces:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DhcpInterfaceConfig'
    DhcpStaticMapping:
      type: object
      required: [id, early_dns_reg]
      properties:
        id:
          type: string
        mac_address:
          type: string
        client_identifier:
          type: string
        ip_address:
          type: string
        arp_table_static_entry:
          type: boolean
        hostname:
          type: string
        description:
          type: string
        early_dns_reg:
          type: string
        wins_servers:
          type: array
          items:
            type: string
        dns_servers:
          type: array
          items:
            type: string
        gateway:
          type: string
        domain_name:
          type: string
        domain_search_list:
          type: array
          items:
            type: string
        ntp_servers:
          type: array
          items:
            type: string
        tftp_server:
          type: string
        ldap_server_uri:
          type: string
        network_booting:
          $ref: '#/components/schemas/DhcpNetworkBooting'
        duid:
          type: string
        ipv6_address:
          type: string
        filename:
          type: string
        rootpath:
          type: string
    DhcpStaticMappings:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/DhcpStaticMapping'
        entriesv6:
          type: array
          items:
            $ref: '#/components/schemas/Dhcpv6StaticMapping'
    Dhcpd:
      type: object
      properties:
        lan:
          $ref: '#/components/schemas/DhcpdLan'
    DhcpdConfig:
      type: object
      properties:
        service:
          $ref: '#/components/schemas/DhcpGlobalSettings'
        dhcpd:
          $ref: '#/components/schemas/DhcpServiceConfig'
        dhcpdv6:
          $ref: '#/components/schemas/DhcpServiceConfig'
    DhcpdLan:
      type: object
      required: [text, enable, range]
      properties:
        text:
          type: string
        enable:
          type: string
        range:
          $ref: '#/components/schemas/DhcpRange'
    Dhcpv6StaticMapping:
      type: object
      required: [id, backend, duid, ipv6_address, hostname, description, early_dns_reg]
      properties:
        id:
          type: string
        backend:
          type: string
        duid:
          type: string
        ipv6_address:
          type: string
        hostname:
          type: string
        description:
          type: string
        early_dns_reg:
          type: string
    DiagActivity:
      type: object
      properties:
        activity:
          type: string
          format: byte
    DiagArpTable:
      type: object
      properties:
        arp:
          type: array
          items:
            $ref: '#/components/schemas/ArpTableEntry'
    DiagAuthServerList:
      type: object
      required: [servers, authtype]
      properties:
        servers:
          type: array
          items:
            type: string
        authtype:
          type: string
    DiagAuthTestRequest:
      type: object
      required: [authtype, username, password]
      properties:
        authtype:
          type: string
        username:
          type: string
          format: byte
        password:
          type: string
          format: byte
    DiagAuthTestResult:
      type: object
      required: [authtype, groups, authenticated]
      properties:
        authtype:
          type: string
        groups:
          type: array
          items:
            type: string
        authenticated:
          type: boolean
    DiagBackupDiff:
      type: object
      properties:
        diff:
          type: string
    DiagBackupInfo:
      type: object
      required: [time, desc, size, vers]
      properties:
        time:
          type: integer
        desc:
          type: string
        size:
          type: integer
        vers:
          type: string
    DiagBackupRequest:
      type: object
      required: [area, nopkg, norrd, enc, pwd, filename, contents]
      properties:
        area:
          type: string
        nopkg:
          type: boolean
        norrd:
          type: boolean
        enc:
          type: boolean
        pwd:
          type: string
        filename:
          type: string
        contents:
          type: string
    DiagCommandResult:
      type: object
      properties:
        response:
          type: string
    DiagDnsLookupResult:
      type: object
      required: [results, timings]
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/DiagDnsRecord'
        timings:
          type: array
          items:
            $ref: '#/components/schemas/DiagDnsServerTiming'
    DiagDnsRecord:
      type: object
      required: [type, data]
      properties:
        type:
          type: string
        data:
          type: string
    DiagDnsServerTiming:
      type: object
      required: [server, time]
      properties:
        server:
          type: string
        time:
          type: string
    DiagLimiters:
      type: object
      properties:
        limiters:
          $ref: '#/components/schemas/LimiterInfo'
    DiagPhpCommand:
      type: object
      properties:
        cmd:
          type: string
          format: byte
    DiagPingRequest:
      type: object
      required: [host, count]
      properties:
        host:
          type: string
        count:
          type: integer
    DiagPingResponse:
      type: object
      properties:
        results:
          type: string
    DiagPriorBackupInfo:
      type: object
      properties:
        backups:
          type: array
          items:
            $ref: '#/components/schemas/DiagBackupInfo'
    DiagRestorePriorBackupRequst:
      type: object
      properties:
        time:
          type: integer
    DiagRoutes:
      type: object
      required: [ipv4, ipv6]
      properties:
        ipv4:
          type: array
          items:
            $ref: '#/components/schemas/RouteRecord'
        ipv6:
          type: array
          items:
            $ref: '#/components/schemas/RouteRecord'
    DiagShellCommand:
      type: object
      properties:
        cmd:
          type: string
          format: byte
    DiagSocketStats:
      type: object
      properties:
        sockets:
          $ref: '#/components/schemas/OsSocketList'
    DiagState:
      type: object
      required: [interface, proto, src, dst, display, state, packet, bytes]
      properties:
        interface:
          type: string
        proto:
          type: string
        src:
          type: string
        dst:
          type: string
        display:
          type: string
        state:
          type: string
        packet:
          type: string
        bytes:
          type: string
    DiagStates:
      type: object
      required: [states, interfaces]
      properties:
        states:
          type: array
          items:
            $ref: '#/components/schemas/DiagState'
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
    DiagUploadRequest:
      type: object
      required: [filename, contents]
      properties:
        filename:
          type: string
        contents:
          type: string
          format: byte
    DiagUploadResult:
      type: object
      required: [result, location]
      properties:
        result:
          type: string
        location:
          type: string
    Dimm:
      type: object
      required: [slot, size, type]
      properties:
        slot:
          type: string
        size:
          type: integer
        type:
          type: string
    DirtySubsystem:
      type: object
      required: [name, descr]
      properties:
        name:
          type: string
        descr:
          type: string
        file:
          type: string
    DirtySubsystems:
      type: object
      required: [dirty_subsystems, all_subsystems]
      properties:
        dirty_subsystems:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DirtySubsystem'
        all_subsystems:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DirtySubsystem'
    Disks:
      type: object
      properties:
        disks:
          type: array
          items:
            $ref: '#/components/schemas/SysinfoFs'
    DnsAliasRequest:
      type: object
      required: [aliasname, address]
      properties:
        aliasname:
          type: string
        address:
          type: string
    DynDNSConfig:
      type: object
      required: [enable, type, username, password, host, domainname, mx, wildcard, verboselog, curl_ipresolve_v4, curl_ssl_verifypeer, curl_proxy, maxcacheage, interface, zoneid, ttl, updateurl, resultmatch, requestif, proxied, descr, id, status, ipv4, ipv6]
      properties:
        enable:
          type: boolean
        type:
          type: string
        username:
          type: string
        password:
          type: string
        host:
          type: string
        domainname:
          type: string
        mx:
          type: string
        wildcard:
          type: boolean
        verboselog:
          type: boolean
        curl_ipresolve_v4:
          type: boolean
        curl_ssl_verifypeer:
          type: boolean
        curl_proxy:
          type: boolean
        maxcacheage:
          type: string
        interface:
          type: string
        zoneid:
          type: string
        ttl:
          type: string
        updateurl:
          type: string
        resultmatch:
          type: string
        requestif:
          type: string
        proxied:
          type: boolean
        descr:
          type: string
        id:
          type: string
        status:
          type: string
        ipv4:
          type: string
        ipv6:
          type: string
    DynDNSConfigInfo:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/DynDNSConfigs'
        interfaces:
          type: array
          items:
            type: string
    DynDNSConfigs:
      type: object
      properties:
        dyndnses:
          type: array
          items:
            $ref: '#/components/schemas/DynDNSConfig'
        dnsupdate:
          type: array
          items:
            $ref: '#/components/schemas/RFCItem'
        checkipservice:
          type: array
          items:
            $ref: '#/components/schemas/CheckIPService'
    DynDNSUpdateReq:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/DynDNSConfigs'
    EditFileData:
      type: object
      required: [fname, contents]
      properties:
        fname:
          type: string
          format: byte
        contents:
          type: string
          format: byte
    EncryptionAlgorithm:
      type: object
      required: [name, keylen]
      properties:
        name:
          type: string
        keylen:
          type: string
    Error:
      type: object
      properties:
        errcode:
          type: integer
          description: Error code
        errmsg:
          type: string
          description: Error message
        alerts:
          $ref: '#/components/schemas/PfsenseResult'
    Event:
      type: object
      required: [event_type, event_id]
      properties:
        event_type:
          type: string
        event_id:
          type: integer
          description: ID is microsecond timestamp
        firewall:
          $ref: '#/components/schemas/FirewallEvent'
        interface:
          $ref: '#/components/schemas/InterfaceEvent'
        system:
          $ref: '#/components/schemas/SystemEvent'
    Events:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    FWAddrAlias:
      type: object
      description: System or user-defined alias details about the network defined in FWAddrPort.network
      required: [alias_type, label, descr, table, values]
      properties:
        alias_type:
          type: string
          description: system, host, port, network, url
        label:
          type: string
          description: alias label e.g. LAN__NETWORK, alias.name
        descr:
          type: string
          description: description about the alias
        table:
          type: string
          description: firewall table, if applicable
        values:
          type: array
          items:
            type: string
            description: |
              a comma separated table with the first row being the titles
              and next rows with values e.g.
              [ "value,descr"], [ "192.168.1.0/24,addr1" ], [ "fdc0::/64,addr2" ]
        truncated:
          type: boolean
          description: indicates whether the value list is truncated
    FWAddrPort:
      type: object
      required: [label, address, network, port, not, alias_id]
      properties:
        label:
          type: string
        address:
          type: string
        network:
          type: string
        port:
          type: string
        not:
          type: boolean
        any:
          type: boolean
        alias_id:
          type: string
    FWAlias:
      type: object
      required: [name, address, type, truncated]
      properties:
        name:
          type: string
        address:
          type: string
        targets:
          type: array
          items:
            $ref: '#/components/schemas/FWTarget'
        descr:
          type: string
        type:
          type: string
          enum: ['host', 'network', 'url', 'urltable', 'urltable_ports', 'port', 'url_ports']
        detail:
          type: string
        updatefreq:
          type: string
        truncated:
          type: boolean
    FWAliasReq:
      type: object
      properties:
        alias:
          $ref: '#/components/schemas/FWAlias'
    FWAliases:
      type: object
      required: [aliases, system_aliases]
      properties:
        aliases:
          type: array
          items:
            $ref: '#/components/schemas/FWAlias'
        system_aliases:
          type: array
          items:
            $ref: '#/components/schemas/FWSystemAlias'
    FWBogonRule:
      type: object
      required: [interface, enabled]
      properties:
        interface:
          type: string
        enabled:
          type: boolean
    FWBogonState:
      type: object
      properties:
        enabled:
          type: boolean
    FWFilterRule:
      type: object
      required: [disabled, interface, ipprotocol, protocol]
      properties:
        id:
          type: string
        disabled:
          type: boolean
        readonly:
          type: boolean
        gateway:
          type: string
        tracker:
          type: string
        type:
          type: string
        interface:
          type: string
        ipprotocol:
          type: string
        tag:
          type: string
        tagged:
          type: string
        max:
          type: string
        max_src_nodes:
          type: string
        max_src_conn:
          type: string
        max_src_states:
          type: string
        statetimeout:
          type: string
        statetype:
          type: string
        state:
          $ref: '#/components/schemas/FWRuleState'
        os:
          type: string
        protocol:
          type: string
        floating:
          type: boolean
        direction:
          type: string
        quick:
          type: boolean
        log:
          type: boolean
        dscp:
          type: string
        allowopts:
          type: boolean
        disablereplyto:
          type: boolean
        nottagged:
          type: boolean
        pflow:
          type: boolean
        max_src_conn_rate:
          type: string
        max_src_conn_rates:
          type: string
        tcpflags1:
          type: string
        tcpflags2:
          type: string
        tcpflags1_struct:
          $ref: '#/components/schemas/TCPFlags'
        tcpflags2_struct:
          $ref: '#/components/schemas/TCPFlags'
        tcpflags_any:
          type: boolean
        icmptype:
          type: string
        nopfsync:
          type: boolean
        nosync:
          type: boolean
        vlanprio:
          type: string
        vlanprioset:
          type: string
        dnpipe:
          type: string
        pdnpipe:
          type: string
        ackqueue:
          type: string
        defaultqueue:
          type: string
        source:
          $ref: '#/components/schemas/FWAddrPort'
        sched:
          type: string
        destination:
          $ref: '#/components/schemas/FWAddrPort'
        descr:
          type: string
        updated:
          $ref: '#/components/schemas/FWUserTimestamp'
        created:
          $ref: '#/components/schemas/FWUserTimestamp'
    FWFirewallInterfaces:
      type: object
      properties:
        interfaces:
          type: array
          items:
            type: string
    FWRuleItemOrder:
      type: object
      required: [id, rule]
      properties:
        id:
          type: string
        rule:
          type: boolean
    FWRuleList:
      type: object
      properties:
        rules:
          type: array
          items:
            type: string
    FWRuleOrder:
      type: object
      properties:
        rule:
          type: array
          items:
            type: string
        separator:
          type: array
          items:
            $ref: '#/components/schemas/Separator'
    FWRuleState:
      type: object
      required: [id, tracker, label, evaluations, packets, bytes, states, pid, state_creations]
      properties:
        id:
          type: string
        tracker:
          type: string
        label:
          type: string
        evaluations:
          type: integer
        packets:
          type: integer
        bytes:
          type: integer
        states:
          type: integer
        pid:
          type: integer
        state_creations:
          type: integer
    FWRuleStates:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/FWRuleState'
    FWRules:
      type: object
      required: [aliases, entries]
      properties:
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FWAddrAlias'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/FwRulesEntry'
    FWRulesOrder:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/FWRuleItemOrder'
    FWSchedule:
      type: object
      required: [id, name, descr, timerange, schedlabel]
      properties:
        id:
          type: string
        name:
          type: string
        descr:
          type: string
        timerange:
          type: array
          items:
            $ref: '#/components/schemas/FWScheduleRange'
        schedlabel:
          type: string
    FWScheduleRange:
      type: object
      required: [position, month, day, hour, rangedescr]
      properties:
        position:
          type: string
        month:
          type: string
        day:
          type: string
        hour:
          type: string
        rangedescr:
          type: string
    FWSchedules:
      type: object
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/FWSchedule'
    FWSingleFilterRule:
      type: object
      properties:
        rule:
          $ref: '#/components/schemas/FWFilterRule'
    FWSingleRuleStates:
      type: object
      properties:
        rule:
          $ref: '#/components/schemas/FWRuleState'
    FWSystemAlias:
      type: object
      required: [name, type, descr, address, url, table, if_ident, if_assigned_name, truncated]
      properties:
        name:
          type: string
        type:
          type: string
        descr:
          type: string
        address:
          type: string
        url:
          type: string
        table:
          type: string
        if_ident:
          type: string
        if_assigned_name:
          type: string
        truncated:
          type: boolean
    FWTarget:
      type: object
      required: [name, descr, updatefreq]
      properties:
        name:
          type: string
        descr:
          type: string
        updatefreq:
          type: string
    FWToggleResult:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ToggleRespStatus'
    FWUpdateAliasreq:
      type: object
      required: [alias, id]
      properties:
        alias:
          $ref: '#/components/schemas/FWAlias'
        id:
          type: string
    FWUserTimestamp:
      type: object
      required: [time, username]
      properties:
        time:
          type: string
        username:
          type: string
    FilterLog:
      type: object
      required: [time_usec, time, rulenum, subrulenum, anchor, rule_descr, tracker, realint, friendly_interface, reason, action, direction, version, proto_id, proto, v4info, v6info, length, src, dst, src_ip, dst_ip, src_port, dst_port, tcp_info, icmp_info, carp_info]
      properties:
        time_usec:
          type: integer
        time:
          type: string
        rulenum:
          type: integer
        subrulenum:
          type: integer
        anchor:
          type: string
        rule_descr:
          type: string
        tracker:
          type: string
        realint:
          type: string
        friendly_interface:
          type: string
        reason:
          type: string
        action:
          type: string
        direction:
          type: string
        version:
          type: integer
        proto_id:
          type: integer
        proto:
          type: string
        v4info:
          $ref: '#/components/schemas/FilterLogVersion4Info'
        v6info:
          $ref: '#/components/schemas/FilterLogVersion6Info'
        length:
          type: integer
        src:
          type: string
        dst:
          type: string
        src_ip:
          type: string
        dst_ip:
          type: string
        src_port:
          type: integer
        dst_port:
          type: integer
        tcp_info:
          $ref: '#/components/schemas/FilterLogTCPInfo'
        icmp_info:
          $ref: '#/components/schemas/FilterLogICMPInfo'
        carp_info:
          $ref: '#/components/schemas/FilterLogCARPInfo'
    FilterLogCARPInfo:
      type: object
      required: [type, ttl, vhid, version, adv_skew, adv_base]
      properties:
        type:
          type: string
        ttl:
          type: integer
        vhid:
          type: integer
        version:
          type: integer
        adv_skew:
          type: integer
        adv_base:
          type: integer
    FilterLogICMPInfo:
      type: object
      description: proto_id 1, 58
      required: [icmp_type, icmp_id, icmp_seq, icmp_dstip, icmp_proto_id, icmp_port, icmp_descr, icmp_mtu, icmp_otime, icmp_rtime, icmp_ttime]
      properties:
        icmp_type:
          type: string
        icmp_id:
          type: integer
        icmp_seq:
          type: integer
        icmp_dstip:
          type: string
        icmp_proto_id:
          type: integer
        icmp_port:
          type: integer
        icmp_descr:
          type: string
        icmp_mtu:
          type: integer
        icmp_otime:
          type: string
        icmp_rtime:
          type: string
        icmp_ttime:
          type: string
    FilterLogSummary:
      type: object
      description: Summary of filter log entries. These are dictionaries of keys to counts
      required: [total_records, actions, interfaces, protocols, src_ips, dest_ips, src_ports, dest_ports, tracker_hits]
      properties:
        total_records:
          type: integer
        actions:
          type: object
          additionalProperties:
            type: integer
        interfaces:
          type: object
          additionalProperties:
            type: integer
        protocols:
          type: object
          additionalProperties:
            type: integer
        src_ips:
          type: object
          additionalProperties:
            type: integer
        dest_ips:
          type: object
          additionalProperties:
            type: integer
        src_ports:
          type: object
          additionalProperties:
            type: integer
        dest_ports:
          type: object
          additionalProperties:
            type: integer
        tracker_hits:
          type: object
          additionalProperties:
            type: integer
    FilterLogTCPInfo:
      type: object
      description: proto_id = 6
      required: [tcp_flags, seq, ack, window, urg, options]
      properties:
        tcp_flags:
          type: string
        seq:
          type: string
        ack:
          type: integer
        window:
          type: integer
        urg:
          type: integer
        options:
          type: string
    FilterLogVersion4Info:
      type: object
      required: [tos, ecn, ttl, id, offset, flags]
      properties:
        tos:
          type: string
        ecn:
          type: string
        ttl:
          type: string
        id:
          type: string
        offset:
          type: string
        flags:
          type: string
    FilterLogVersion6Info:
      type: object
      required: [class, flow_label, hlim]
      properties:
        class:
          type: string
        flow_label:
          type: string
        hlim:
          type: string
    FilterReloadStatus:
      type: object
      required: [ongoing, done]
      properties:
        ongoing:
          type: boolean
        done:
          type: boolean
        status_lines:
          type: array
          items:
            type: string
    FilterSeparator:
      type: object
      required: [row, id, text, color, if]
      properties:
        row:
          type: string
        id:
          type: string
        text:
          type: string
        color:
          type: string
        if:
          type: string
    FirewallEvent:
      type: object
      required: [intf_name, action, rule_type]
      properties:
        intf_name:
          type: string
          description: friendly network interface name
        action:
          type: string
          description: activity on the rule - added, updated, deleted, moved
        rule_type:
          type: string
          description: filter, separator, nat, nat1to1, natout, npt
        filter:
          $ref: '#/components/schemas/FWFilterRule'
        nat:
          $ref: '#/components/schemas/NATRule'
        nat1to1:
          $ref: '#/components/schemas/NAT1To1Rule'
        natout:
          $ref: '#/components/schemas/NATOutboundRule'
        npt:
          $ref: '#/components/schemas/NATNptRule'
        separator:
          $ref: '#/components/schemas/Separator'
    FwBulkCopy:
      type: object
      required: [iface, rules]
      properties:
        iface:
          type: string
        rules:
          type: array
          items:
            type: string
    FwBulkDelete:
      type: object
      properties:
        rules:
          type: array
          items:
            type: string
    FwBulkToggle:
      type: object
      required: [rules, value]
      properties:
        rules:
          type: array
          items:
            type: string
        value:
          type: boolean
    FwIgnoredInput:
      type: object
      properties:
        v:
          type: boolean
    FwRuleToggle:
      type: object
      properties:
        value:
          type: boolean
    FwRulesEntry:
      type: object
      required: [rule, separator]
      properties:
        rule:
          $ref: '#/components/schemas/FWFilterRule'
        separator:
          $ref: '#/components/schemas/FilterSeparator'
    GIFCapableInterface:
      type: object
      required: [if_identity, if_assigned_name]
      properties:
        if_identity:
          type: string
        if_assigned_name:
          type: string
    GIFInterface:
      type: object
      required: [if_identity, tunnel_local_addr, tunnel_remote_addr, tunnel_remote_net, remote_addr, descr, link1, link2, gifif]
      properties:
        if_identity:
          type: string
          description: identity name of the parent interface
        tunnel_local_addr:
          type: string
          description: local tunnel address
        tunnel_remote_addr:
          type: string
          description: remote tunnel address
        tunnel_remote_net:
          type: integer
          description: remote tunnel address subnet
        remote_addr:
          type: string
          description: address of the remote peer
        descr:
          type: string
          description: description
        link1:
          type: boolean
          description: explicit congestion notification (ecn) friendly behavior
        link2:
          type: boolean
          description: disable automatic filtering of the outer gif source
        gifif:
          type: string
          description: generated by system when create gif
    GIFInterfaces:
      type: object
      required: [interfaces, gif_capable_ifs]
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/GIFInterface'
        gif_capable_ifs:
          type: array
          items:
            $ref: '#/components/schemas/GIFCapableInterface'
    GRECapableInterface:
      type: object
      required: [if_identity, if_assigned_name]
      properties:
        if_identity:
          type: string
        if_assigned_name:
          type: string
    GREInterface:
      type: object
      required: [if_identity, tunnel_local_addr, tunnel_remote_addr, tunnel_local_addr6, tunnel_remote_addr6, tunnel_remote_net, tunnel_remote_net6, remote_addr, descr, link1, greif]
      properties:
        if_identity:
          type: string
          description: identity name of the parent interface
        tunnel_local_addr:
          type: string
          description: local ipv4 tunnel address
        tunnel_remote_addr:
          type: string
          description: remote ipv4 tunnel address
        tunnel_local_addr6:
          type: string
          description: local ipv6 tunnel address
        tunnel_remote_addr6:
          type: string
          description: remote ipv6 tunnel address
        tunnel_remote_net:
          type: integer
          description: remote ipv4 tunnel address subnet
        tunnel_remote_net6:
          type: integer
          description: remote ipv6 tunnel address subnet
        remote_addr:
          type: string
          description: address of the remote peer
        descr:
          type: string
          description: description
        link1:
          type: boolean
          description: add an explicit static route for the remote inner tunnel
        greif:
          type: string
          description: generated by system when create gre
    GREInterfaces:
      type: object
      required: [interfaces, gre_capable_ifs]
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/GREInterface'
        gre_capable_ifs:
          type: array
          items:
            $ref: '#/components/schemas/GRECapableInterface'
    Gateway:
      type: object
      required: [name, dynamic, disabled, ipprotocol, gateway, gw_down_kill_states, interface, friendlyiface, friendlyifdescr, action_disable, attribute, isdefaultgw, monitor, monitor_disable, descr, tiername, weight, data_payload, interval, latencylow, latencyhigh, losslow, losshigh, loss_interval, time_period, alert_interval, nonlocalgateway]
      properties:
        name:
          type: string
        dynamic:
          type: boolean
        disabled:
          type: boolean
        ipprotocol:
          type: string
        gateway:
          type: string
        gw_down_kill_states:
          type: string
        interface:
          type: string
        friendlyiface:
          type: string
        friendlyifdescr:
          type: string
        action_disable:
          type: boolean
        attribute:
          type: string
        isdefaultgw:
          type: boolean
        monitor:
          type: string
        monitor_disable:
          type: boolean
        descr:
          type: string
        tiername:
          type: string
        weight:
          type: integer
        data_payload:
          type: integer
        interval:
          type: integer
        latencylow:
          type: integer
        latencyhigh:
          type: integer
        losslow:
          type: integer
        losshigh:
          type: integer
        loss_interval:
          type: integer
        time_period:
          type: integer
        alert_interval:
          type: integer
        nonlocalgateway:
          type: boolean
        defaults:
          $ref: '#/components/schemas/GatewayDefaults'
    GatewayDefaults:
      type: object
      required: [defaultgw4, defaultgw6]
      properties:
        defaultgw4:
          type: string
        defaultgw6:
          type: string
    GatewayGroup:
      type: object
      required: [idx, name, descr, gateway_priority, keep_failover_states, trigger]
      properties:
        idx:
          type: integer
        name:
          type: string
        descr:
          type: string
        gateway_priority:
          type: array
          items:
            $ref: '#/components/schemas/GatewayGroupPriority'
        keep_failover_states:
          type: string
        trigger:
          type: string
        trigger_descr:
          type: string
        keep_failover_states_descr:
          type: string
    GatewayGroupPriority:
      type: object
      required: [gateway, priority, vaddress]
      properties:
        gateway:
          type: string
        priority:
          type: string
        vaddress:
          type: string
    GatewayGroups:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GatewayGroup'
    GatewayPInfo:
      type: object
      required: [name, descr, ipprotocol, gateway]
      properties:
        name:
          type: string
        vaddress:
          type: array
          items:
            $ref: '#/components/schemas/GatewayVAddress'
        descr:
          type: string
        ipprotocol:
          type: string
          description: inet or inet6
        gateway:
          type: string
          description: gateway address
    GatewayPriorities:
      type: object
      properties:
        gateways:
          type: array
          items:
            $ref: '#/components/schemas/GatewayPInfo'
        priorities:
          type: array
          items:
            $ref: '#/components/schemas/GatewayPriority'
    GatewayPriority:
      type: object
      required: [priority, priority_descr]
      properties:
        priority:
          type: string
        priority_descr:
          type: string
    GatewayStatus:
      type: object
      required: [name, gateway, monitor, descr, delay, stddev, loss, status, display]
      properties:
        name:
          type: string
        gateway:
          type: string
        monitor:
          type: string
        descr:
          type: string
        delay:
          type: string
        stddev:
          type: string
        loss:
          type: string
        status:
          type: string
        display:
          type: string
    GatewayVAddress:
      type: object
      required: [vaddress, descr]
      properties:
        vaddress:
          type: string
        descr:
          type: string
    Gateways:
      type: object
      properties:
        defaults:
          $ref: '#/components/schemas/GatewayDefaults'
        gateways:
          type: array
          items:
            $ref: '#/components/schemas/Gateway'
    GatewaysStatus:
      type: object
      properties:
        gateways:
          type: array
          items:
            $ref: '#/components/schemas/GatewayStatus'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupStatus'
    GroupAddReq:
      type: object
      required: [name, scope]
      properties:
        name:
          type: string
        description:
          type: string
        scope:
          type: string
        gid:
          type: integer
        members:
          type: array
          items:
            type: integer
        privs:
          type: array
          items:
            type: string
    GroupStatus:
      type: object
      required: [name, descr]
      properties:
        name:
          type: string
        descr:
          type: string
        tier1:
          type: array
          items:
            $ref: '#/components/schemas/Tier'
        tier2:
          type: array
          items:
            $ref: '#/components/schemas/Tier'
        tier3:
          type: array
          items:
            $ref: '#/components/schemas/Tier'
        tier4:
          type: array
          items:
            $ref: '#/components/schemas/Tier'
        tier5:
          type: array
          items:
            $ref: '#/components/schemas/Tier'
    GroupUpdateReq:
      type: object
      properties:
        description:
          type: string
        scope:
          type: string
        gid:
          type: integer
        members:
          type: array
          items:
            type: integer
        remove_members:
          type: array
          items:
            type: integer
        privs:
          type: array
          items:
            type: string
    HAPfsync:
      type: object
      required: [enabled, sync_assigned_intf, hostid, peer_ip]
      properties:
        enabled:
          type: boolean
          description: enable pfsync
        sync_assigned_intf:
          type: string
          description: assigned network interface for sync communication
        hostid:
          type: string
          description: max 8 character unique host identifier
        peer_ip:
          type: string
          description: optional - sync to this IP address; default is directed multicast
    HASyncOpts:
      type: object
      required: [pfsync, xmlrpc]
      properties:
        pfsync:
          $ref: '#/components/schemas/HAPfsync'
        xmlrpc:
          $ref: '#/components/schemas/HAXMLRPCSync'
        avail_sync_interfaces:
          type: array
          items:
            type: string
    HAXMLRPCSync:
      type: object
      required: [sync_to_ip, username, password, sync_admin_acct, sync_users, sync_auth_servers, sync_certs, sync_fw_rules, sync_fw_schedules, sync_fw_aliases, sync_nat, sync_ipsec, sync_ovpn, sync_dhcp_server, sync_dhcp_relay, sync_dhcp6_server, sync_dhcp6_relay, sync_static_routes, sync_wol, sync_virtual_ips, sync_traffic_shaper, sync_traffic_shaper_limiters, sync_dns, sync_cap_portal]
      properties:
        sync_to_ip:
          type: string
          description: addres of device to sync the selected config sections
        username:
          type: string
          description: username to authenticate with sync_to_ip device
        password:
          type: string
          description: authentication password
        sync_admin_acct:
          type: boolean
          description: sync admin accounts and autoupdate sync password
        sync_users:
          type: boolean
          description: sync user manager users and groups
        sync_auth_servers:
          type: boolean
        sync_certs:
          type: boolean
        sync_fw_rules:
          type: boolean
        sync_fw_schedules:
          type: boolean
        sync_fw_aliases:
          type: boolean
        sync_nat:
          type: boolean
        sync_ipsec:
          type: boolean
        sync_ovpn:
          type: boolean
        sync_dhcp_server:
          type: boolean
        sync_dhcp_relay:
          type: boolean
        sync_dhcp6_server:
          type: boolean
        sync_dhcp6_relay:
          type: boolean
        sync_static_routes:
          type: boolean
        sync_wol:
          type: boolean
        sync_virtual_ips:
          type: boolean
        sync_traffic_shaper:
          type: boolean
        sync_traffic_shaper_limiters:
          type: boolean
        sync_dns:
          type: boolean
        sync_cap_portal:
          type: boolean
    HWDevice:
      type: object
      required: [name, location, type, vendor, class]
      properties:
        name:
          type: string
        location:
          type: string
        type:
          type: string
        vendor:
          type: string
        class:
          type: string
    HWDevices:
      type: object
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/HWDevice'
    IGMPProxies:
      type: object
      required: [enable, verbose, interfaces]
      properties:
        igmpentry:
          type: array
          items:
            $ref: '#/components/schemas/IGMPProxy'
        enable:
          type: boolean
        verbose:
          type: boolean
        interfaces:
          type: string
    IGMPProxiesReq:
      type: object
      properties:
        igmpentry:
          type: array
          items:
            $ref: '#/components/schemas/IGMPProxy'
    IGMPProxy:
      type: object
      required: [ifname, address]
      properties:
        ifname:
          type: string
        threshold:
          type: string
        descr:
          type: string
        type:
          type: string
        address:
          type: string
    IGMPProxySettings:
      type: object
      required: [verbose, enable]
      properties:
        verbose:
          type: boolean
        enable:
          type: boolean
    IPSecBypassRule:
      type: object
      required: [source, sourcemask, destination, dstmask]
      properties:
        source:
          type: string
        sourcemask:
          type: string
        destination:
          type: string
        dstmask:
          type: string
    IPSecBypassRules:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/IPSecBypassRule'
    IPSecChildSAS:
      type: object
      required: [name, uniqueid, reqid, state, mode, protocol, encap, spi_in, spi_out, cpi_in, cpi_out, mark_in, mark_mask_in, mark_out, mark_mask_out, if_id_in, if_id_out, label, encr_alg, encr_keysize, integ_alg, integ_keysize, prf_alg, dh_group, esn, bytes_in, packets_in, use_in, bytes_out, packets_out, use_out, rekey_time, life_time, install_time]
      properties:
        name:
          type: string
        uniqueid:
          type: string
        reqid:
          type: string
        state:
          type: string
        mode:
          type: string
        protocol:
          type: string
        encap:
          type: string
        spi_in:
          type: string
        spi_out:
          type: string
        cpi_in:
          type: string
        cpi_out:
          type: string
        mark_in:
          type: string
        mark_mask_in:
          type: string
        mark_out:
          type: string
        mark_mask_out:
          type: string
        if_id_in:
          type: string
        if_id_out:
          type: string
        label:
          type: string
        encr_alg:
          type: string
        encr_keysize:
          type: string
        integ_alg:
          type: string
        integ_keysize:
          type: string
        prf_alg:
          type: string
        dh_group:
          type: string
        esn:
          type: string
        bytes_in:
          type: integer
        packets_in:
          type: integer
        use_in:
          type: integer
        bytes_out:
          type: integer
        packets_out:
          type: integer
        use_out:
          type: integer
        rekey_time:
          type: integer
        life_time:
          type: integer
        install_time:
          type: integer
        local_ts:
          type: array
          items:
            type: string
        remote_ts:
          type: array
          items:
            type: string
    IPSecClient:
      type: object
      required: [enable, radiusaccounting, user_source, group_source, auth_groups, pool_address, pool_netbits, pool_address_v6, pool_netbits_v6, net_list, save_passwd, dns_domain, dns_split, dns_server1, dns_server2, dns_server3, dns_server4, wins_server1, wins_server2, pfs_group, login_banner, radius_ip_priority_enable, radius_retransmit_base, radius_retransmit_timeout, radius_retransmit_tries, radius_sockets]
      properties:
        enable:
          type: boolean
        radiusaccounting:
          type: boolean
        user_source:
          type: string
        user_source_array:
          type: array
          items:
            type: string
        group_source:
          type: boolean
        auth_groups:
          type: string
        auth_groups_array:
          type: array
          items:
            type: string
        pool_address:
          type: string
        pool_netbits:
          type: string
        pool_address_v6:
          type: string
        pool_netbits_v6:
          type: string
        net_list:
          type: boolean
        save_passwd:
          type: boolean
        dns_domain:
          type: string
        dns_split:
          type: string
        dns_server1:
          type: string
        dns_server2:
          type: string
        dns_server3:
          type: string
        dns_server4:
          type: string
        wins_server1:
          type: string
        wins_server2:
          type: string
        pfs_group:
          type: string
        login_banner:
          type: string
        radius_ip_priority_enable:
          type: boolean
        radius_retransmit_base:
          type: string
        radius_retransmit_timeout:
          type: string
        radius_retransmit_tries:
          type: string
        radius_sockets:
          type: string
    IPSecClientConfig:
      type: object
      required: [client, auth_servers]
      properties:
        client:
          $ref: '#/components/schemas/IPSecClient'
        user_groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
        auth_servers:
          $ref: '#/components/schemas/AuthServers'
    IPSecConfig:
      type: object
      required: [logging, async_crypto, uniqueids, filtermode, bypassrules, pkcs11support, enableinterfacesuse, unityplugin, strictcrlpolicy, makebeforebreak, ipsecbypass, acceptunencryptedmainmode, maxexchange, port_nat_t, port, compression, noshuntlaninterfaces, maxmss]
      properties:
        logging:
          $ref: '#/components/schemas/IPSecLogging'
        async_crypto:
          type: boolean
        uniqueids:
          type: string
        filtermode:
          type: string
        bypassrules:
          $ref: '#/components/schemas/IPSecBypassRules'
        pkcs11support:
          type: boolean
        enableinterfacesuse:
          type: boolean
        unityplugin:
          type: boolean
        strictcrlpolicy:
          type: boolean
        makebeforebreak:
          type: boolean
        ipsecbypass:
          type: boolean
        acceptunencryptedmainmode:
          type: boolean
        maxexchange:
          type: integer
        port_nat_t:
          type: integer
        port:
          type: integer
        compression:
          type: boolean
        noshuntlaninterfaces:
          type: boolean
        maxmss:
          type: string
    IPSecConnectReq:
      type: object
      required: [connect_p1, p1_ikeid, connect_p2, p2_reqid]
      properties:
        connect_p1:
          type: boolean
        p1_ikeid:
          type: string
        connect_p2:
          type: boolean
        p2_reqid:
          type: string
    IPSecDisconnectReq:
      type: object
      required: [phase, conid, uniqueid]
      properties:
        phase:
          type: string
          enum: ['1', '2']
        conid:
          type: string
        uniqueid:
          type: string
    IPSecIKESA:
      type: object
      required: [name, uniqueid, version, state, local_host, local_port, local_id, remote_host, remote_port, remote_id, initiator, initiator_spi, responder_spi, encr_alg, encr_keysize, integ_alg, integ_keysize, prf_alg, dh_group, established, rekey_time, reauth_time]
      properties:
        name:
          type: string
        uniqueid:
          type: string
        version:
          type: integer
        state:
          type: string
        local_host:
          type: string
        local_port:
          type: string
        local_id:
          type: string
        remote_host:
          type: string
        remote_port:
          type: string
        remote_id:
          type: string
        initiator:
          type: string
        initiator_spi:
          type: string
        responder_spi:
          type: string
        encr_alg:
          type: string
        encr_keysize:
          type: integer
        integ_alg:
          type: string
        integ_keysize:
          type: integer
        prf_alg:
          type: string
        dh_group:
          type: string
        established:
          type: integer
        rekey_time:
          type: integer
        reauth_time:
          type: integer
        childsas:
          type: array
          items:
            $ref: '#/components/schemas/IPSecChildSAS'
    IPSecLogging:
      type: object
      required: [dmn, mgr, ike, chd, job, cfg, knl, net, asn, enc, imc, imv, pts, tls, esp, lib]
      properties:
        dmn:
          type: string
        mgr:
          type: string
        ike:
          type: string
        chd:
          type: string
        job:
          type: string
        cfg:
          type: string
        knl:
          type: string
        net:
          type: string
        asn:
          type: string
        enc:
          type: string
        imc:
          type: string
        imv:
          type: string
        pts:
          type: string
        tls:
          type: string
        esp:
          type: string
        lib:
          type: string
    IPSecMobileKey:
      type: object
      required: [ident, type, pre_shared_key, ident_type, pool_address, pool_netbits, dns_address]
      properties:
        ident:
          type: string
        type:
          type: string
        pre_shared_key:
          type: string
        ident_type:
          type: string
        pool_address:
          type: string
        pool_netbits:
          type: string
        dns_address:
          type: string
    IPSecMobileKeys:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/IPSecMobileKey'
    IPSecPSK:
      type: object
      properties:
        psk:
          type: string
    IPSecPhaseList:
      type: object
      required: [phase1, phase2]
      properties:
        phase1:
          type: array
          items:
            $ref: '#/components/schemas/Phase1'
        phase2:
          type: array
          items:
            $ref: '#/components/schemas/Phase2'
    IPSecPhases:
      type: object
      properties:
        phases:
          $ref: '#/components/schemas/IPSecPhaseList'
    IPSecPool:
      type: object
      required: [name, base, online, offline, size]
      properties:
        name:
          type: string
        base:
          type: string
        online:
          type: string
        offline:
          type: string
        size:
          type: string
        lease:
          type: array
          items:
            $ref: '#/components/schemas/IPSecPoolLease'
    IPSecPoolLease:
      type: object
      required: [host, status, id]
      properties:
        host:
          type: string
        status:
          type: string
        id:
          type: string
    IPSecSAD:
      type: object
      required: [src, dst, proto, spi, reqid, ealgo, aalgo, data]
      properties:
        src:
          type: string
        dst:
          type: string
        proto:
          type: string
        spi:
          type: string
        reqid:
          type: string
        ealgo:
          type: string
        aalgo:
          type: string
        data:
          type: string
    IPSecSPD:
      type: object
      required: [dir, scope, ifname, srcid, dstid, proto, src, dst, unique]
      properties:
        dir:
          type: string
        scope:
          type: string
        ifname:
          type: string
        srcid:
          type: string
        dstid:
          type: string
        proto:
          type: string
        src:
          type: string
        dst:
          type: string
        unique:
          type: string
    IPSecStatus:
      type: object
      properties:
        list_sa:
          type: array
          items:
            $ref: '#/components/schemas/IPSecIKESA'
        phases:
          $ref: '#/components/schemas/IPSecPhaseList'
    IPSecStatusOverview:
      type: object
      required: [enabled, daemon_running, status]
      properties:
        enabled:
          type: boolean
        daemon_running:
          type: boolean
        status:
          $ref: '#/components/schemas/IPSecStatus'
        lease:
          type: array
          items:
            $ref: '#/components/schemas/IPSecPool'
        sads:
          type: array
          items:
            $ref: '#/components/schemas/IPSecSAD'
        spds:
          type: array
          items:
            $ref: '#/components/schemas/IPSecSPD'
    IPSecWidget:
      type: object
      required: [phase1s_active, phase1s_total, phase2s_active, phase2s_total, total_active, total_inactive, mobile_users, mobile_active, mobile_total]
      properties:
        phase1s_active:
          type: integer
        phase1s_total:
          type: integer
        phase2s_active:
          type: integer
        phase2s_total:
          type: integer
        total_active:
          type: integer
        total_inactive:
          type: integer
        mobile_users:
          type: integer
        mobile_active:
          type: integer
        mobile_total:
          type: integer
        tunnels:
          type: array
          items:
            $ref: '#/components/schemas/IPSecWidgetTunnel'
        mobile:
          type: array
          items:
            $ref: '#/components/schemas/IPSecWidgetMobile'
    IPSecWidgetMobile:
      type: object
      required: [user, ip, status]
      properties:
        user:
          type: string
        ip:
          type: string
        status:
          type: string
    IPSecWidgetTunnel:
      type: object
      required: [source, destination, description, status]
      properties:
        source:
          type: string
        destination:
          type: string
        description:
          type: string
        status:
          type: string
    IfStats:
      type: object
      required: [time, bytesin, bytesout]
      properties:
        time:
          type: integer
        bytesin:
          type: integer
        bytesout:
          type: integer
    IfStatsBandwidth:
      type: object
      required: [host, bitsin, bitsout]
      properties:
        host:
          type: string
        bitsin:
          type: string
        bitsout:
          type: string
    IfStatsSummary:
      type: object
      required: [if, ifstats, bandwidth]
      properties:
        if:
          type: string
        ifstats:
          $ref: '#/components/schemas/IfStats'
        bandwidth:
          type: array
          items:
            $ref: '#/components/schemas/IfStatsBandwidth'
    InitialSetup:
      type: object
      properties:
        setup:
          $ref: '#/components/schemas/SetupSettings'
    InsertFilterRule:
      type: object
      required: [reference, after, rule]
      properties:
        reference:
          type: string
        after:
          type: boolean
        rule:
          $ref: '#/components/schemas/FWFilterRule'
    InsertFilterSeparator:
      type: object
      required: [after, color, rule, text]
      properties:
        after:
          type: boolean
        color:
          type: string
        rule:
          type: string
        text:
          type: string
    InstallPackageOpt:
      type: object
      required: [name, version]
      properties:
        name:
          type: string
        version:
          type: string
    InstallPackagesOpt:
      type: object
      properties:
        packages:
          type: array
          items:
            $ref: '#/components/schemas/InstallPackageOpt'
    InstallPackagesResponse:
      type: object
      description: Current progress of package (re)installation. A transaction ID can be used to resume querying of status.
      properties:
        transaction:
          type: string
        progress:
          type: array
          items:
            $ref: '#/components/schemas/PackageInstallProgress'
    InstallSoftwarePackageInfo:
      type: object
      properties:
        package:
          $ref: '#/components/schemas/SoftwarePackage'
        installable:
          type: array
          items:
            $ref: '#/components/schemas/DeviceBasicInfo'
    Interface:
      type: object
      description: Detailed interface information
      required: [name, if, assigned_name, device_name, identity, enable, blockbogons, pseudo, blockpriv, slaacusev4iface, descr, type, type6, promisc, ipaddr, member, mac, mediaopt, spoofmac, gateway, ipaddrv6, ipv6usev4iface, defaultgw6, gatewayip6, gatewayv6, gatewaydescr6, gatewayname6, alias_address, dhcphostname, dhcprejectfrom, dhcprejectfromarray, dhcpvlanenable, dhcp6usev4iface, dhcp6prefixonly, dhcp6_ia_pd_send_hint, dhcp6debug, dhcp6withoutra, dhcp6norelease, dhcpcvpt, dhcp6cvpt, prefix_6rd, gateway_6rd, track6_prefix_id__hex, dhcp6_ia_pd_len, prefix_6rd_v4plen, track6_interface, adv_dhcp_config_advanced, adv_dhcp_config_file_override, adv_dhcp_pt_timeout, adv_dhcp_pt_retry, adv_dhcp_pt_select_timeout, adv_dhcp_pt_reboot, adv_dhcp_pt_backoff_cutoff, adv_dhcp_pt_initial_interval, adv_dhcp_pt_values, adv_dhcp_config_file_override_path, adv_dhcp_send_options, adv_dhcp_request_options, adv_dhcp_required_options, adv_dhcp_option_modifiers, adv_dhcp6_config_advanced, adv_dhcp6_config_file_override, adv_dhcp6_prefix_selected_interface, adv_dhcp6_config_file_override_path, adv_dhcp6_interface_statement_information_only_enable, adv_dhcp6_interface_statement_send_options, adv_dhcp6_interface_statement_request_options, adv_dhcp6_interface_statement_script, adv_dhcp6_id_assoc_statement_address_enable, adv_dhcp6_id_assoc_statement_address_id, adv_dhcp6_id_assoc_statement_address, adv_dhcp6_id_assoc_statement_address_pltime, adv_dhcp6_id_assoc_statement_address_vltime, adv_dhcp6_id_assoc_statement_prefix_enable, adv_dhcp6_id_assoc_statement_prefix_id, adv_dhcp6_id_assoc_statement_prefix, adv_dhcp6_id_assoc_statement_prefix_pltime, adv_dhcp6_id_assoc_statement_prefix_vltime, adv_dhcp6_prefix_interface_statement_sla_id, adv_dhcp6_prefix_interface_statement_sla_len, adv_dhcp6_authentication_statement_authname, adv_dhcp6_authentication_statement_protocol, adv_dhcp6_authentication_statement_algorithm, adv_dhcp6_authentication_statement_rdm, adv_dhcp6_key_info_statement_keyname, adv_dhcp6_key_info_statement_realm, adv_dhcp6_key_info_statement_keyid, adv_dhcp6_key_info_statement_secret, adv_dhcp6_key_info_statement_expire]
      properties:
        name:
          type: string
          description: alias to assigned name
        if:
          type: string
          description: alias to device_name
        assigned_name:
          type: string
          description: user assigned name, e.g. MYLAN
        device_name:
          type: string
          description: host device name, e.g. ix1
        identity:
          type: string
          description: unique identity of device, e.g. opt1
        enable:
          type: boolean
        blockbogons:
          type: boolean
        pseudo:
          type: boolean
        blockpriv:
          type: boolean
        slaacusev4iface:
          type: boolean
        descr:
          type: string
        type:
          type: string
        type6:
          type: string
        mtu:
          type: integer
        mss:
          type: integer
        pcp:
          type: integer
        promisc:
          type: boolean
        ipaddr:
          type: string
        member:
          type: string
        media:
          type: string
        mac:
          type: string
        mediaopt:
          type: string
        spoofmac:
          type: string
        tag:
          type: integer
        gateway:
          type: string
        ipaddrv6:
          type: string
        ipv6usev4iface:
          type: boolean
        defaultgw6:
          type: boolean
        gatewayip6:
          type: string
        gatewayv6:
          type: string
        gatewaydescr6:
          type: string
        gatewayname6:
          type: string
        alias_address:
          type: string
        dhcphostname:
          type: string
        dhcprejectfrom:
          type: string
        dhcprejectfromarray:
          type: array
          items:
            type: string
        dhcpvlanenable:
          type: boolean
        dhcp6usev4iface:
          type: boolean
        dhcp6prefixonly:
          type: boolean
        dhcp6_ia_pd_send_hint:
          type: boolean
        dhcp6debug:
          type: boolean
        dhcp6withoutra:
          type: boolean
        dhcp6norelease:
          type: boolean
        dhcpcvpt:
          type: string
        dhcp6cvpt:
          type: string
        prefix_6rd:
          type: string
        gateway_6rd:
          type: string
        track6_prefix_id__hex:
          type: string
        dhcp6_ia_pd_len:
          type: string
        prefix_6rd_v4plen:
          type: string
        track6_interface:
          type: string
        adv_dhcp_config_advanced:
          type: boolean
        adv_dhcp_config_file_override:
          type: boolean
        adv_dhcp_pt_timeout:
          type: string
        adv_dhcp_pt_retry:
          type: string
        adv_dhcp_pt_select_timeout:
          type: string
        adv_dhcp_pt_reboot:
          type: string
        adv_dhcp_pt_backoff_cutoff:
          type: string
        adv_dhcp_pt_initial_interval:
          type: string
        adv_dhcp_pt_values:
          type: string
        adv_dhcp_config_file_override_path:
          type: string
        adv_dhcp_send_options:
          type: string
        adv_dhcp_request_options:
          type: string
        adv_dhcp_required_options:
          type: string
        adv_dhcp_option_modifiers:
          type: string
        adv_dhcp6_config_advanced:
          type: boolean
        adv_dhcp6_config_file_override:
          type: boolean
        adv_dhcp6_prefix_selected_interface:
          type: string
        adv_dhcp6_config_file_override_path:
          type: string
        adv_dhcp6_interface_statement_information_only_enable:
          type: boolean
        adv_dhcp6_interface_statement_send_options:
          type: string
        adv_dhcp6_interface_statement_request_options:
          type: string
        adv_dhcp6_interface_statement_script:
          type: string
        adv_dhcp6_id_assoc_statement_address_enable:
          type: boolean
        adv_dhcp6_id_assoc_statement_address_id:
          type: string
        adv_dhcp6_id_assoc_statement_address:
          type: string
        adv_dhcp6_id_assoc_statement_address_pltime:
          type: string
        adv_dhcp6_id_assoc_statement_address_vltime:
          type: string
        adv_dhcp6_id_assoc_statement_prefix_enable:
          type: boolean
        adv_dhcp6_id_assoc_statement_prefix_id:
          type: string
        adv_dhcp6_id_assoc_statement_prefix:
          type: string
        adv_dhcp6_id_assoc_statement_prefix_pltime:
          type: string
        adv_dhcp6_id_assoc_statement_prefix_vltime:
          type: string
        adv_dhcp6_prefix_interface_statement_sla_id:
          type: string
        adv_dhcp6_prefix_interface_statement_sla_len:
          type: string
        adv_dhcp6_authentication_statement_authname:
          type: string
        adv_dhcp6_authentication_statement_protocol:
          type: string
        adv_dhcp6_authentication_statement_algorithm:
          type: string
        adv_dhcp6_authentication_statement_rdm:
          type: string
        adv_dhcp6_key_info_statement_keyname:
          type: string
        adv_dhcp6_key_info_statement_realm:
          type: string
        adv_dhcp6_key_info_statement_keyid:
          type: string
        adv_dhcp6_key_info_statement_secret:
          type: string
        adv_dhcp6_key_info_statement_expire:
          type: string
    InterfaceDescriptors:
      type: object
      properties:
        descriptors:
          $ref: '#/components/schemas/InterfaceDescriptorsInfo'
    InterfaceDescriptorsInfo:
      type: object
      description: Mapping of interface names to their descriptions.
      required: [gre, gif, lagg, qinq, ppp, bridges, vlan, physical]
      properties:
        gre:
          type: object
          additionalProperties:
            type: string
        gif:
          type: object
          additionalProperties:
            type: string
        lagg:
          type: object
          additionalProperties:
            type: string
        qinq:
          type: object
          additionalProperties:
            type: string
        ppp:
          type: object
          additionalProperties:
            type: string
        bridges:
          type: object
          additionalProperties:
            type: string
        vlan:
          type: object
          additionalProperties:
            type: string
        physical:
          type: object
          additionalProperties:
            type: string
    InterfaceEvent:
      type: object
      required: [name, friendly_name, state, speed]
      properties:
        name:
          type: string
          description: name of interface device
        friendly_name:
          type: string
          description: friendly name eg wan, lan
        state:
          type: string
          description: current state change
        speed:
          type: integer
          description: speed change, Mbps
    InterfaceFriendlyName:
      type: object
      required: [if, name]
      properties:
        if:
          type: string
        name:
          type: string
    InterfaceGroup:
      type: object
      required: [members, member, descr, ifname]
      properties:
        members:
          type: string
        member:
          type: array
          items:
            type: string
        descr:
          type: string
        ifname:
          type: string
    InterfaceGroups:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/InterfaceGroup'
    InterfaceInfo:
      type: object
      required: [assigned_interface, internal_name, friendly_name, enabled, status, mac_address, mtu, media, plugged, vendor, temperature, voltage, rx, tx, channel, ssid, bssid, rate, rssi, in_packets, out_packets, in_bytes, out_bytes, in_packets_pass, out_packets_pass, in_bytes_pass, out_bytes_pass, in_packets_block, out_packets_block, in_bytes_block, out_bytes_block, in_errors, out_errors, collisions, ip_address, subnet_mask, gateway, ipv6_link_local, ipv6_address, ipv6_subnet_mask, ipv6_gateway, lagg_enabled, lagg_ports, current_ppp_uptime, historical_ppp_uptime, cell_rssi, cell_mode, cell_simstate, cell_service, cell_bwupstream, cell_bwdownstream, cell_upstream, cell_downstream, dhcplink, pppoelink, pptplink]
      properties:
        assigned_interface:
          type: string
        internal_name:
          type: string
        friendly_name:
          type: string
        enabled:
          type: boolean
        status:
          type: string
        mac_address:
          type: string
        mtu:
          type: integer
        media:
          type: string
        plugged:
          type: string
        vendor:
          type: string
        temperature:
          type: string
        voltage:
          type: string
        rx:
          type: string
        tx:
          type: string
        channel:
          type: integer
        ssid:
          type: string
        bssid:
          type: string
        rate:
          type: string
        rssi:
          type: string
        in_packets:
          type: integer
        out_packets:
          type: integer
        in_bytes:
          type: integer
        out_bytes:
          type: integer
        in_packets_pass:
          type: integer
        out_packets_pass:
          type: integer
        in_bytes_pass:
          type: integer
        out_bytes_pass:
          type: integer
        in_packets_block:
          type: integer
        out_packets_block:
          type: integer
        in_bytes_block:
          type: integer
        out_bytes_block:
          type: integer
        in_errors:
          type: integer
        out_errors:
          type: integer
        collisions:
          type: integer
        ip_address:
          type: string
        subnet_mask:
          type: string
        gateway:
          type: string
        ipv6_link_local:
          type: string
        ipv6_address:
          type: string
        ipv6_subnet_mask:
          type: string
        ipv6_gateway:
          type: string
        dns_servers:
          type: array
          items:
            type: string
        lagg_enabled:
          type: boolean
        lagg_ports:
          type: string
        current_ppp_uptime:
          type: string
        historical_ppp_uptime:
          type: string
        cell_rssi:
          type: string
        cell_mode:
          type: string
        cell_simstate:
          type: string
        cell_service:
          type: string
        cell_bwupstream:
          type: integer
        cell_bwdownstream:
          type: integer
        cell_upstream:
          type: integer
        cell_downstream:
          type: integer
        dhcplink:
          type: string
        pppoelink:
          type: string
        pptplink:
          type: string
    InterfaceInfoList:
      type: object
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/InterfaceInfo'
    InterfaceLabelToName:
      type: object
      description: |
        Mapping of friendly interface label to the configuration name
        and the underlying device name. For example:
        
        friendly: LANOPT
        name:     lanopt (assigned)
        ident:    opt1
        if:       eth0
      required: [friendly, name, ident, if]
      properties:
        friendly:
          type: string
        name:
          type: string
        ident:
          type: string
        if:
          type: string
    InterfacePorts:
      type: object
      required: [ports, modems]
      properties:
        ports:
          $ref: '#/components/schemas/InterfacePortsLists'
        modems:
          type: array
          items:
            type: string
    InterfacePortsLists:
      type: object
      required: [gres, gifs, bridges, vlans, ppps, qinqs, laggs, wan, lan, physical]
      properties:
        gres:
          type: array
          items:
            $ref: '#/components/schemas/GREInterface'
        gifs:
          type: array
          items:
            $ref: '#/components/schemas/GIFInterface'
        bridges:
          type: array
          items:
            $ref: '#/components/schemas/BridgeInterface'
        vlans:
          type: array
          items:
            $ref: '#/components/schemas/VLANInterface'
        ppps:
          type: array
          items:
            $ref: '#/components/schemas/PPPInterface'
        qinqs:
          type: array
          items:
            $ref: '#/components/schemas/QinQInterface'
        laggs:
          type: array
          items:
            $ref: '#/components/schemas/LAGGInterface'
        wan:
          $ref: '#/components/schemas/Interface'
        lan:
          $ref: '#/components/schemas/Interface'
        physical:
          type: array
          items:
            $ref: '#/components/schemas/PhysicalInterface'
    InterfaceSimple:
      type: object
      required: [name, descr, if, ipaddr, ipaddrv6, mac, tag, member, enable]
      properties:
        name:
          type: string
        descr:
          type: string
        if:
          type: string
        ipaddr:
          type: string
        ipaddrv6:
          type: string
        mac:
          type: string
        tag:
          type: integer
        member:
          type: string
        addresses:
          type: array
          items:
            type: string
        enable:
          type: boolean
    InterfaceStatisticsWidget:
      type: object
      required: [packets_in, packets_out, bytes_in, bytes_out, errors_in, errors_out, collisions]
      properties:
        packets_in:
          type: integer
        packets_out:
          type: integer
        bytes_in:
          type: integer
        bytes_out:
          type: integer
        errors_in:
          type: integer
        errors_out:
          type: integer
        collisions:
          type: integer
    InterfaceStatisticsWidgetResult:
      type: object
      properties:
        interfaces:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InterfaceStatisticsWidget'
    InterfaceWidgets:
      type: object
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/InterfacesWidget'
    Interfaces:
      type: object
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/Interface'
    InterfacesFriendly:
      type: object
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/InterfaceFriendlyName'
    InterfacesSimple:
      type: object
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/InterfaceSimple'
    InterfacesWidget:
      type: object
      required: [name, ip, status, speed]
      properties:
        name:
          type: string
        ip:
          type: string
        status:
          type: string
        speed:
          type: string
    L2TPConfig:
      type: object
      required: [mode, radius, remoteip, localip, l2tp_subnet, interface, n_l2tp_units, secret, paporchap, dns1, dns2]
      properties:
        mode:
          type: string
        radius:
          $ref: '#/components/schemas/L2TPRadius'
        remoteip:
          type: string
        localip:
          type: string
        l2tp_subnet:
          type: string
        interface:
          type: string
        n_l2tp_units:
          type: string
        secret:
          type: string
        paporchap:
          type: string
        dns1:
          type: string
        dns2:
          type: string
        user:
          type: array
          items:
            $ref: '#/components/schemas/L2TPUser'
    L2TPRadius:
      type: object
      required: [server, secret, enable, accounting, radiusissueips]
      properties:
        server:
          type: string
        secret:
          type: string
        enable:
          type: boolean
        accounting:
          type: boolean
        radiusissueips:
          type: boolean
    L2TPSettings:
      type: object
      properties:
        l2tp:
          $ref: '#/components/schemas/L2TPConfig'
        interfaces:
          type: array
          items:
            type: string
    L2TPUser:
      type: object
      required: [name, ip, password]
      properties:
        name:
          type: string
        ip:
          type: string
        password:
          type: string
    LAGGCapableInterface:
      type: object
      required: [if_device, mac]
      properties:
        if_device:
          type: string
        mac:
          type: string
    LAGGCapableInterfaces:
      type: object
      required: [capable_ifs, lagg_members]
      properties:
        capable_ifs:
          type: array
          items:
            $ref: '#/components/schemas/LAGGCapableInterface'
        lagg_members:
          type: array
          items:
            $ref: '#/components/schemas/LAGGCapableInterface'
    LAGGInterface:
      type: object
      required: [members, descr, laggif_device, proto, failovermaster, lacptimeout, lagghash]
      properties:
        members:
          type: array
          items:
            type: string
            description: (array of interface device name) Parent interfaces
        descr:
          type: string
          description: description
        laggif_device:
          type: string
          description: generated by system when create lagg
        proto:
          type: string
          description: |
            lagg protocol
            valid value = none, lacp, failover, loadbalance, roundrobin
          enum: ['none', 'lacp', 'failover', 'loadbalance', 'roundrobin']
        failovermaster:
          type: string
          description: (for proto=failover only) failover master interface
        lacptimeout:
          type: string
          description: |
            (for proto=lacp only) LACP Timeout Mode
            valid value = slow, fast
          enum: ['slow', 'fast']
        lagghash:
          type: string
          description: |
            (for proto=lacp or loadbalance) hash algorithms for the packet layers
            valid value = "l2,l3,l4", "l2", "l3", "l4", "l2,l3", "l3,l4", "l2,l4"
    LAGGInterfaces:
      type: object
      required: [interfaces, lagg_capable_ifs]
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/LAGGInterface'
        lagg_capable_ifs:
          $ref: '#/components/schemas/LAGGCapableInterfaces'
    LdapAuthServer:
      type: object
      required: [type, name, host, version, port, transport, timeout, search_scope, base_dn, auth_containers, extended_query, bind_user_dn, bind_password, user_naming_attrib, group_naming_attrib, group_member_attrib, rfc2307, rfc2307_group_class, rfc2307_use_userdn, shell_group_dn, username_alterations, utf8_encode, unauthenticated_bind, no_strip_at]
      properties:
        type:
          type: string
        name:
          type: string
        host:
          type: string
        version:
          type: integer
          description: protocol version (3 default)
        port:
          type: integer
          description: |
            636 assumes "tls" encryption
        transport:
          type: string
          description: |
            "starttls", "tls", "none"
        timeout:
          type: integer
          description: seconds to timeout operation
        search_scope:
          type: string
          description: |
            "one", "subtree"
        base_dn:
          type: string
          description: root base dn, e.g. dc=domain,dc=com
        auth_containers:
          type: string
          description: semicolon separated list of search containers, prepended to base_dn
        extended_query:
          type: string
          description: |
            optional extra restriction for filtering username query, e.g.:
            - memberOf=CN=Pfnet,CN=Users,DC=example,DC=com
            - &(objectClass=posixGroup)(cn=Pfnet)(memberUid=*)
        bind_user_dn:
          type: string
          description: for authenticated binding, the user-DN
        bind_password:
          type: string
          description: for authenticated binding, the password (base64-encoded)
        user_naming_attrib:
          type: string
          description: |
            user naming attribute, e.g. "uid"
        group_naming_attrib:
          type: string
          description: |
            group naming attribute, e.g. "cn"
        group_member_attrib:
          type: string
          description: |
            e.g. "memberOf", "member"
        rfc2307:
          type: boolean
          description: use RFC2307 style group membership
        rfc2307_group_class:
          type: string
          description: object class for groups in rfc2307 mode, e.g. groupOfNames, posixGroup, group
        rfc2307_use_userdn:
          type: boolean
          description: use user-DN for querying user record
        shell_group_dn:
          type: string
          description: group DN required for shell access
        username_alterations:
          type: boolean
          description: |
            "true" to keep username verbatim (unstripped user@host)
        utf8_encode:
          type: boolean
          description: encodings are in utf-8
        unauthenticated_bind:
          type: boolean
          description: bind without password
        no_strip_at:
          type: boolean
          description: |
            don't strip @<domain>
        caref:
          type: string
          description: |
            server's CA, ref
        certref:
          type: string
          description: client certificate for secure transport
        refid:
          type: string
    LeaseInterface:
      type: object
      required: [name, start, end, num]
      properties:
        name:
          type: string
        start:
          type: string
        end:
          type: string
        num:
          type: integer
    LimiterInfo:
      type: object
      required: [pipes, sched, queues]
      properties:
        pipes:
          type: string
          format: byte
        sched:
          type: string
          format: byte
        queues:
          type: string
          format: byte
    LoadAvg:
      type: object
      properties:
        loadavg:
          type: array
          items:
            type: integer
    LocalServer:
      type: object
      required: [name, type, host]
      properties:
        name:
          type: string
        type:
          type: string
        host:
          type: string
    LogEntries:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
    LogEntry:
      type: object
      required: [type, timestamp, device_name, device_address, class, message]
      properties:
        type:
          type: string
        timestamp:
          type: integer
        device_name:
          type: string
        device_address:
          type: string
        class:
          type: string
        message:
          type: string
          format: byte
    LogStats:
      type: object
      required: [clock_statistics, discipline_statistics, peer_statistics]
      properties:
        clock_statistics:
          type: boolean
        discipline_statistics:
          type: boolean
        peer_statistics:
          type: boolean
    LoginCredentials:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
        secondfactor:
          type: string
    LoginResponse:
      type: object
      required: [token, user, version]
      properties:
        token:
          type: string
        user:
          type: string
        version:
          type: string
    Memory:
      type: object
      properties:
        memory_map:
          type: array
          items:
            $ref: '#/components/schemas/MemoryMap'
        dimms:
          type: array
          items:
            $ref: '#/components/schemas/Dimm'
        stats:
          $ref: '#/components/schemas/MemoryStat'
    MemoryMap:
      type: object
      required: [offset, size, type]
      properties:
        offset:
          type: integer
        size:
          type: integer
        type:
          type: string
    MemoryStat:
      type: object
      required: [total, reserved, used]
      properties:
        total:
          type: integer
        reserved:
          type: integer
        used:
          type: integer
    MeshStats:
      type: object
      required: [devices_total, devices_online]
      properties:
        devices_total:
          type: integer
        devices_online:
          type: integer
        vpn_conns:
          type: array
          items:
            $ref: '#/components/schemas/MeshVpnConns'
    MeshVpnConns:
      type: object
      required: [vpn_type, vpn_name, conns]
      properties:
        vpn_type:
          type: string
        vpn_name:
          type: string
        subnets:
          type: array
          items:
            type: string
        conns:
          type: string
    MonitoringDataRequest:
      type: object
      required: [scope, dataset, start_time_unix_seconds, end_time_unix_seconds, resolution_seconds]
      properties:
        scope:
          type: string
        dataset:
          type: string
        start_time_unix_seconds:
          type: integer
        end_time_unix_seconds:
          type: integer
        resolution_seconds:
          type: integer
    MonitoringDataResult:
      type: object
      required: [request, data_format]
      properties:
        request:
          $ref: '#/components/schemas/MonitoringDataRequest'
        dataseries:
          type: array
          items:
            type: string
        data_format:
          type: string
        data:
          type: array
          items:
            type: string
    MonitoringDatasetInfo:
      type: object
      required: [scope, dataset, earliest_data_time]
      properties:
        scope:
          type: string
        dataset:
          type: string
        earliest_data_time:
          type: integer
    MonitoringDatasets:
      type: object
      properties:
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/MonitoringDatasetInfo'
    NAT1To1Rule:
      type: object
      required: [id, destination, external, interface, ipprotocol, source]
      properties:
        id:
          type: string
        descr:
          type: string
        disabled:
          type: boolean
        destination:
          $ref: '#/components/schemas/NATAddrPort'
        external:
          $ref: '#/components/schemas/NATAddrPort'
        interface:
          type: string
        ipprotocol:
          type: string
        nobinat:
          type: boolean
        source:
          $ref: '#/components/schemas/NATAddrPort'
    NAT1To1Rules:
      type: object
      properties:
        destlist:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
        interfacelist:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
        aliases:
          type: array
          items:
            $ref: '#/components/schemas/FWAlias'
        sysaliases:
          type: array
          items:
            $ref: '#/components/schemas/FWSystemAlias'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/NAT1To1Rule'
    NAT1To1UpdateResult:
      type: object
      properties:
        rule:
          $ref: '#/components/schemas/NAT1To1Rule'
    NATAddrPort:
      type: object
      properties:
        address:
          type: string
        type:
          type: string
        port:
          type: string
        not:
          type: boolean
    NATAutoAddr:
      type: object
      required: [network, any]
      properties:
        network:
          type: string
        any:
          type: boolean
    NATAutoRule:
      type: object
      required: [id, interface, dstport, target, dstaddr, dstany, srcany, srcaddr, staticnatport, descr]
      properties:
        id:
          type: string
        interface:
          type: string
        dstport:
          type: string
        target:
          type: string
        destination:
          $ref: '#/components/schemas/NATAutoAddr'
        dstaddr:
          type: string
        source:
          $ref: '#/components/schemas/NATAutoAddr'
        dstany:
          type: boolean
        srcany:
          type: boolean
        srcaddr:
          type: string
        staticnatport:
          type: boolean
        descr:
          type: string
    NATNptAddr:
      type: object
      properties:
        address:
          type: string
        not:
          type: boolean
        type:
          type: string
    NATNptRule:
      type: object
      required: [destination, id, interface, source]
      properties:
        descr:
          type: string
        disabled:
          type: boolean
        destination:
          $ref: '#/components/schemas/NATNptAddr'
        id:
          type: string
        interface:
          type: string
        source:
          $ref: '#/components/schemas/NATNptAddr'
    NATNptRules:
      type: object
      required: [interfacelist, rules]
      properties:
        interfacelist:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/NATNptRule'
    NATNptUpdateResult:
      type: object
      properties:
        rule:
          $ref: '#/components/schemas/NATNptRule'
    NATOutModeUpdateResponse:
      type: object
      properties:
        mode:
          type: string
    NATOutUpdateResponse:
      type: object
      properties:
        rule:
          $ref: '#/components/schemas/NATOutboundRule'
    NATOutboundMode:
      type: object
      properties:
        mode:
          type: string
    NATOutboundRule:
      type: object
      required: [created, destination, id, interface, ipprotocol, protocol, source, target, updated]
      properties:
        created:
          $ref: '#/components/schemas/FWUserTimestamp'
        descr:
          type: string
        disabled:
          type: boolean
        destination:
          $ref: '#/components/schemas/NATAddrPort'
        id:
          type: string
        interface:
          type: string
        ipprotocol:
          type: string
        nonat:
          type: boolean
        nosync:
          type: boolean
        protocol:
          type: string
        poolopts:
          type: string
        source:
          $ref: '#/components/schemas/NATAddrPort'
        source-hash-key:
          type: string
        staticnatport:
          type: boolean
        target:
          $ref: '#/components/schemas/NATAddrPort'
        updated:
          $ref: '#/components/schemas/FWUserTimestamp'
    NATOutboundRules:
      type: object
      properties:
        destlist:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
        interfacelist:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
        locallist:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
        mode:
          type: string
        aliases:
          type: array
          items:
            $ref: '#/components/schemas/FWAlias'
        sysaliases:
          type: array
          items:
            $ref: '#/components/schemas/FWSystemAlias'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/NATOutboundRule'
        automatic_rules:
          type: array
          items:
            $ref: '#/components/schemas/NATAutoRule'
        srclist:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
    NATRule:
      type: object
      required: [id, associated_rule_id, created, destination, interface, natreflection, protocol, ipprotocol, source, updated]
      properties:
        id:
          type: string
        associated_rule_id:
          type: string
        created:
          $ref: '#/components/schemas/FWUserTimestamp'
        descr:
          type: string
        disabled:
          type: boolean
        destination:
          $ref: '#/components/schemas/NATAddrPort'
        filter_rule_association:
          type: string
        interface:
          type: string
        target:
          $ref: '#/components/schemas/NATAddrPort'
        natreflection:
          type: string
        nordr:
          type: boolean
        protocol:
          type: string
        ipprotocol:
          type: string
        source:
          $ref: '#/components/schemas/NATAddrPort'
        updated:
          $ref: '#/components/schemas/FWUserTimestamp'
    NATRuleOrder:
      type: object
      properties:
        rule:
          type: array
          items:
            type: string
    NATRules:
      type: object
      properties:
        destlist:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
        interfacelist:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
        locallist:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
        aliases:
          type: array
          items:
            $ref: '#/components/schemas/FWAlias'
        sysaliases:
          type: array
          items:
            $ref: '#/components/schemas/FWSystemAlias'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/NATRule'
        separators:
          type: array
          items:
            $ref: '#/components/schemas/Separator'
        srclist:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
    NATUpdateResult:
      type: object
      properties:
        rule:
          $ref: '#/components/schemas/NATRule'
    NDPEntry:
      type: object
      required: [ipv6, mac, iface, hostname, exp, status, flags]
      properties:
        ipv6:
          type: string
        mac:
          type: string
        iface:
          type: string
        hostname:
          type: string
        exp:
          type: string
        status:
          type: string
        flags:
          type: string
    NDPTable:
      type: object
      properties:
        ndptable:
          type: array
          items:
            $ref: '#/components/schemas/NDPEntry'
    NetIf:
      type: object
      description: |
        Network interface descriptor. By default, the assigned name of the interface
        is the same as the identity. Both the assigned and identity names can be
        changed in the configuration. The device_name can be changed if the driver
        supports it.
      required: [assigned_name, device_name, identity, descr, enable, pseudo, addr_type, addr6_type, options, addr, dhcp, ipv6rd, ownership, device_config, info]
      properties:
        assigned_name:
          type: string
          description: user assigned name, e.g. MYLAN
        device_name:
          type: string
          description: host device name, e.g. ix1
        identity:
          type: string
          description: identity of device, e.g. opt1
        descr:
          type: string
          description: user provided interface description
        enable:
          type: boolean
          description: interface is enabled
        pseudo:
          type: boolean
          description: logical interface, such as a PPP tunnel
        addr_type:
          type: string
          description: one of (dhcp, ipaddr)
        addr6_type:
          type: string
          description: one of (slaac, dhcp6, 6to4, 6rd, ipaddrv6, none)
        options:
          $ref: '#/components/schemas/NetIfOptions'
        addr:
          $ref: '#/components/schemas/NetIfAddr'
        dhcp:
          $ref: '#/components/schemas/NetIfDhcp'
        ipv6rd:
          $ref: '#/components/schemas/NetIfIpv6RD'
        ownership:
          $ref: '#/components/schemas/NetIfOwner'
        device_config:
          $ref: '#/components/schemas/NetIfDevConfig'
        info:
          $ref: '#/components/schemas/NetIfInfo'
    NetIfAddr:
      type: object
      required: [ipaddr, gateway_ip, gateway_name, alias_address, ipaddrv6, default_gw6, gateway_ip6, gateway_descr6, gateway_name6, ipv6_usev4_iface, slaac_usev4_iface]
      properties:
        ipaddr:
          type: string
        gateway_ip:
          type: string
        gateway_name:
          type: string
        alias_address:
          type: string
        ipaddrv6:
          type: string
        default_gw6:
          type: boolean
        gateway_ip6:
          type: string
        gateway_descr6:
          type: string
        gateway_name6:
          type: string
        ipv6_usev4_iface:
          type: boolean
        slaac_usev4_iface:
          type: boolean
    NetIfAssignOwnerReq:
      type: object
      description: |
        owner_id is the identifier of the subsystem taking ownership of the
        interface.
        
        If the owner_type is set to "host", then it is returned
        to the host.
      required: [owner_type, owner_id]
      properties:
        owner_type:
          type: string
          enum: ['host', 'vpp', 'container', 'vm']
        owner_id:
          type: string
    NetIfDevConfig:
      type: object
      required: [device, bus_path, mac, parent_device, parent_path, iftype, members]
      properties:
        device:
          type: string
          description: original name of the device
        bus_path:
          type: string
          description: BUS path of the device
        mac:
          type: string
          description: original MAC address
        parent_device:
          type: string
          description: parent device
        parent_path:
          type: string
          description: parent device bus path
        iftype:
          type: string
          description: interface type
        members:
          type: array
          items:
            type: string
            description: members/children (by assigned name) of this interface
    NetIfDhcp:
      type: object
      required: [dhcp_hostname, dhcp_reject_from, dhcp_vlan_enable, dhcp_vlan_priority, dhcp6_usev4_iface, dhcp6_prefix_only, dhcp6_ia_pd_send_hint, dhcp6_debug, dhcp6_without_ra, dhcp6_no_release, dhcp6_vlan_priority, enable_adv_opt, enable_adv6_opt, dhcp_advanced, dhcp6_advanced]
      properties:
        dhcp_hostname:
          type: string
        dhcp_reject_from:
          type: array
          items:
            type: string
        dhcp_vlan_enable:
          type: boolean
        dhcp_vlan_priority:
          type: integer
        dhcp6_usev4_iface:
          type: boolean
        dhcp6_prefix_only:
          type: boolean
        dhcp6_ia_pd_send_hint:
          type: boolean
        dhcp6_debug:
          type: boolean
        dhcp6_without_ra:
          type: boolean
        dhcp6_no_release:
          type: boolean
        dhcp6_vlan_priority:
          type: integer
        enable_adv_opt:
          type: boolean
          description: enable DHCP v4 advanced options
        enable_adv6_opt:
          type: boolean
          description: enable DHCP v6 advanced options
        dhcp_advanced:
          $ref: '#/components/schemas/DhcpAdvancedOptions'
        dhcp6_advanced:
          $ref: '#/components/schemas/Dhcp6AdvancedOptions'
    NetIfInfo:
      type: object
      description: Information about the interface as identified on the host
      required: [media, state]
      properties:
        media:
          type: string
        state:
          type: string
    NetIfIpv6RD:
      type: object
      required: [prefix_6rd, gateway_6rd, track6_prefix_id_hex, prefix_6rd_v4plen, track6_interface]
      properties:
        prefix_6rd:
          type: string
        gateway_6rd:
          type: string
        track6_prefix_id_hex:
          type: string
        prefix_6rd_v4plen:
          type: string
        track6_interface:
          type: string
    NetIfOptions:
      type: object
      required: [blockbogons, blockpriv, mtu, mss, pcp, promisc, member, mac, mediaopt, spoofmac, tag]
      properties:
        blockbogons:
          type: boolean
        blockpriv:
          type: boolean
        mtu:
          type: integer
        mss:
          type: integer
        pcp:
          type: integer
        promisc:
          type: boolean
        member:
          type: string
        mac:
          type: string
        mediaopt:
          type: string
        spoofmac:
          type: string
        tag:
          type: integer
    NetIfOwner:
      type: object
      description: |
        An interface can be owned by different OS subsystems: host, vpp,
        container or vm (virtual machine). Other than a host-owner, each
        owner has a unique ID and linked to its associated configuraton.
      required: [owner_type, owner_id]
      properties:
        owner_type:
          type: string
        owner_id:
          type: string
        host_config:
          $ref: '#/components/schemas/NetIfOwnerHost'
        vpp_config:
          $ref: '#/components/schemas/NetIfOwnerVPP'
        container_config:
          $ref: '#/components/schemas/NetIfOwnerContainer'
        vm_config:
          $ref: '#/components/schemas/NetIfOwnerVM'
    NetIfOwnerContainer:
      type: object
      properties:
        ctn_id:
          type: string
          description: ID of container
    NetIfOwnerHost:
      type: object
      required: [wol, hw_flags]
      properties:
        wol:
          type: boolean
        hw_flags:
          type: string
          description: comma-separated flags configured on interface, e.g. TSO, LRO, etc
    NetIfOwnerVM:
      type: object
      properties:
        vm_id:
          type: string
    NetIfOwnerVPP:
      type: object
      properties:
        name:
          type: string
          description: interface name set in VPP
    NetIfs:
      type: object
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/NetIf'
    NewCRLReq:
      type: object
      required: [ca_refid, descr]
      properties:
        ca_refid:
          type: string
          description: CA reference ID
        descr:
          type: string
          description: descriptive name
        method_internal:
          $ref: '#/components/schemas/CRLMethodNew'
        method_x509:
          $ref: '#/components/schemas/CRLMethodX509'
    NewCaCertReq:
      type: object
      description: |
        Request for creating a new CA cert or updating an existing one.
        - name: short description about certificate
        - trust: add to OS trusted cert store
        - randomize_serial: use random serial numbers when signing certificates
        - one of: method_internal (self-signed), mehod_existing (import), or method_intermediate (signed by another CA)
      required: [name, trust, randomize_serial]
      properties:
        name:
          type: string
        trust:
          type: boolean
        randomize_serial:
          type: boolean
        method_internal:
          $ref: '#/components/schemas/CaCertMethodNew'
        method_existing:
          $ref: '#/components/schemas/CaCertMethodExisting'
        method_intermediate:
          $ref: '#/components/schemas/CaCertMethodNew'
    NewCertReq:
      type: object
      description: |
        Request for creating a cert or updating an existing one.
        - name: short description about certificate
        - userid: user-ID for user-specific certificate, eg for VPN
        - description:  Descriptive name
        - one of the method_xxxx
      required: [name, descr, description]
      properties:
        name:
          type: string
        descr:
          type: string
        description:
          type: string
        userid:
          type: integer
        method_internal:
          $ref: '#/components/schemas/CertMethodNew'
        method_existing_pem:
          $ref: '#/components/schemas/CertMethodExistingPEM'
        method_existing_pkcs12:
          $ref: '#/components/schemas/CertMethodExistingPkcs12'
        method_csr:
          $ref: '#/components/schemas/CertMethodSigningRequest'
        method_sign:
          $ref: '#/components/schemas/CertMethodSignCSR'
    NewInterfaceResult:
      type: object
      properties:
        name:
          type: string
    NexusControllerInfo:
      type: object
      required: [addresses, public_key, vpn_addr]
      properties:
        addresses:
          type: array
          items:
            type: string
        public_key:
          type: string
        vpn_addr:
          type: string
    NtpAccessRestrictions:
      type: object
      required: [kod, nomodify, noquery, noserve, nopeer, notrap]
      properties:
        kod:
          type: boolean
        nomodify:
          type: boolean
        noquery:
          type: boolean
        noserve:
          type: boolean
        nopeer:
          type: boolean
        notrap:
          type: boolean
    NtpAcls:
      type: object
      properties:
        default_restrictions:
          $ref: '#/components/schemas/NtpAccessRestrictions'
        custom_restrictions:
          type: array
          items:
            $ref: '#/components/schemas/NtpNetworkAccessRestriction'
    NtpGpsFlags:
      type: object
      required: [prefer_this_clock, do_not_select_this_clock, enable_pps_signal_processing, enable_falling_edge_pps_signal_processing, enable_kernel_pps_clock_disciple, obscure_location_in_timestamp, log_subsecond_received_timestamp, display_extended_gps_status]
      properties:
        prefer_this_clock:
          type: boolean
        do_not_select_this_clock:
          type: boolean
        enable_pps_signal_processing:
          type: boolean
        enable_falling_edge_pps_signal_processing:
          type: boolean
        enable_kernel_pps_clock_disciple:
          type: boolean
        obscure_location_in_timestamp:
          type: boolean
        log_subsecond_received_timestamp:
          type: boolean
        display_extended_gps_status:
          type: boolean
    NtpNetworkAccessRestriction:
      type: object
      required: [network, mask, restrictions]
      properties:
        network:
          type: string
        mask:
          type: integer
        restrictions:
          $ref: '#/components/schemas/NtpAccessRestrictions'
    NtpPps:
      type: object
      required: [port, fudge1, stratum, ppsminpoll, ppsmaxpoll, pps_flags, refid]
      properties:
        port:
          type: string
        fudge1:
          type: number
          format: float
        stratum:
          type: integer
        ppsminpoll:
          type: string
        ppsmaxpoll:
          type: string
        pps_flags:
          $ref: '#/components/schemas/NtpPpsFlags'
        refid:
          type: string
    NtpPpsFlags:
      type: object
      required: [enable_falling_edge_pps_signal_processing, enable_kernel_pps_clock_disciple, record_a_timestamp_once_for_each_second]
      properties:
        enable_falling_edge_pps_signal_processing:
          type: boolean
        enable_kernel_pps_clock_disciple:
          type: boolean
        record_a_timestamp_once_for_each_second:
          type: boolean
    NtpSerialGps:
      type: object
      required: [type, port, speed, autobaudinit, nmea, fudge1, fudge2, stratum, gpsminpoll, gpsmaxpoll, ntp_gps_flags, refid, initcmd, autocorrect_initcmd]
      properties:
        type:
          type: string
        port:
          type: string
        speed:
          type: string
        autobaudinit:
          type: boolean
        nmea:
          type: integer
        fudge1:
          type: number
          format: float
        fudge2:
          type: number
          format: float
        stratum:
          type: integer
        gpsminpoll:
          type: string
        gpsmaxpoll:
          type: string
        ntp_gps_flags:
          $ref: '#/components/schemas/NtpGpsFlags'
        refid:
          type: string
        initcmd:
          type: string
          format: byte
        autocorrect_initcmd:
          type: boolean
    NtpServer:
      type: object
      required: [addr, type, prefer, no_select]
      properties:
        addr:
          type: string
        type:
          type: string
        prefer:
          type: boolean
        no_select:
          type: boolean
    NtpServerInfo:
      type: object
      required: [status, server, refid, stratum, type, when, poll, reach, delay, offset, jitter]
      properties:
        status:
          type: string
        server:
          type: string
        refid:
          type: string
        stratum:
          type: string
        type:
          type: string
        when:
          type: string
        poll:
          type: string
        reach:
          type: string
        delay:
          type: string
        offset:
          type: string
        jitter:
          type: string
    NtpSettings:
      type: object
      required: [enable, ntpmaxpeers, orphan, ntpminpoll, ntpmaxpoll, statsgraph, logpeer, logsys, log_stats, leapsec, dnsresolv, serverauth, serverauthkey, serverauthalgo]
      properties:
        enable:
          type: boolean
        interfaces:
          type: array
          items:
            type: string
        servers:
          type: array
          items:
            $ref: '#/components/schemas/NtpServer'
        ntpmaxpeers:
          type: string
        orphan:
          type: string
        ntpminpoll:
          type: string
          description: |
            Empty for default, "omit" or number ranged from 3 to 17 based on pfsense specific approach
        ntpmaxpoll:
          type: string
          description: |
            Empty for default, "omit" or number ranged from 3 to 17 based on pfsense specific approach
        statsgraph:
          type: boolean
        logpeer:
          type: boolean
        logsys:
          type: boolean
        log_stats:
          $ref: '#/components/schemas/LogStats'
        leapsec:
          type: string
          format: byte
        dnsresolv:
          type: string
          description: |
            auto | inet | inet6
        serverauth:
          type: boolean
        serverauthkey:
          type: string
          format: byte
        serverauthalgo:
          type: string
          description: |
            md5 (length 1 to 20) | sha1 (length 40) | sha256 (length 64)
    NtpStatus:
      type: object
      required: [enabled, query_enabled]
      properties:
        enabled:
          type: boolean
        query_enabled:
          type: boolean
        servers:
          type: array
          items:
            $ref: '#/components/schemas/NtpServerInfo'
    OSSoftwarePackages:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SoftwarePackageList'
    OpenVPNActiveConn:
      type: object
      required: [vpnid, port, mode, name, mgmt, connect_time, state, state_detail, virtual_addr, remote_host, remote_port, local_host, local_port, virtual_addr6, status, bytes_recv, bytes_sent]
      properties:
        vpnid:
          type: string
        port:
          type: string
        mode:
          type: string
        name:
          type: string
        mgmt:
          type: string
        conns:
          type: array
          items:
            $ref: '#/components/schemas/OpenVPNConn'
        routes:
          type: array
          items:
            $ref: '#/components/schemas/OpenVPNRoute'
        connect_time:
          type: string
        state:
          type: string
        state_detail:
          type: string
        virtual_addr:
          type: string
        remote_host:
          type: string
        remote_port:
          type: string
        local_host:
          type: string
        local_port:
          type: string
        virtual_addr6:
          type: string
        status:
          type: string
        bytes_recv:
          type: string
        bytes_sent:
          type: string
    OpenVPNCSO:
      type: object
      properties:
        csc:
          $ref: '#/components/schemas/OpenVPNCSOConfig'
    OpenVPNCSOConfig:
      type: object
      required: [disable, server_list, common_name, block, description, tunnel_network, tunnel_networkv6, local_network, local_networkv6, remote_network, remote_networkv6, gwredir, push_reset, remove_route, dns_domain_enable, dns_domain, dns_server_enable, dns_server1, dns_server2, dns_server3, dns_server4, ntp_server_enable, ntp_server1, ntp_server2, netbios_enable, netbios_ntype, netbios_scope, wins_server_enable, wins_server1, wins_server2, nbdd_server_enable, nbdd_server1, nbdd_server2, custom_options]
      properties:
        disable:
          type: boolean
        server_list:
          type: string
        common_name:
          type: string
        block:
          type: boolean
        description:
          type: string
        tunnel_network:
          type: string
        tunnel_networkv6:
          type: string
        local_network:
          type: string
        local_networkv6:
          type: string
        remote_network:
          type: string
        remote_networkv6:
          type: string
        gwredir:
          type: boolean
        push_reset:
          type: boolean
        remove_route:
          type: boolean
        dns_domain_enable:
          type: boolean
        dns_domain:
          type: string
        dns_server_enable:
          type: boolean
        dns_server1:
          type: string
        dns_server2:
          type: string
        dns_server3:
          type: string
        dns_server4:
          type: string
        ntp_server_enable:
          type: boolean
        ntp_server1:
          type: string
        ntp_server2:
          type: string
        netbios_enable:
          type: boolean
        netbios_ntype:
          type: string
        netbios_scope:
          type: string
        wins_server_enable:
          type: boolean
        wins_server1:
          type: string
        wins_server2:
          type: string
        nbdd_server_enable:
          type: boolean
        nbdd_server1:
          type: string
        nbdd_server2:
          type: string
        custom_options:
          type: string
    OpenVPNCSOs:
      type: object
      properties:
        cscs:
          type: array
          items:
            $ref: '#/components/schemas/OpenVPNCSOConfig'
    OpenVPNClient:
      type: object
      properties:
        client:
          $ref: '#/components/schemas/OpenVPNClientConfig'
    OpenVPNClientConfig:
      type: object
      required: [vpnid, disable, dco, protocol, dev_mode, interface, ipaddr, local_port, server_addr, server_port, proxy_addr, proxy_port, proxy_authtype, description, mode, topology, custom_options, caref, certref, crlref, tlsauth_enable, autokey_enable, autotls_enable, tls, tls_type, tlsauth_keydir, remote_cert_tls, shared_key, digest, tunnel_network, tunnel_networkv6, remote_network, remote_networkv6, use_shaper, allow_compression, compression, auth-retry-none, passtos, udp_fast_io, exit_notify, sndrcvbuf, route_no_pull, route_no_exec, dns_add, verbosity_level, create_gw, dh_length, data_ciphers_fallback, ping_method, keepalive_interval, keepalive_timeout, ping_seconds, ping_action, ping_action_seconds, inactive_seconds]
      properties:
        vpnid:
          type: string
        disable:
          type: boolean
        dco:
          type: boolean
        protocol:
          type: string
        dev_mode:
          type: string
        interface:
          type: string
        ipaddr:
          type: string
        local_port:
          type: integer
        server_addr:
          type: string
        server_port:
          type: string
        proxy_addr:
          type: string
        proxy_port:
          type: string
        proxy_authtype:
          type: string
        description:
          type: string
        mode:
          type: string
        topology:
          type: string
        custom_options:
          type: string
        caref:
          type: string
        certref:
          type: string
        crlref:
          type: string
        tlsauth_enable:
          type: boolean
        autokey_enable:
          type: boolean
        autotls_enable:
          type: boolean
        tls:
          type: string
        tls_type:
          type: string
        tlsauth_keydir:
          type: string
        remote_cert_tls:
          type: boolean
        shared_key:
          type: string
        digest:
          type: string
        tunnel_network:
          type: string
        tunnel_networkv6:
          type: string
        remote_network:
          type: string
        remote_networkv6:
          type: string
        use_shaper:
          type: string
        allow_compression:
          type: string
        compression:
          type: string
        auth-retry-none:
          type: boolean
        passtos:
          type: boolean
        udp_fast_io:
          type: boolean
        exit_notify:
          type: string
        sndrcvbuf:
          type: string
        route_no_pull:
          type: boolean
        route_no_exec:
          type: boolean
        dns_add:
          type: boolean
        verbosity_level:
          type: string
        create_gw:
          type: string
        dh_length:
          type: string
        data_ciphers:
          type: array
          items:
            type: string
        data_ciphers_fallback:
          type: string
        ping_method:
          type: string
        keepalive_interval:
          type: string
        keepalive_timeout:
          type: string
        ping_seconds:
          type: string
        ping_action:
          type: string
        ping_action_seconds:
          type: string
        inactive_seconds:
          type: string
    OpenVPNClients:
      type: object
      properties:
        clients:
          type: array
          items:
            $ref: '#/components/schemas/OpenVPNClientConfig'
    OpenVPNConn:
      type: object
      required: [common_name, remote_host, virtual_addr, virtual_addr6, bytes_recv, bytes_sent, connect_time, connect_time_unix, user_name, client_id, peer_id, cipher]
      properties:
        common_name:
          type: string
        remote_host:
          type: string
        virtual_addr:
          type: string
        virtual_addr6:
          type: string
        bytes_recv:
          type: string
        bytes_sent:
          type: string
        connect_time:
          type: string
        connect_time_unix:
          type: string
        user_name:
          type: string
        client_id:
          type: string
        peer_id:
          type: string
        cipher:
          type: string
    OpenVPNRoute:
      type: object
      required: [virtual_addr, common_name, remote_host, last_time]
      properties:
        virtual_addr:
          type: string
        common_name:
          type: string
        remote_host:
          type: string
        last_time:
          type: string
    OpenVPNServer:
      type: object
      properties:
        authservers:
          type: array
          items:
            type: string
        server:
          $ref: '#/components/schemas/OpenVPNServerConfig'
    OpenVPNServerConfig:
      type: object
      required: [vpnid, dco, mode, protocol, dev_mode, interface, local_port, description, tls, tls_type, certref, caref, dh_length, data_ciphers_fallback, digest, engine, tunnel_network, local_network, maxclients, allow_compression, dynamic_ip, topology, dns_domain, exit_notify, inactive_seconds, disable, tlsauth_enable, autotls_enable, tlsauth_keydir, ocspcheck, ocspurl, ecdh_curve, autokey_enable, shared_key, cert_depth, remote_cert_tls, tunnel_networkv6, serverbridge_dhcp, serverbridge_interface, serverbridge_routegateway, serverbridge_dhcp_start, serverbridge_dhcp_end, gwredir, gwredir6, local_networkv6, remote_network, remote_networkv6, compression, compression_push, passtos, client2client, duplicate_cn, ping_method, keepalive_interval, keepalive_timeout, ping_seconds, ping_push, ping_action, ping_action_seconds, ping_action_push, dns_domain_enable, dns_server_enable, dns_server1, dns_server2, dns_server3, dns_server4, push_blockoutsidedns, push_register_dns, ntp_server_enable, ntp_server1, ntp_server2, netbios_enable, netbios_ntype, netbios_scope, wins_server_enable, wins_server1, wins_server2, custom_options, username_as_common_name, udp_fast_io, sndrcvbuf, create_gw, verbosity_level, strictusercn]
      properties:
        vpnid:
          type: string
        dco:
          type: boolean
        mode:
          type: string
        authmode:
          type: array
          items:
            type: string
        protocol:
          type: string
        dev_mode:
          type: string
        interface:
          type: string
        local_port:
          type: integer
        description:
          type: string
        tls:
          type: string
        tls_type:
          type: string
        certref:
          type: string
        caref:
          type: string
        dh_length:
          type: string
        data_ciphers:
          type: array
          items:
            type: string
        data_ciphers_fallback:
          type: string
        digest:
          type: string
        engine:
          type: string
        tunnel_network:
          type: string
        local_network:
          type: string
        maxclients:
          type: string
        allow_compression:
          type: string
        dynamic_ip:
          type: boolean
        topology:
          type: string
        dns_domain:
          type: string
        exit_notify:
          type: string
        inactive_seconds:
          type: string
        disable:
          type: boolean
        tlsauth_enable:
          type: boolean
        autotls_enable:
          type: boolean
        tlsauth_keydir:
          type: string
        ocspcheck:
          type: boolean
        ocspurl:
          type: string
        ecdh_curve:
          type: string
        autokey_enable:
          type: boolean
        shared_key:
          type: string
        cert_depth:
          type: string
        remote_cert_tls:
          type: boolean
        tunnel_networkv6:
          type: string
        serverbridge_dhcp:
          type: string
        serverbridge_interface:
          type: string
        serverbridge_routegateway:
          type: string
        serverbridge_dhcp_start:
          type: string
        serverbridge_dhcp_end:
          type: string
        gwredir:
          type: boolean
        gwredir6:
          type: boolean
        local_networkv6:
          type: string
        remote_network:
          type: string
        remote_networkv6:
          type: string
        compression:
          type: string
        compression_push:
          type: boolean
        passtos:
          type: boolean
        client2client:
          type: boolean
        duplicate_cn:
          type: boolean
        ping_method:
          type: string
        keepalive_interval:
          type: string
        keepalive_timeout:
          type: string
        ping_seconds:
          type: string
        ping_push:
          type: boolean
        ping_action:
          type: string
        ping_action_seconds:
          type: string
        ping_action_push:
          type: boolean
        dns_domain_enable:
          type: boolean
        dns_server_enable:
          type: boolean
        dns_server1:
          type: string
        dns_server2:
          type: string
        dns_server3:
          type: string
        dns_server4:
          type: string
        push_blockoutsidedns:
          type: boolean
        push_register_dns:
          type: boolean
        ntp_server_enable:
          type: boolean
        ntp_server1:
          type: string
        ntp_server2:
          type: string
        netbios_enable:
          type: boolean
        netbios_ntype:
          type: string
        netbios_scope:
          type: string
        wins_server_enable:
          type: boolean
        wins_server1:
          type: string
        wins_server2:
          type: string
        custom_options:
          type: string
        username_as_common_name:
          type: boolean
        udp_fast_io:
          type: boolean
        sndrcvbuf:
          type: string
        create_gw:
          type: string
        verbosity_level:
          type: string
        strictusercn:
          type: boolean
    OpenVPNServers:
      type: object
      properties:
        authservers:
          type: array
          items:
            type: string
        servers:
          type: array
          items:
            $ref: '#/components/schemas/OpenVPNServerConfig'
    OpenVPNStatus:
      type: object
      properties:
        servers:
          type: array
          items:
            $ref: '#/components/schemas/OpenVPNActiveConn'
        sk_servers:
          type: array
          items:
            $ref: '#/components/schemas/OpenVPNActiveConn'
        clients:
          type: array
          items:
            $ref: '#/components/schemas/OpenVPNActiveConn'
    OsSocket:
      type: object
      required: [user, command, fd, pid, proto, local, foreign]
      properties:
        user:
          type: string
        command:
          type: string
        fd:
          type: string
        pid:
          type: string
        proto:
          type: string
        local:
          type: string
        foreign:
          type: string
    OsSocketList:
      type: object
      required: [ipv4, ipv6]
      properties:
        ipv4:
          type: array
          items:
            $ref: '#/components/schemas/OsSocket'
        ipv6:
          type: array
          items:
            $ref: '#/components/schemas/OsSocket'
    PFlowExporter:
      type: object
      required: [id, descr, enable, src, srcport, dst, dstport, proto, domain]
      properties:
        id:
          type: string
        descr:
          type: string
        enable:
          type: boolean
        src:
          type: string
        srcport:
          type: integer
        dst:
          type: string
        dstport:
          type: integer
        proto:
          type: string
        domain:
          type: integer
    PFlowGlobalOptions:
      type: object
      required: [options, src_ip_address]
      properties:
        options:
          $ref: '#/components/schemas/PFlowOptions'
        exporters:
          type: array
          items:
            $ref: '#/components/schemas/PFlowExporter'
        src_ip_address:
          type: object
          additionalProperties:
            type: string
    PFlowOptions:
      type: object
      required: [enable, default]
      properties:
        enable:
          type: boolean
        default:
          type: boolean
    PPPCapableInterface:
      type: object
      required: [if_device, desc]
      properties:
        if_device:
          type: string
        desc:
          type: string
    PPPCapableInterfaces:
      type: object
      required: [serials, interfaces]
      properties:
        serials:
          type: array
          items:
            $ref: '#/components/schemas/PPPCapableInterface'
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/PPPCapableInterface'
    PPPInterface:
      type: object
      required: [ptpid, if_device, type, link_interfaces, descr, username, password, phone, apn, apnum, simpin, pin_wait, initstr, connect_timeout, uptime, country, providerplan, provider, null_service, pppoe_reset_type, pppoe_pr_preset_val, pppoe_resethour, pppoe_resetminute, pppoe_resetdate, pppoe_multilink_over_singlelink, pppoe_mtu_override, l2tp_secret, ondemand, idletimeout, vjcomp, tcpmssfix, shortseq, acfcomp, protocomp]
      properties:
        ptpid:
          type: string
          description: generated by system when a PPP is created
        if_device:
          type: string
          description: generated by system when a PPP is created
        type:
          type: string
          description: |
            link type
            valid value = ppp, pppoe, pptp, l2tp
          enum: ['ppp', 'pppoe', 'pptp', 'l2tp']
        link_interfaces:
          type: array
          items:
            $ref: '#/components/schemas/PPPLinkInterface'
        descr:
          type: string
          description: description
        username:
          type: string
        password:
          type: string
          description: |
            GET request will return ******** to protect previously entered password
            POST and PUT request need to send password encoded in base64
        phone:
          type: string
          description: (type ppp only) phone number to ISP
        apn:
          type: string
          description: (type ppp only) access point name
        apnum:
          type: string
          description: (type ppp only) apn number, default to 1 if apn is set
        simpin:
          type: string
          description: (type ppp only) security code on the SIM
        pin_wait:
          type: string
          description: (type ppp only) seconds to wait for the SIM to discover network after the PIN is sent
        initstr:
          type: string
          description: (type ppp only and base64 encoded) modem initialization string, if necessary
        connect_timeout:
          type: string
          description: (type ppp only) time to wait for a connection attempt to succeed
        uptime:
          type: boolean
          description: (type ppp only) tracks the uptime for the connection
        country:
          type: string
          description: (type ppp only) country in which the modem resides
        providerplan:
          type: string
          description: (type ppp only) type of cellular service this modem uses from provider
        provider:
          type: string
          description: |
            (for type ppp) cellular service provider for the modem
            (for type pppoe) service name of the ISP, leave blank for most ISPs
        null_service:
          type: boolean
          description: (type pppoe only) some ISPs require to send a NULL value instead of a blank service name
        pppoe_reset_type:
          type: string
          description: |
            (type pppoe only) configures a preset time to reset the connection
            valid value = custom, preset
          enum: ['custom', 'preset']
        pppoe_pr_preset_val:
          type: string
          description: |
            (type pppoe only and pppoe_pr_preset_val = "preset") connection reset frequency
            valid value = monthly, weekly, daily, hourly
          enum: ['monthly', 'weekly', 'daily', 'hourly']
        pppoe_resethour:
          type: string
          description: |
            (type pppoe only and pppoe_pr_preset_val = "custom") hour of the reset date/time
        pppoe_resetminute:
          type: string
          description: |
            (type pppoe only and pppoe_pr_preset_val = "custom") minute of the reset date/time
        pppoe_resetdate:
          type: string
          description: |
            (type pppoe only and pppoe_pr_preset_val = "custom") date of the reset date/time
        pppoe_multilink_over_singlelink:
          type: boolean
          description: (type pppoe only) use LCP multi-link extensions over a single link
        pppoe_mtu_override:
          type: boolean
          description: (type pppoe only) overrides the MTU negotiated with the ISP
        l2tp_secret:
          type: string
          description: (type l2tp only and base64 encoded) l2tp tunnel shared secret, optional
        ondemand:
          type: boolean
          description: dial On demand mode
        idletimeout:
          type: integer
          description: number of idle seconds to disconnect the connection
        vjcomp:
          type: boolean
          description: disable Van Jacobson TCP header compression, auto-negotiated by default
        tcpmssfix:
          type: boolean
          description: disable TCP maximum segment size fix, enabled by default
        shortseq:
          type: boolean
          description: for multi-link PPP, disable shorter multi-link fragment headers, auto-negotiated by default
        acfcomp:
          type: boolean
          description: disable address and control field compression, auto-negotiated by default
        protocomp:
          type: boolean
          description: disable protocol field compression, auto-negotiated by default
    PPPInterfaces:
      type: object
      required: [interfaces, ppp_capable_ifs]
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/PPPInterface'
        ppp_capable_ifs:
          $ref: '#/components/schemas/PPPCapableInterfaces'
    PPPLinkInterface:
      type: object
      required: [if_device, bandwidth, mtu, mru, mrru, localip, subnet, gateway]
      properties:
        if_device:
          type: string
          description: device name of the interface used for the link
        bandwidth:
          type: integer
        mtu:
          type: integer
        mru:
          type: integer
        mrru:
          type: integer
        localip:
          type: string
          description: (type pptp and l2tp only) local ip address
        subnet:
          type: integer
          description: (type pptp and l2tp only) local ip address subnet
        gateway:
          type: string
          description: (type pptp and l2tp only) gateway ip address or hostname
    PPPoEConfig:
      type: object
      properties:
        pppoe:
          type: array
          items:
            $ref: '#/components/schemas/PPPoEServer'
        interfaces:
          type: array
          items:
            type: string
    PPPoEConfigReq:
      type: object
      properties:
        pppoe:
          type: array
          items:
            $ref: '#/components/schemas/PPPoEServer'
    PPPoEServer:
      type: object
      required: [remoteip, localip, mode, interface, n_pppoe_units, n_pppoe_maxlogin, pppoe_subnet, descr, radius, dns1, dns2, pppoeid, username]
      properties:
        remoteip:
          type: string
        localip:
          type: string
        mode:
          type: string
        interface:
          type: string
        n_pppoe_units:
          type: string
        n_pppoe_maxlogin:
          type: string
        pppoe_subnet:
          type: string
        descr:
          type: string
        radius:
          $ref: '#/components/schemas/Radius'
        dns1:
          type: string
        dns2:
          type: string
        pppoeid:
          type: string
        username:
          type: string
    Package:
      type: object
      required: [name, internal_name, info_link, descr, version, config_file, include_file, category]
      properties:
        name:
          type: string
        internal_name:
          type: string
        info_link:
          type: string
        descr:
          type: string
        version:
          type: string
        config_file:
          type: string
        include_file:
          type: string
        category:
          type: string
        depedencies:
          type: array
          items:
            type: string
    PackageInstallProgress:
      type: object
      required: [name, version, percent, error, action]
      properties:
        name:
          type: string
        version:
          type: string
        messages:
          type: array
          items:
            type: string
        percent:
          type: integer
        error:
          type: string
        action:
          type: string
    Packages:
      type: object
      properties:
        packages:
          type: array
          items:
            $ref: '#/components/schemas/Package'
    PacketCapture:
      type: object
      required: [capture, starttime, endtime, running, interfaces]
      properties:
        capture:
          type: string
          format: byte
        starttime:
          type: string
        endtime:
          type: string
        running:
          type: boolean
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/PcapInterface'
    PacketCaptureRequest:
      type: object
      description: |
        valid values:
        action = "start", "stop"
        proto = "icmp", "icmp6", "tcp" , "udp", "arp", "carp", "esp", "pfsync", "ospf"
        detail = "full", "high", "medium", "normal"
      required: [action, host, interface, promiscuous, count, snaplen, port, detail, fam, proto, dnsquery]
      properties:
        action:
          type: string
        host:
          type: string
        interface:
          type: string
        promiscuous:
          type: boolean
        count:
          type: integer
        snaplen:
          type: integer
        port:
          type: string
        detail:
          type: string
        fam:
          type: string
        proto:
          type: string
        dnsquery:
          type: boolean
    PassthruMac:
      type: object
      required: [action, mac, bw_up, bw_down, descr]
      properties:
        action:
          type: string
        mac:
          type: string
        bw_up:
          type: string
        bw_down:
          type: string
        descr:
          type: string
    PcapInterface:
      type: object
      required: [if, name]
      properties:
        if:
          type: string
        name:
          type: string
    PfConfiguration:
      type: object
      properties:
        config:
          type: string
    PfInfo:
      type: object
      required: [info, memory, timeouts, interfaces]
      properties:
        info:
          type: string
          format: byte
        memory:
          type: string
          format: byte
        timeouts:
          type: string
          format: byte
        interfaces:
          type: string
          format: byte
    PfInfoResponse:
      type: object
      properties:
        pfinfo:
          $ref: '#/components/schemas/PfInfo'
    PfsenseResult:
      type: object
      properties:
        msg:
          type: string
        alrt:
          type: boolean
        sb:
          type: boolean
        alrtoln:
          type: boolean
        alrtclr:
          type: string
        auth:
          type: boolean
        status:
          type: string
        message:
          type: string
    PftopResponse:
      type: object
      properties:
        pftop:
          type: string
          format: byte
    Phase1:
      type: object
      required: [ikeid, iketype, interface, remote_gateway, protocol, myid_type, myid_data, peerid_type, peerid_data, encryption, lifetime, rekey_time, reauth_time, rand_time, pre_shared_key, private_key, certref, pkcs11certref, pkcs11pin, caref, authentication_method, descr, nat_traversal, mobike, startaction, closeaction, dpd_delay, dpd_maxfail, prfselect_enable, gw_duplicates, mobile, disabled]
      properties:
        ikeid:
          type: string
        iketype:
          type: string
        interface:
          type: string
        remote_gateway:
          type: string
        protocol:
          type: string
        myid_type:
          type: string
        myid_data:
          type: string
        peerid_type:
          type: string
        peerid_data:
          type: string
        encryption:
          $ref: '#/components/schemas/Phase1Encryption'
        lifetime:
          type: integer
        rekey_time:
          type: integer
        reauth_time:
          type: integer
        rand_time:
          type: integer
        pre_shared_key:
          type: string
        private_key:
          type: string
        certref:
          type: string
        pkcs11certref:
          type: string
        pkcs11pin:
          type: string
        caref:
          type: string
        authentication_method:
          type: string
        descr:
          type: string
        nat_traversal:
          type: string
        mobike:
          type: string
        startaction:
          type: string
        closeaction:
          type: string
        dpd_delay:
          type: integer
        dpd_maxfail:
          type: integer
        prfselect_enable:
          type: boolean
        gw_duplicates:
          type: boolean
        mobile:
          type: boolean
        disabled:
          type: boolean
    Phase1Alg:
      type: object
      required: [encryption_algorithm, hash_algorithm, prf_algorithm, dhgroup]
      properties:
        encryption_algorithm:
          $ref: '#/components/schemas/EncryptionAlgorithm'
        hash_algorithm:
          type: string
        prf_algorithm:
          type: string
        dhgroup:
          type: string
    Phase1Encryption:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/Phase1Alg'
    Phase2:
      type: object
      required: [ikeid, uniqid, mode, reqid, localid, remoteid, protocol, pfsgroup, lifetime, rekey_time, rand_time, pinghost, keepalive, mobile, disabled, descr]
      properties:
        ikeid:
          type: string
        uniqid:
          type: string
        mode:
          type: string
        reqid:
          type: string
        localid:
          $ref: '#/components/schemas/Phase2LocalId'
        remoteid:
          $ref: '#/components/schemas/Phase2RemoteId'
        protocol:
          type: string
        encryption_algorithm_option:
          type: array
          items:
            $ref: '#/components/schemas/EncryptionAlgorithm'
        hash_algorithm_option:
          type: array
          items:
            type: string
        pfsgroup:
          type: string
        lifetime:
          type: integer
        rekey_time:
          type: integer
        rand_time:
          type: integer
        pinghost:
          type: string
        keepalive:
          type: boolean
        mobile:
          type: boolean
        disabled:
          type: boolean
        descr:
          type: string
    Phase2LocalId:
      type: object
      required: [type, address, netbits]
      properties:
        type:
          type: string
        address:
          type: string
        netbits:
          type: string
    Phase2RemoteId:
      type: object
      required: [type, address, netbits]
      properties:
        type:
          type: string
        address:
          type: string
        netbits:
          type: string
    PhysicalInterface:
      type: object
      description: a physical interface port
      required: [name, mac, up, ipaddr, friendly, dmesg]
      properties:
        name:
          type: string
        mac:
          type: string
        up:
          type: boolean
        ipaddr:
          type: string
        friendly:
          type: string
        dmesg:
          type: string
    ProviderCountry:
      type: object
      properties:
        country:
          $ref: '#/components/schemas/ProviderCountrySetting'
    ProviderCountrySetting:
      type: object
      properties:
        code:
          type: string
        provider:
          type: array
          items:
            $ref: '#/components/schemas/ServiceProviderSetting'
    ProviderPlanSetting:
      type: object
      required: [name, apn, username, password, number]
      properties:
        name:
          type: string
        apn:
          type: string
        username:
          type: string
        password:
          type: string
        number:
          type: string
    QinQInterface:
      type: object
      required: [if_device, tag, autogroup, members, descr, vlanif]
      properties:
        if_device:
          type: string
          description: parent interface
        tag:
          type: integer
          description: first level VLAN tag
          minimum: 1
          maximum: 4094
        autogroup:
          type: boolean
          description: adds interface to QinQ interface groups
        members:
          type: array
          items:
            type: string
            description: |
              array of VLAN IDs for QinQ tagging
              if both member and members are supplied when add or set, members will be ignored
        descr:
          type: string
          description: description
        vlanif:
          type: string
          description: generated by system when a QinQ is created
    QinQInterfaces:
      type: object
      required: [interfaces, vlan_capable_ifs]
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/QinQInterface'
        vlan_capable_ifs:
          type: array
          items:
            $ref: '#/components/schemas/VLANCapableInterface'
    QueryInterfaceRules:
      type: object
      properties:
        interface:
          type: string
    QueueStats:
      type: object
      required: [name, interface, shapertype, pkts, bytes, droppedpkts, droppedbytes, qlengthitems, qlengthsize, borrows, suspends]
      properties:
        name:
          type: string
        interface:
          type: string
        shapertype:
          type: string
        contains:
          type: array
          items:
            type: string
        pkts:
          type: string
        bytes:
          type: string
        droppedpkts:
          type: string
        droppedbytes:
          type: string
        qlengthitems:
          type: string
        qlengthsize:
          type: string
        borrows:
          type: string
        suspends:
          type: string
    QuickResult:
      type: object
      properties:
        name:
          type: string
    RFCItem:
      type: object
      required: [enable, host, zone, ttl, keyname, keyalgorithm, keydata, server, usetcp, usepublicip, recordtype, interface, updatesource, updatesourcefamily, descr, ipv4, ipv6]
      properties:
        enable:
          type: boolean
        host:
          type: string
        zone:
          type: string
        ttl:
          type: string
        keyname:
          type: string
        keyalgorithm:
          type: string
        keydata:
          type: string
        server:
          type: string
        usetcp:
          type: boolean
        usepublicip:
          type: boolean
        recordtype:
          type: string
        interface:
          type: string
        updatesource:
          type: string
        updatesourcefamily:
          type: string
        descr:
          type: string
        ipv4:
          type: string
        ipv6:
          type: string
    Radius:
      type: object
      required: [nasip, acct_update, server, server2, accounting, radiusissueips]
      properties:
        nasip:
          type: string
        acct_update:
          type: string
        server:
          $ref: '#/components/schemas/RadiusServer'
        server2:
          $ref: '#/components/schemas/RadiusServer'
        accounting:
          type: boolean
        radiusissueips:
          type: boolean
    RadiusAuthServer:
      type: object
      required: [type, name, host, protocol, nasip_attribute, secret, timeout, auth_port, acct_port]
      properties:
        type:
          type: string
        name:
          type: string
        host:
          type: string
        protocol:
          type: string
          description: pap, chap_md5, mschapv1, mschapv2
        nasip_attribute:
          type: string
        secret:
          type: string
        timeout:
          type: integer
        auth_port:
          type: integer
        acct_port:
          type: integer
        refid:
          type: string
    RadiusServer:
      type: object
      required: [ip, secret, port, acctport, enable]
      properties:
        ip:
          type: string
        secret:
          type: string
        port:
          type: string
        acctport:
          type: string
        enable:
          type: boolean
    RefreshTokenParam:
      type: object
      properties:
        username:
          type: string
    RenewCertOptions:
      type: object
      description: Options for certificate renewal
      properties:
        reusekey:
          type: boolean
        reuseserial:
          type: boolean
        strictsecurity:
          type: boolean
    Result:
      type: object
      properties:
        result:
          type: string
    RetrievedBackup:
      type: object
      properties:
        backup:
          type: string
    RouteRecord:
      type: object
      required: [dest, gw, flag, uses, mtu, interface, exp]
      properties:
        dest:
          type: string
        gw:
          type: string
        flag:
          type: string
        uses:
          type: string
        mtu:
          type: string
        interface:
          type: string
        exp:
          type: string
    RoutesApplyRequest:
      type: object
      properties:
        apply:
          type: boolean
    RoutesDirtyState:
      type: object
      properties:
        dirty:
          type: boolean
    SMARTDevices:
      type: object
      properties:
        drives:
          type: array
          items:
            type: string
    SMARTResult:
      type: object
      required: [status, result]
      properties:
        status:
          type: string
        result:
          type: string
    SNMPConfig:
      type: object
      required: [syslocation, syscontact, rocommunity, modules, enable, pollport, trapenable, trapserver, trapserverport, trapstring, bindip]
      properties:
        syslocation:
          type: string
        syscontact:
          type: string
        rocommunity:
          type: string
        modules:
          $ref: '#/components/schemas/SNMPModules'
        enable:
          type: boolean
        pollport:
          type: string
        trapenable:
          type: boolean
        trapserver:
          type: string
        trapserverport:
          type: string
        trapstring:
          type: string
        bindip:
          type: string
    SNMPInterface:
      type: object
      required: [text, value]
      properties:
        text:
          type: string
        value:
          type: string
    SNMPModules:
      type: object
      required: [mibii, netgraph, pf, hostres, ucd, regex]
      properties:
        mibii:
          type: boolean
        netgraph:
          type: boolean
        pf:
          type: boolean
        hostres:
          type: boolean
        ucd:
          type: boolean
        regex:
          type: boolean
    Separator:
      type: object
      required: [id, row, text, color, if]
      properties:
        id:
          type: string
        row:
          type: string
        text:
          type: string
        color:
          type: string
        if:
          type: string
    ServiceCertificate:
      type: object
      required: [name, ident]
      properties:
        name:
          type: string
        ident:
          type: string
    ServiceProvider:
      type: object
      properties:
        provider:
          $ref: '#/components/schemas/ServiceProviderSetting'
    ServiceProviderSetting:
      type: object
      properties:
        name:
          type: string
        plans:
          type: array
          items:
            $ref: '#/components/schemas/ProviderPlanSetting'
    ServiceProviders:
      type: object
      properties:
        countries:
          type: array
          items:
            $ref: '#/components/schemas/ProviderCountrySetting'
    ServicesActionParams:
      type: object
      description: |
        valid values:
        action = "start", "stop", "restart"
      required: [service, action, vpnid, mode, zone]
      properties:
        service:
          type: string
        action:
          type: string
        vpnid:
          type: string
        mode:
          type: string
        zone:
          type: string
    ServicesActionReq:
      type: object
      properties:
        params:
          $ref: '#/components/schemas/ServicesActionParams'
    ServicesNtpConfig:
      type: object
      required: [settings, acls, serial_gps, pps]
      properties:
        settings:
          $ref: '#/components/schemas/NtpSettings'
        acls:
          $ref: '#/components/schemas/NtpAcls'
        serial_gps:
          $ref: '#/components/schemas/NtpSerialGps'
        pps:
          $ref: '#/components/schemas/NtpPps'
    ServicesSNMPConfig:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/SNMPConfig'
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/SNMPInterface'
    ServicesSNMPConfigReq:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/SNMPConfig'
    ServicesStatus:
      type: object
      required: [name, description, enabled, running]
      properties:
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        running:
          type: boolean
    ServicesStatusList:
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServicesStatus'
    ServicesUPnPConfig:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/UPnPConfig'
        interfaces:
          type: array
          items:
            type: string
    ServicesUPnPConfigReq:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/UPnPConfig'
    SetOpenVPNCSOResponse:
      type: object
      properties:
        id:
          type: string
    SetOpenVPNClientResponse:
      type: object
      properties:
        vpnid:
          type: string
    SetOpenVPNServerResponse:
      type: object
      properties:
        vpnid:
          type: string
    SetupDNSSetting:
      type: object
      required: [name, ip, gw]
      properties:
        name:
          type: string
        ip:
          type: string
        gw:
          type: string
    SetupPPPoECfg:
      type: object
      required: [service_name, username, password, dod, idletimeout, provider, localip]
      properties:
        service_name:
          type: string
        username:
          type: string
        password:
          type: string
        dod:
          type: boolean
        idletimeout:
          type: string
        provider:
          type: string
        localip:
          type: string
    SetupSettings:
      type: object
      required: [hostname, domain, dnsoveride, dnsresolution, timezone, timeservers, lang, login_message]
      properties:
        hostname:
          type: string
        domain:
          type: string
        dnsservers:
          type: array
          items:
            $ref: '#/components/schemas/SetupDNSSetting'
        dnsoveride:
          type: boolean
        dnsresolution:
          type: string
          description: DNS resolution behavior, options - not-specified (default), local, remote
        timezone:
          type: string
        timeservers:
          type: string
          description: space separated list of time servers
        lang:
          type: string
        login_message:
          type: string
          description: message to display when user authenticates
    SetupWizard:
      type: object
      properties:
        setup:
          $ref: '#/components/schemas/SetupWizardOptions'
    SetupWizardOptions:
      type: object
      required: [hostname, domain, pridns, secdns, dnsoverride, tz, timeservers, wantype, wanip, gw, spoofmac, mtu, mss, dhcphost, lanip, bogons, rfc1918, pppoe]
      properties:
        hostname:
          type: string
        domain:
          type: string
        pridns:
          type: string
        secdns:
          type: string
        dnsoverride:
          type: boolean
        tz:
          type: string
        timeservers:
          type: string
        wantype:
          type: string
        wanip:
          type: string
        gw:
          type: string
        spoofmac:
          type: string
        mtu:
          type: string
        mss:
          type: string
        dhcphost:
          type: string
        lanip:
          type: string
        bogons:
          type: boolean
        rfc1918:
          type: boolean
        pppoe:
          $ref: '#/components/schemas/SetupPPPoECfg'
    SimpleInterface:
      type: object
      required: [text, value]
      properties:
        text:
          type: string
        value:
          type: string
    SoftwarePackage:
      type: object
      required: [name, id, category, description, local_version, avail_version, filename, checksum, os_type, os_version]
      properties:
        name:
          type: string
        id:
          type: string
        category:
          type: string
        description:
          type: string
        local_version:
          type: string
        avail_version:
          type: string
        dependencies:
          type: array
          items:
            type: string
        filename:
          type: string
        checksum:
          type: string
        os_type:
          type: string
        os_version:
          type: string
        installed_on:
          type: array
          items:
            $ref: '#/components/schemas/DeviceBasicInfo'
    SoftwarePackageList:
      type: object
      properties:
        packages:
          type: array
          items:
            $ref: '#/components/schemas/SoftwarePackage'
    StaticRoute:
      type: object
      required: [network, network_encoded, gateway, gateway_encoded, descr, disabled, interface]
      properties:
        network:
          type: string
        network_encoded:
          type: string
        gateway:
          type: string
        gateway_encoded:
          type: string
        descr:
          type: string
        disabled:
          type: boolean
        interface:
          type: string
    StaticRoutes:
      type: object
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/StaticRoute'
    StatusSummary:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SystemStatus'
    StdLog:
      type: object
      required: [time, proc, pid, msg]
      properties:
        time:
          type: string
        proc:
          type: string
        pid:
          type: string
        msg:
          type: string
    StdLogs:
      type: object
      required: [logfile, filter_summary, alerts]
      properties:
        logfile:
          type: string
        logs:
          type: array
          items:
            $ref: '#/components/schemas/StdLog'
        filter_logs:
          type: array
          items:
            $ref: '#/components/schemas/FilterLog'
        filter_summary:
          $ref: '#/components/schemas/FilterLogSummary'
        alerts:
          $ref: '#/components/schemas/Result'
    StorageStats:
      type: object
      required: [volume, device, capacity, used]
      properties:
        volume:
          type: string
          description: volume name or directory
        device:
          type: string
          description: device partition
        capacity:
          type: integer
        used:
          type: integer
    SysFirmwareInfo:
      type: object
      required: [current_version, latest_version, status, message]
      properties:
        current_version:
          type: string
          description: current firmware of the system
        latest_version:
          type: string
          description: firmware version for upgrading to
        status:
          type: string
          description: status message, if the firmware upgrade is in progress
        message:
          type: string
          description: message to display, e.g. error or expectation after upgrading
    SysFirmwareUpgradeOpt:
      type: object
      properties:
        upgrade:
          type: boolean
          description: set to true to confirm upgrade
    SysNetIf:
      type: object
      description: network interface on the device
      required: [name, identity, device, assigned, link_speed, phy_speed, state, vlan, device_info, is_physical, label]
      properties:
        name:
          type: string
          description: device name of the device
        identity:
          type: string
          description: interface identity, e.g. wan, lan, opt1
        device:
          type: string
          description: device driver name, e..g vtnet1
        assigned:
          type: string
          description: user assigned name of the device, WAN, LAN, LANOPT
        link_speed:
          type: integer
          description: bps speed negotiated
        phy_speed:
          type: integer
          description: bps max speed of port
        state:
          type: string
          description: on, off, error
        vlan:
          type: integer
          description: vlan number, if VLAN
        device_info:
          type: string
          description: device hardware, model name
        is_physical:
          type: boolean
          description: device is a physical port
        addresses:
          type: array
          items:
            type: string
            description: list of addresses configured on the interface
        label:
          type: string
          description: description (user-defined name) of device
    Sysinfo:
      type: object
      required: [hostname, serial, version, device_id, crypto_id, product, product_version, product_build, os_name, os_version, bios_vendor, bios_type, bios_date, bios_version, cpu_model, cpu_cores, cpu_features, cpu_load, uptime, time, mem_total, mem_used, loadavg, vendor, model, hw_uuid, mim_devices]
      properties:
        hostname:
          type: string
        address:
          type: array
          items:
            type: string
            description: default addresses (v4 and v6)
        serial:
          type: string
        version:
          type: string
          description: controller version
        device_id:
          type: string
        crypto_id:
          type: string
        product:
          type: string
        product_version:
          type: string
        product_build:
          type: string
        os_name:
          type: string
        os_version:
          type: string
        bios_vendor:
          type: string
        bios_type:
          type: string
        bios_date:
          type: string
        bios_version:
          type: string
        cpu_model:
          type: string
        cpu_cores:
          type: integer
        cpu_features:
          type: string
        cpu_load:
          type: integer
        uptime:
          type: integer
        time:
          type: string
        mem_total:
          type: integer
        mem_used:
          type: integer
        loadavg:
          type: array
          items:
            type: integer
        vendor:
          type: string
        model:
          type: string
        hw_uuid:
          type: string
        filesystems:
          type: array
          items:
            $ref: '#/components/schemas/SysinfoFs'
        network_ports:
          type: array
          items:
            $ref: '#/components/schemas/SysNetIf'
        services:
          type: array
          items:
            $ref: '#/components/schemas/DeviceServiceBasic'
        mim_devices:
          type: integer
    SysinfoFs:
      type: object
      required: [path, fs_name, fs_type, total, used]
      properties:
        path:
          type: string
        fs_name:
          type: string
        fs_type:
          type: string
        total:
          type: integer
        used:
          type: integer
    SysinfoUpdate:
      type: object
      required: [hostname, time]
      properties:
        hostname:
          type: string
        time:
          type: string
    SyslogConfigOverride:
      type: object
      required: [override_reverse, reverse, override_nentries, nentries, override_logfilesize, logfilesize, override_rotatecount, rotatecount, override_format, format, lognginx, logdefaultblock, logdefaultpass, logbogons, logprivatenets, filterdescriptions]
      properties:
        override_reverse:
          type: boolean
        reverse:
          type: boolean
        override_nentries:
          type: boolean
        nentries:
          type: integer
        override_logfilesize:
          type: boolean
        logfilesize:
          type: integer
        override_rotatecount:
          type: boolean
        rotatecount:
          type: integer
        override_format:
          type: boolean
        format:
          type: string
        lognginx:
          type: boolean
        logdefaultblock:
          type: boolean
        logdefaultpass:
          type: boolean
        logbogons:
          type: boolean
        logprivatenets:
          type: boolean
        filterdescriptions:
          type: integer
    SyslogConfiguration:
      type: object
      required: [reverse, nentries, logfilesize, logcompressiontype, format, rotatecount, remoteserver, remoteserver2, remoteserver3, sourceip, ipproto, filter, dhcp, auth, portalauth, vpn, dpinger, hostapd, logall, system, pfnet_controller, resolver, ppp, routing, ntpd, disablelocallogging, logconfigchanges, enable, logdefaultblock, logdefaultpass, logbogons, logprivatenets, lognginx, rawfilter, filterdescriptions]
      properties:
        reverse:
          type: boolean
        nentries:
          type: integer
        logfilesize:
          type: integer
        logcompressiontype:
          type: string
        format:
          type: string
        rotatecount:
          type: integer
        remoteserver:
          type: string
        remoteserver2:
          type: string
        remoteserver3:
          type: string
        sourceip:
          type: string
        ipproto:
          type: string
        filter:
          type: boolean
        dhcp:
          type: boolean
        auth:
          type: boolean
        portalauth:
          type: boolean
        vpn:
          type: boolean
        dpinger:
          type: boolean
        hostapd:
          type: boolean
        logall:
          type: boolean
        system:
          type: boolean
        pfnet_controller:
          type: boolean
        resolver:
          type: boolean
        ppp:
          type: boolean
        routing:
          type: boolean
        ntpd:
          type: boolean
        disablelocallogging:
          type: boolean
        logconfigchanges:
          type: boolean
        enable:
          type: boolean
        logdefaultblock:
          type: boolean
        logdefaultpass:
          type: boolean
        logbogons:
          type: boolean
        logprivatenets:
          type: boolean
        lognginx:
          type: boolean
        rawfilter:
          type: boolean
        filterdescriptions:
          type: integer
    SystemAdvAdmin:
      type: object
      required: [webguiproto, webguiport, max_procs, disablehttpredirect, disablehsts, ocsp_staple, disableconsolemenu, noantilockout, nodnsrebindcheck, nohttpreferercheck, pagenamefirst, loginautocomplete, althostnames, enableserial, serialspeed, primaryconsole, sshport, enablesshd, sshdkeyonly, sshdagentforwarding, quietlogin, roaming, sshguard_threshold, sshguard_blocktime, sshguard_detection_time, sshguard_whitelist, ssl_certref, certsavailable, certlist]
      properties:
        webguiproto:
          type: string
        webguiport:
          type: string
        max_procs:
          type: integer
        disablehttpredirect:
          type: boolean
        disablehsts:
          type: boolean
        ocsp_staple:
          type: boolean
        disableconsolemenu:
          type: boolean
        noantilockout:
          type: boolean
        nodnsrebindcheck:
          type: boolean
        nohttpreferercheck:
          type: boolean
        pagenamefirst:
          type: boolean
        loginautocomplete:
          type: boolean
        althostnames:
          type: string
        enableserial:
          type: boolean
        serialspeed:
          type: string
        primaryconsole:
          type: string
        sshport:
          type: string
        enablesshd:
          type: boolean
        sshdkeyonly:
          type: string
        sshdagentforwarding:
          type: boolean
        quietlogin:
          type: boolean
        roaming:
          type: boolean
        sshguard_threshold:
          type: string
        sshguard_blocktime:
          type: string
        sshguard_detection_time:
          type: string
        sshguard_whitelist:
          type: string
        ssl_certref:
          type: string
        certsavailable:
          type: boolean
        certlist:
          type: array
          items:
            $ref: '#/components/schemas/SystemCert'
    SystemAdvAdminSetting:
      type: object
      properties:
        admin:
          $ref: '#/components/schemas/SystemAdvAdmin'
    SystemCert:
      type: object
      required: [id, descr]
      properties:
        id:
          type: string
        descr:
          type: string
    SystemControl:
      type: object
      description: |
        valid values:
        action = "default", "halt", "reboot", "rebootfsck"
      properties:
        action:
          type: string
    SystemEvent:
      type: object
      description: changes to the system that is informational or impacts operation
      required: [message, level]
      properties:
        message:
          type: string
          description: message to show to the user
        level:
          type: string
          description: debug, info, warning, error
    SystemGitSyncSettings:
      type: object
      required: [sync_on_upgrade, repo_url, minimal, diff, show_files, show_command, dry_run]
      properties:
        sync_on_upgrade:
          type: boolean
        repo_url:
          type: string
        branches:
          type: array
          items:
            type: string
        minimal:
          type: boolean
        diff:
          type: boolean
        show_files:
          type: boolean
        show_command:
          type: boolean
        dry_run:
          type: boolean
    SystemStatus:
      type: object
      required: [prod, host, osver, os, machine, arch, vndr, cores, cpu, up, rev, ram, fram, swap, fswap, timestamp, apiver, vpn_addr]
      properties:
        prod:
          type: string
        host:
          type: string
        osver:
          type: string
        os:
          type: string
        machine:
          type: string
        arch:
          type: string
        vndr:
          type: string
        cores:
          type: integer
        cpu:
          type: string
        up:
          type: string
        rev:
          type: string
        ram:
          type: integer
        fram:
          type: integer
        swap:
          type: integer
        fswap:
          type: integer
        timestamp:
          type: string
        apiver:
          type: string
        vpn_addr:
          type: string
        nexus_controllers:
          type: array
          items:
            $ref: '#/components/schemas/NexusControllerInfo'
    SystemSummary:
      type: object
      required: [name, os, arch, api_version]
      properties:
        name:
          type: string
        os:
          type: string
        arch:
          type: string
        api_version:
          type: string
    SystemUpdateBootEnvsSettings:
      type: object
      required: [deferred_boot, verify, verify_timeout]
      properties:
        deferred_boot:
          type: boolean
        verify:
          type: boolean
        verify_timeout:
          type: integer
    SystemUpdateFirmwareBranch:
      type: object
      required: [name, descr]
      properties:
        name:
          type: string
        descr:
          type: string
    SystemUpdateInfo:
      type: object
      required: [firmware_branch, boot_env, curr_base_system, latest_base_system, status_message]
      properties:
        firmware_branch:
          type: string
        firmware_branches:
          type: array
          items:
            $ref: '#/components/schemas/SystemUpdateFirmwareBranch'
        messages:
          type: array
          items:
            type: string
        boot_env:
          type: string
        curr_base_system:
          type: string
        latest_base_system:
          type: string
        status_message:
          type: string
        update_messages:
          type: array
          items:
            type: string
    SystemUpdateOptions:
      type: object
      properties:
        firmware_branch:
          type: string
    SystemUpdateProgress:
      type: object
      required: [messages, completed, started_timestamp, ended_timestamp, started_time, ended_time]
      properties:
        messages:
          type: array
          items:
            type: string
        completed:
          type: integer
        started_timestamp:
          type: integer
        ended_timestamp:
          type: integer
        started_time:
          type: string
        ended_time:
          type: string
    SystemUpdateSettings:
      type: object
      required: [firmware_branch, disable_check, boot_envs, git_sync]
      properties:
        firmware_branch:
          type: string
        firmware_branches:
          type: array
          items:
            $ref: '#/components/schemas/SystemUpdateFirmwareBranch'
        disable_check:
          type: boolean
        boot_envs:
          $ref: '#/components/schemas/SystemUpdateBootEnvsSettings'
        git_sync:
          $ref: '#/components/schemas/SystemGitSyncSettings'
    SystemUpdateSettingsSet:
      type: object
      required: [firmware_branch, disable_check, boot_envs]
      properties:
        firmware_branch:
          type: string
        disable_check:
          type: boolean
        boot_envs:
          $ref: '#/components/schemas/SystemUpdateBootEnvsSettings'
    TCPFlags:
      type: object
      required: [fin, syn, rst, psh, ack, urg, ece, cwr]
      properties:
        fin:
          type: boolean
        syn:
          type: boolean
        rst:
          type: boolean
        psh:
          type: boolean
        ack:
          type: boolean
        urg:
          type: boolean
        ece:
          type: boolean
        cwr:
          type: boolean
    TLSCertPath:
      type: object
      required: [cert_path, key_path]
      properties:
        cert_path:
          type: string
        key_path:
          type: string
    TestPortRequest:
      type: object
      required: [host, src_port, src_ip, port, show_text, ip_proto]
      properties:
        host:
          type: string
        src_port:
          type: string
        src_ip:
          type: string
        port:
          type: integer
        show_text:
          type: boolean
        ip_proto:
          type: string
    TestPortResponse:
      type: object
      properties:
        response:
          type: string
    TestPortSources:
      type: object
      properties:
        sources:
          type: string
    Tier:
      type: object
      required: [name, status, display]
      properties:
        name:
          type: string
        status:
          type: string
        display:
          type: string
    ToggleRespStatus:
      type: object
      required: [disabled, id]
      properties:
        disabled:
          type: boolean
        id:
          type: string
    ToggleUPNP:
      type: object
      properties:
        enable:
          type: boolean
    TracerouteRequest:
      type: object
      required: [host, hops, icmp, proto, rev, src]
      properties:
        host:
          type: string
        hops:
          type: integer
        icmp:
          type: boolean
        proto:
          type: string
        rev:
          type: boolean
        src:
          type: string
    TracerouteResponse:
      type: object
      properties:
        results:
          type: string
    TrafficQueueStats:
      type: object
      properties:
        timestamp:
          type: number
          format: double
        interfacestats:
          type: array
          items:
            $ref: '#/components/schemas/QueueStats'
    Tunable:
      type: object
      required: [tunable, value, descr, modified]
      properties:
        tunable:
          type: string
        value:
          type: string
        descr:
          type: string
        modified:
          type: boolean
    TunableRequest:
      type: object
      required: [tunable, id]
      properties:
        tunable:
          $ref: '#/components/schemas/Tunable'
        id:
          type: integer
    Tunables:
      type: object
      properties:
        tunables:
          type: array
          items:
            $ref: '#/components/schemas/Tunable'
    UIStates:
      type: object
      additionalProperties:
        type: boolean
    UPnPConfig:
      type: object
      required: [enable, enable_upnp, enable_natpmp, ext_iface, download, upload, overridewanip, upnpqueue, logpackets, sysuptime, permdefault, presentationurl, modelnumber, enable_stun, stun_host, stun_port]
      properties:
        enable:
          type: boolean
        enable_upnp:
          type: boolean
        enable_natpmp:
          type: boolean
        ext_iface:
          type: string
        iface_array:
          type: array
          items:
            type: string
        download:
          type: string
        upload:
          type: string
        overridewanip:
          type: string
        upnpqueue:
          type: string
        logpackets:
          type: boolean
        sysuptime:
          type: boolean
        permdefault:
          type: boolean
        row:
          type: array
          items:
            $ref: '#/components/schemas/UPnPPermUser'
        presentationurl:
          type: string
        modelnumber:
          type: string
        enable_stun:
          type: boolean
        stun_host:
          type: string
        stun_port:
          type: string
    UPnPMapping:
      type: object
      required: [ext_interface, ext_port, int_ip, int_port, proto, source_ip, source_port, desc]
      properties:
        ext_interface:
          type: string
        ext_port:
          type: string
        int_ip:
          type: string
        int_port:
          type: string
        proto:
          type: string
        source_ip:
          type: string
        source_port:
          type: string
        desc:
          type: string
    UPnPMappings:
      type: object
      properties:
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/UPnPMapping'
    UPnPPermUser:
      type: object
      required: [id, permuser]
      properties:
        id:
          type: string
        permuser:
          type: string
    UpdateBootenv:
      type: object
      required: [old_name, name, descr, protect]
      properties:
        old_name:
          type: string
        name:
          type: string
        descr:
          type: string
        protect:
          type: boolean
    UpdateCRLReq:
      type: object
      required: [ca_refid, descr]
      properties:
        ca_refid:
          type: string
          description: CA reference ID
        descr:
          type: string
          description: descriptive name
        method_internal:
          $ref: '#/components/schemas/CRLMethodInternalUpdate'
        method_x509:
          $ref: '#/components/schemas/CRLMethodX509'
    UpdateCaCertReq:
      type: object
      description: |
        Request for creating a new CA cert or updating an existing one.
        - name: short description about certificate
        - trust: add to OS trusted cert store
        - randomize_serial: use random serial numbers when signing certificates
        - one of: method_internal (self-signed), mehod_existing (import), or method_intermediate (signed by another CA)
      required: [name, trust, randomize_serial]
      properties:
        name:
          type: string
        trust:
          type: boolean
        randomize_serial:
          type: boolean
        method_internal:
          $ref: '#/components/schemas/CaCertMethodNew'
        method_existing:
          $ref: '#/components/schemas/CaCertMethodExisting'
        method_intermediate:
          $ref: '#/components/schemas/CaCertMethodNew'
    UpdateCertReq:
      type: object
      description: |
        Update the certificate using either PEM or PKCS12 data. This operation is similar to
        importing a new certificate.
      required: [name, descr, description]
      properties:
        name:
          type: string
        descr:
          type: string
        description:
          type: string
        method_existing_pem:
          $ref: '#/components/schemas/CertMethodExistingPEM'
        method_existing_pkcs12:
          $ref: '#/components/schemas/CertMethodExistingPkcs12'
    UpdatePKCS12CertReq:
      type: object
      description: Update the certificate with PKCS12 appended file upload
      required: [name, descr, description, method_existing_pkcs12]
      properties:
        name:
          type: string
        descr:
          type: string
        description:
          type: string
        method_existing_pkcs12:
          $ref: '#/components/schemas/CertMethodExistingPkcs12'
    UpdateProxyReq:
      type: object
      properties:
        proxy:
          $ref: '#/components/schemas/IGMPProxy'
    User:
      type: object
      required: [username, descr, scope, groupname, groups, disabled, uid, full_name, authorized_keys, keep_cmd_history, ipsec_psk, custom_settings, interfaces_sort, webguicss, webguifixedmenu, webguihostnamemenu, dashboardcolumns, dashboardavailablewidgetspanel, systemlogsfilterpanel, systemlogsmanagelogpanel, statusmonitoringsettingspanel, webguileftcolumnhyper, disablealiaspopupdetail, pagenamefirst]
      properties:
        username:
          type: string
        name:
          type: string
        descr:
          type: string
        scope:
          type: string
        groupname:
          type: string
        groups:
          type: array
          items:
            type: string
        disabled:
          type: boolean
        uid:
          type: integer
        full_name:
          type: string
        cert_refids:
          type: array
          items:
            type: string
        authorized_keys:
          type: string
        privs:
          type: array
          items:
            type: string
        keep_cmd_history:
          type: boolean
        expiration:
          type: integer
        ipsec_psk:
          type: string
        custom_settings:
          type: boolean
        interfaces_sort:
          type: boolean
        webguicss:
          type: string
        webguifixedmenu:
          type: string
        webguihostnamemenu:
          type: string
        dashboardcolumns:
          type: integer
        dashboardavailablewidgetspanel:
          type: boolean
        systemlogsfilterpanel:
          type: boolean
        systemlogsmanagelogpanel:
          type: boolean
        statusmonitoringsettingspanel:
          type: boolean
        webguileftcolumnhyper:
          type: boolean
        disablealiaspopupdetail:
          type: boolean
        pagenamefirst:
          type: boolean
    UserAddReq:
      type: object
      required: [username, full_name]
      properties:
        username:
          type: string
        uid:
          type: integer
        password:
          type: string
        full_name:
          type: string
        groups:
          type: array
          items:
            type: string
        cert_refids:
          type: array
          items:
            type: string
        authorized_keys:
          type: string
          format: byte
        privs:
          type: array
          items:
            type: string
        scope:
          type: string
        keep_cmd_history:
          type: boolean
        expiration:
          type: integer
        disabled:
          type: boolean
        ipsec_psk:
          type: string
          format: byte
    UserAuthSettings:
      type: object
      required: [session_timeout, authentication_server, password_hash, shell_auth, auth_refresh_time]
      properties:
        session_timeout:
          type: integer
          description: session timeout in minutes
        authentication_server:
          type: string
          description: current value
        authentication_servers:
          type: array
          items:
            type: string
            description: possible values
        password_hash:
          type: string
          description: current value
        password_hashes:
          type: array
          items:
            type: string
            description: possible values
        shell_auth:
          type: boolean
          description: user is able to access shell
        auth_refresh_time:
          type: integer
          description: duration to cache authentication results from remote auth servers in seconds
    UserAuthSettingsReq:
      type: object
      required: [authentication_server, save_and_test]
      properties:
        authentication_server:
          type: string
        save_and_test:
          type: boolean
        session_timeout:
          type: integer
        password_hash:
          type: string
        shell_auth:
          type: boolean
        auth_refresh_time:
          type: integer
    UserGeneric:
      type: object
      required: [username, descr, scope, groupname, disabled, uid, full_name, authorized_keys, keep_cmd_history]
      properties:
        username:
          type: string
        name:
          type: string
        descr:
          type: string
        scope:
          type: string
        groupname:
          type: string
        groups:
          type: array
          items:
            type: string
        disabled:
          type: boolean
        uid:
          type: integer
        full_name:
          type: string
        cert_refids:
          type: array
          items:
            type: string
        authorized_keys:
          type: string
        privs:
          type: array
          items:
            type: string
        keep_cmd_history:
          type: boolean
        expiration:
          type: integer
    UserGroup:
      type: object
      required: [name, description, scope, gid]
      properties:
        name:
          type: string
        description:
          type: string
        scope:
          type: string
        gid:
          type: integer
        member:
          type: array
          items:
            type: integer
        members:
          type: array
          items:
            type: integer
            description: alias to member
        privs:
          type: array
          items:
            type: string
    UserGroups:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
        errmsg:
          type: string
          description: errors in group modify operations
    UserPrivilege:
      type: object
      required: [value, text, descr, warn]
      properties:
        value:
          type: string
        text:
          type: string
        descr:
          type: string
        warn:
          type: string
    UserPrivileges:
      type: object
      properties:
        privs:
          type: array
          items:
            $ref: '#/components/schemas/UserPrivilege'
    UserUpdateReq:
      type: object
      properties:
        password:
          type: string
        full_name:
          type: string
        groups:
          type: array
          items:
            type: string
        cert_refids:
          type: array
          items:
            type: string
        authorized_keys:
          type: string
        ipsec_psk:
          type: string
          format: byte
        privs:
          type: array
          items:
            type: string
        keep_cmd_history:
          type: boolean
        expiration:
          type: integer
        disabled:
          type: boolean
    Users:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    UsersConfig:
      type: object
      required: [users, groups]
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
    UsersConfigGeneric:
      type: object
      description: Generic user for all platforms
      required: [users, groups]
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserGeneric'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
    UsersGeneric:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserGeneric'
    VLANCapableInterface:
      type: object
      required: [if_device, if_assigned_name, mac, up, ipaddr, dmesg]
      properties:
        if_device:
          type: string
        if_assigned_name:
          type: string
        mac:
          type: string
        up:
          type: boolean
        ipaddr:
          type: string
        dmesg:
          type: string
    VLANInterface:
      type: object
      required: [if_device, tag, pcp, descr, vlanif]
      properties:
        if_device:
          type: string
          description: parent interface of the VLAN
        tag:
          type: integer
          description: 802.1Q VLAN tag (between 1 and 4094)
          minimum: 1
          maximum: 4094
        pcp:
          type: integer
          description: 802.1Q VLAN Priority (between 0 and 7)
          minimum: 0
          maximum: 7
        descr:
          type: string
          description: description
        vlanif:
          type: string
          description: generated by system when a VLAN is created
    VLANInterfaces:
      type: object
      required: [interfaces, vlan_capable_ifs]
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/VLANInterface'
        vlan_capable_ifs:
          type: array
          items:
            $ref: '#/components/schemas/VLANCapableInterface'
    VirtualIP:
      type: object
      required: [mode, interface, vhid, advskew, advbase, password, password_confirm, uniqid, descr, subnet, id, carp_mode]
      properties:
        mode:
          type: string
        interface:
          type: string
        vhid:
          type: integer
        advskew:
          type: integer
        advbase:
          type: integer
        password:
          type: string
        password_confirm:
          type: string
        uniqid:
          type: string
        descr:
          type: string
        subnet:
          type: string
        id:
          type: string
        carp_mode:
          type: string
    VirtualIPResult:
      type: object
      properties:
        id:
          type: string
    VirtualIPs:
      type: object
      required: [virtualips, interfaces]
      properties:
        virtualips:
          type: array
          items:
            $ref: '#/components/schemas/VirtualIP'
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/SimpleInterface'
    Voucher:
      type: object
      required: [charset, rollbits, ticketbits, checksumbits, magic, exponent, publickey, privatekey, descrmsgnoaccess, descrmsgexpired, enable]
      properties:
        charset:
          type: string
        rollbits:
          type: integer
        ticketbits:
          type: integer
        checksumbits:
          type: integer
        magic:
          type: integer
        exponent:
          type: integer
        publickey:
          type: string
        privatekey:
          type: string
        descrmsgnoaccess:
          type: string
        descrmsgexpired:
          type: string
        enable:
          type: boolean
        roll:
          type: array
          items:
            $ref: '#/components/schemas/VoucherRoll'
    VoucherRoll:
      type: object
      required: [zone, number, minutes, descr, count, used, active, lastsync]
      properties:
        zone:
          type: string
        number:
          type: integer
        minutes:
          type: integer
        descr:
          type: string
        count:
          type: string
        used:
          type: string
        active:
          type: boolean
        lastsync:
          type: integer
    WGConfig:
      type: object
      description: |
        valid values:
        enable = "on", "off"
        keep_conf = "yes", "no"
        resolve_interval_track = "yes", "no"
        interface_group = "all", "unassigned", "none"
        hide_secrets = "yes", "no"
        hide_peers = "yes", "no"
      required: [enable, keep_conf, resolve_interval, resolve_interval_track, interface_group, hide_secrets, hide_peers]
      properties:
        enable:
          type: boolean
        keep_conf:
          type: boolean
        resolve_interval:
          type: string
        resolve_interval_track:
          type: boolean
        interface_group:
          type: string
        hide_secrets:
          type: boolean
        hide_peers:
          type: boolean
    WGIPAddress:
      type: object
      required: [address, mask, descr]
      properties:
        address:
          type: string
        mask:
          type: string
        descr:
          type: string
    WGIPAddresses:
      type: object
      properties:
        row:
          type: array
          items:
            $ref: '#/components/schemas/WGIPAddress'
    WGPeer:
      type: object
      description: |
        valid values:
        enabled = "yes", "no"
      required: [enabled, tun, descr, endpoint, port, persistentkeepalive, publickey, presharedkey, allowedips]
      properties:
        enabled:
          type: boolean
        tun:
          type: string
        descr:
          type: string
        endpoint:
          type: string
        port:
          type: string
        persistentkeepalive:
          type: string
        publickey:
          type: string
        presharedkey:
          type: string
        allowedips:
          $ref: '#/components/schemas/WGIPAddresses'
    WGPeers:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/WGPeer'
    WGTunnel:
      type: object
      description: |
        valid values:
        enabled = "yes", "no"
      required: [name, descr, enabled, listenport, privatekey, publickey, mtu, addresses]
      properties:
        name:
          type: string
        descr:
          type: string
        enabled:
          type: boolean
        listenport:
          type: string
        privatekey:
          type: string
        publickey:
          type: string
        mtu:
          type: string
        addresses:
          $ref: '#/components/schemas/WGIPAddresses'
    WGTunnelConf:
      type: object
      properties:
        conf:
          type: string
    WGTunnels:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/WGTunnel'
    WMESetting:
      type: object
      properties:
        enable:
          type: boolean
    WPASetting:
      type: object
      required: [macaddr_acl, wpa_mode, wpa_key_mgmt, wpa_pairwise, wpa_group_rekey, wpa_gmk_rekey, passphrase, ext_wpa_sw]
      properties:
        macaddr_acl:
          type: string
        wpa_mode:
          type: string
        wpa_key_mgmt:
          type: string
        wpa_pairwise:
          type: string
        wpa_group_rekey:
          type: string
        wpa_gmk_rekey:
          type: string
        passphrase:
          type: string
        ext_wpa_sw:
          type: string
    WireGuardKeys:
      type: object
      required: [privkey, privkey_clamped, pubkey, was_clamped]
      properties:
        privkey:
          type: string
          format: byte
        privkey_clamped:
          type: string
          format: byte
        pubkey:
          type: string
          format: byte
        was_clamped:
          type: boolean
    WireGuardPeerStatus:
      type: object
      required: [public_key, preshared_key, endpoint, allowed_ips, latest_handshake, transfer_rx, transfer_tx, persistent_keepalive, config]
      properties:
        public_key:
          type: string
        preshared_key:
          type: string
        endpoint:
          type: string
        allowed_ips:
          type: string
        latest_handshake:
          type: string
        transfer_rx:
          type: string
        transfer_tx:
          type: string
        persistent_keepalive:
          type: string
        config:
          $ref: '#/components/schemas/WGPeer'
    WireGuardSettings:
      type: object
      required: [config, tunnels, peers]
      properties:
        config:
          type: array
          items:
            $ref: '#/components/schemas/WGConfig'
        tunnels:
          $ref: '#/components/schemas/WGTunnels'
        peers:
          $ref: '#/components/schemas/WGPeers'
    WireGuardStatus:
      type: object
      properties:
        status:
          type: array
          items:
            $ref: '#/components/schemas/WireGuardTunnelStatus'
    WireGuardTunnelStatus:
      type: object
      required: [private_key, public_key, listen_port, fwmark, status, transfer_rx, transfer_tx, inpkts, outpkts, mtu, config]
      properties:
        private_key:
          type: string
        public_key:
          type: string
        listen_port:
          type: string
        fwmark:
          type: string
        status:
          type: string
        transfer_rx:
          type: integer
        transfer_tx:
          type: integer
        inpkts:
          type: integer
        outpkts:
          type: integer
        mtu:
          type: integer
        config:
          $ref: '#/components/schemas/WGTunnel'
        peers:
          type: array
          items:
            $ref: '#/components/schemas/WireGuardPeerStatus'
    WirelessAddl:
      type: object
      properties:
        clone:
          $ref: '#/components/schemas/WirelessAddlClone'
    WirelessAddlClone:
      type: object
      required: [if, mode, descr, cloneif]
      properties:
        if:
          type: string
        mode:
          type: string
        descr:
          type: string
        cloneif:
          type: string
    WirelessInterface:
      type: object
      required: [mode, standard, protmode, ssid, channel, authmode, txpower, distance, regdomain, regcountry, reglocation, wpa, auth_server_addr, auth_server_port, auth_server_shared_secret, auth_server_addr2, auth_server_port2, auth_server_shared_secret2, wme, channel_width]
      properties:
        mode:
          type: string
        standard:
          type: string
        protmode:
          type: string
        ssid:
          type: string
        channel:
          type: string
        authmode:
          type: string
        txpower:
          type: string
        distance:
          type: string
        regdomain:
          type: string
        regcountry:
          type: string
        reglocation:
          type: string
        wpa:
          $ref: '#/components/schemas/WPASetting'
        auth_server_addr:
          type: string
        auth_server_port:
          type: string
        auth_server_shared_secret:
          type: string
        auth_server_addr2:
          type: string
        auth_server_port2:
          type: string
        auth_server_shared_secret2:
          type: string
        wme:
          $ref: '#/components/schemas/WMESetting'
        channel_width:
          type: string
    WirelessInterfaces:
      type: object
      required: [interfaces, interfacesClone]
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/WirelessInterface'
        interfacesClone:
          type: array
          items:
            $ref: '#/components/schemas/WirelessAddl'
